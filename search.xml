<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多人博客项目前期准备登录和退出功能</title>
      <link href="/2020/02/19/duo-ren-bo-ke-xiang-mu-deng-lu-ji-tui-chu-gong-neng/"/>
      <url>/2020/02/19/duo-ren-bo-ke-xiang-mu-deng-lu-ji-tui-chu-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>多人博客管理页面，分为博客前台内容即博客文章列表的展示和文章详细，博客后台内容即博客管理页面,登陆页面，用户管理和文章管理</p><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><ol><li><p>文件夹准备工作</p><ul><li>pubilc 静态资源文件夹</li><li>model 数据库操作文件夹</li><li>route 路由文件夹</li><li>views 模板文件夹</li></ul></li><li><p>生成项目描述及依赖包详情文件package.json</p></li><li><p>下载项目所需依赖包</p><pre><code>npm i express mongoose art-template express-art-tamplate</code></pre></li><li><p>使用express创建网站服务器</p></li><li><p>构建模块化路由及文章列表展示部分路由和用户管理路由，两个大方面的主路由地址</p><ul><li>home.js 博客文章展示路由</li><li>admin.js 博客管理路由</li></ul></li><li><p>构建页面模块</p><p>在模板中的静态资源外链文件写相对路径都是相对于浏览器地址而言的(因为是由浏览器解析的),因此所有外链文件应该写绝对路径而不是相对路径    /表示绝对路径</p><p>将模版公共部分(头部和侧边栏)抽离到common文件夹中用include引入到模板中,html骨架也抽离出来到common文件夹,用extend继承block填充</p></li></ol><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><ol><li><p>登录时输入用户邮箱和密码,去数据库查找是否有该邮箱和密码,因此需要连接数据库,并创建用户集合</p></li><li><p>用户集合规则根据用户页面来设计</p><ul><li>username 用户名  必填字段 规定最大最小长度</li><li>email 邮箱 必填字段 作为登录的唯一凭证值在数据库中是唯一的 设置unique</li><li>password 密码 必填</li><li>role 角色 ‘admin’为超级管理员 ‘normal’ 普通用户</li><li>state 状态 如果是0表示启用状态 如果是1表示禁用状态</li></ul></li><li><p>给登陆表单添加提交地址,以及请求方式post,和name属性</p></li><li><p>点击提交后,客户端先判断用户是否填写了邮箱和地址，有一项没有填就阻止程序向下运行,给出错误信息，jq中获取表单中所有表单控件的方法serializeArray(),该方法返回的是一个数组,数组里面存着对象有几个表单控件就有几个对象形式是{name: ‘eamil’, value: ‘123312@qq.com’},我们想要变成这样的{eamil: <a href="mailto:123312@qq.com">123312@qq.com</a>},因此我们需要遍历数组并重新定义一个空对象,将每一个数组元素的name属性值变为对象的属性,value属性变为属性值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取登录表单值方法</span><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个空对象</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用serializeArray()方法获取所有表单控件值返回一个对象</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">serializeArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将数组元素name属性值作为obj的属性,value属性值作为属性值</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着获取返回值判断邮箱或者密码的长度是否等于0，等于零就弹出警告框并return</p></li><li><p>为防止客户端禁止运行脚本,在提交数据后服务端也需要判断用户是否填写了邮箱和地址，有一项没填就给客户端做出错误响应,阻止程序运行</p><p>根据post请求参数,判断参数的长度是否为0,如果为0,就设置400状态码及客户端出错响应一个error页面给客户端,并阻止程序向下运行</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//接受请求参数</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>email<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//防止禁止浏览器脚本,服务端二次验证,如果邮箱或密码的长度为零,跳转到错误页面,阻止程序向下运行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> password <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/error'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">'错误警告:邮箱地址或密码错误'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>服务器端判断完之后,根据填的邮箱地址去匹配用户的信息，如果没有找到该邮箱地址，响应错误</p><p>客户端或者服务器端验证通过时,我们获取这个邮箱地址,根据这个邮箱地址去数据库查询对应的用户信息,如果用户信息为空则返回一个空对象那么就响应错误页面阻止程序向下运行</p></li><li><p>找到了邮箱地址后将数据库的信息(正确邮箱对应的用户是唯一值)对用户的密码进行比对</p><p>如果返回的用户信息对象不为空,比对密码，这里比对的是加密的密码，使用第三方模块bcrypt中的compare方法,即你登陆的密码与查询到的用户的密码进行比对，返回的是一个布尔值,比对成功返回true,不成则是false</p></li><li><p>比对成功就登陆成功</p><p>为true就登陆成功,登陆成功后先引用express-session模块进行cookie的全局配置,拦截所有请求调用session方法进行配置,这样请求对象下就有一个session属性的对象,如果用户登陆成功,就在请求对象下的session属性下存取用户的用户名,然后在去请求其他页面看这个数据能否在其他模板中显示,登陆成功之后还要将用户的信息存储到locals属性下供所有模板头部使用这个变量,最后重定向回用户列表页</p></li><li><p>比对失败登陆失败，响应error页面并阻止程序向下运行</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>email<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果user不为空对象,说明查找出来了该信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对加密密码进行比较compare()方法第一个参数明文密码,第二个参数加密的密码,返回布尔值</span>        <span class="token comment" spellcheck="true">//true为匹配成功,false为匹配失败</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//比对密码成功就登陆成功</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//登陆成功即可访问该请求对象下存储的用户名</span>            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将用户信息储存在local对象下攻所有模板使用</span>            <span class="token comment" spellcheck="true">//这里不用引用app.js，请求对象下的app属性就是我们创建的那个服务器对象</span>            req<span class="token punctuation">.</span>app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> user<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登陆成功之后重定向</span>            res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//密码比对失败</span>            res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/error'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">'错误警告:邮箱地址或密码错误'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//user为空对象说明没有查找出来</span>        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/error'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">'错误警告:邮箱地址或密码错误'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h4 id="数据库密码加密操作"><a href="#数据库密码加密操作" class="headerlink" title="数据库密码加密操作"></a>数据库密码加密操作</h4><p>使用bcrypt第三方模块进行哈希加密</p><p>bcrypt 依赖的其他环境(安装这些环境才能使用这个模块)</p><ol><li><p>python 2.x</p></li><li><p>node-gyp npm install -g node-gyp</p></li><li><p>windows-build-tools</p></li><li><p>npm install –global –production windows-build-tools</p></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> bcrypt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcrypt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//生成随机字符串genSalt()</span>    <span class="token comment" spellcheck="true">//接受一个数值作为参数,数值越大随机字符串复杂度越大</span>    <span class="token comment" spellcheck="true">//返回生成的随机字符串,支持promise对象</span>    <span class="token keyword">const</span> salt <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">genSalt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对密码进行加密hash('明文密码','随机字符串')</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h4><p>删除客户端和服务器端的联系,即在用户点击退出登陆时，设置退出功能的路由,在该路由下删除该用户信息的session和cookies然后重定向回登陆页面即可,在用户点击退出登陆的时候a连接跳转地址为/admin/logout路由,在这个get请求的路由下设置用户退出登陆功能,使用请求对象下的session属性下的destroy()方法删除session，参数是一个回调函数,在删除session后调用该函数使用响应对象下的clearCookie()删除对应的cookie，重定向回登陆页面</p><pre class=" language-js"><code class="language-js">req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//删除cookie,connect.sid('想要删除的cookie名字')</span>        res<span class="token punctuation">.</span><span class="token function">clearCookie</span><span class="token punctuation">(</span><span class="token string">'connect.sid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重定向会登陆页面</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/login'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截"></a>登录拦截</h4><p>在用户没有登陆的情况下,除了登陆页面其他的博客管理页面均不能访问,用app.use拦截所有/admin的请求,写在路由之前不然就会先执行路由了,如果用户的访问地址不是登陆页面或者登陆成功(即session对象下没有username这个属性)那么就重定向会登陆页面不能访问其他博客管理页面,否则就是登陆状态next()走后面的中间件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">!==</span> <span class="token string">'/login'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//放行交给下一个中间件</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>最后再将一些功能代码剪切出去写在不同js文件中即不同模块中然后导出供其他模块使用,主要是路由模块和主模块的代码，让这两部分的代码看起来更加干净</p>]]></content>
      
      
      <categories>
          
          <category> 网站开发项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie与session简单理解</title>
      <link href="/2020/02/19/cookies/"/>
      <url>/2020/02/19/cookies/</url>
      
        <content type="html"><![CDATA[<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>在了解这个知识之前我们首先要知道http协议中客户端与服务器端的联系,通常情况下,在客户端发送一起请求后,服务器端接收了这个请求并作出响应,那么这一次沟通算是完成了,服务器端就与客户端之间没有任何的联系了,你不认识我,我不认识你,这个就叫做http协议的无状态性</p><p>为了在请求之后,服务器能认识客户端能与客户端有一定的联系,我们可以看到网站都是在登陆之后在请求别的页面是会出现只有登录后才能访问的数据,这是因为我们在登陆时向服务器端发送了请求,服务器端在接受这个请求的时候开出了一块空间来存储这个请求,然后把这个空间编了一个特有并且唯一标识的名字id,将这个名字一起响应给客户端,这个名字会伴随客户端下一次请求一起传给服务器端,那么服务器就会根据这个id去找对应的空间里存储的信息,找到了说明你之前登陆过,那么我已经认识你了,我们之间是有联系的,你就可以访问登录之后的数据。我们可以把这个在服务器端存放请求信息看着一个房间,然后有一个特定房间号交给客户端,一个房间号只能对应一个房间,这样客户端就有唯一凭证去跟服务器端联系,下一次请求带着对应房间号去找对应即可.</p><p>这就是cookie与session的联系</p><p>cookie就是用来存放房间号的,是服务器端生成房间号并把这个房间号存到给客户端的cookie中，就是说cookie是客户端开辟的一个空间来存服务器端的给出那个房间号的也就是sessionID，房间就是session对象,是由服务器端开辟的空间，所以客户端在第一次请求服务器还没作出响应时是没有cookie的,只有服务器作出了响应cookie中才会有数据，那么下一次请求就会携带这个cookie中的数据，去服务器端看房间号找对应的房间</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/1582112565(1)%20-%20%E5%89%AF%E6%9C%AC.jpg" alt=""></p><p>上图在我没有登陆的时候,打开开发者工具找到cookie这一项可以看到是没有值,因为没有做出请求,那么在我们按下登录向服务端请求时,并且服务端做出了响应,这个时候cookies中就有值了,这个value值就是经过加密的房间号,对应唯一的那个房间即session对象</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/1582112815(1).jpg" alt=""></p><p>不难看出一般cookie都是由域名方式存在的,并且cookie都是由保留时间的,如果没有设置保留时间,在浏览器关闭的时候客户端会把这个cookie释放的，那么再去打开浏览器这个值是没有的</p><p>第二次请求就会带着这个cookie去请求了,服务器端会解析这个cookie中的房间号然后去找对应房间，找到了说明之前来过,没找到就说明不认识</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/1582113035(1).jpg" alt=""></p><p>记住以下几点</p><ol><li><p>cookie是客户端开辟的空间来存放服务器给的房间号的</p></li><li><p>请求的时候cookie会在请求头中一起传给服务器端</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/1582113485(1).jpg" alt=""></p></li><li><p>服务器会解析传过来的值提取出房间号即对应的sessionid去寻找对应的对象信息</p></li><li><p>这样一来在完成一次请求后,服务器端就认识了客户端,客户端也认识了服务器端,两者之间就有了联系</p></li><li><p>在用户退出时删除session和对应的cookie即可,那么这个cookie代表房间号就没了就进不去了,服务器就不认识了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> cookie和session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架初步使用</title>
      <link href="/2020/02/18/node.js05/"/>
      <url>/2020/02/18/node.js05/</url>
      
        <content type="html"><![CDATA[<h2 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h2><p>express框架提供了一套完整用于开发web网站的api，让开发者创建web服务器比原生node.js更加容易。作为第三方模块,需要用npm下载并在项目中引用,会返回一个网站服务器对象就不用再添加http系统模块来创建了,使用框架后如果没有访问了没有设置的路由,不会跳到没有此网站,而且会响应connot get 该路由地址</p><h4 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入express框架</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建网站服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//响应用send方法</span>    <span class="token comment" spellcheck="true">//1.send方法内部会检测响应内容的类型</span>    <span class="token comment" spellcheck="true">//2.send方法会自动设置http状态码</span>    <span class="token comment" spellcheck="true">//3.send方法会帮我们自动设置响应的内容类型和编码</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可以直接响应json对象</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'曹强'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器创建成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>​    中间件是用来处理浏览器的请求的一些方法(就是拦截请求做一些处理再给出响应),当浏览器发送请求时候,由中间件来处理该请求，该请求可以同时被多个中间件请求,中间件分为express提供的例如get方法和post方法创建路由地址,也有开发人员写的,例如创建路由的处理函数就是由开发人员去写的,同一个请求是可以由多个中间件去处理的,不过默认从上向下一次匹配中间件,匹配成功了就会终止匹配,因此需要处理同一个请求设置不同的中间件时，需要next方法将请求传到下一个中间去处理</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//处理同一个get请求</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    req<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>app.use方法接收浏览器的所有请求不管是get还是post,因此请求匹配成功一个就不会走下一个中间件,因此该中间件写在最前面来接收所有请求,如果该中间件没有做出相应,也没有用next()将请求控制权给下一个中间件,那么浏览器就会卡住等待服务器响应</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//接受了浏览器的所有请求,不管是get还是post</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接受了所有请求,如果没有做出响应,也没有next交给下一个请求,就会卡在这里</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是走app.use的请求'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当请求地址为/request的时候先走上一个请求再走这一个请求</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是走app.use路径为/request的请求'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>中间件的一些应用场景(简单应用)</p><ol><li>用户登录,在用户登陆成功之前，判断用户是否登陆成功,没有登陆成功拦截请求,成功了就next()</li><li>网站维护时,接受任何请求地址直接给出响应</li><li>404访问的资源不存在,在最后定义，前面设置的路由没有访问到,就说明没有该资源,就直接响应404</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//网站维护公告,拦截所有请求给出响应</span><span class="token comment" spellcheck="true">// app.use((req,res,next) => {</span><span class="token comment" spellcheck="true">//     res.send('网站正在维护中...');</span><span class="token comment" spellcheck="true">// })</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表示用户登陆是否成功</span>    <span class="token keyword">let</span> login <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>login<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//登陆成功走下一个中间件</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//登陆失败直接给出响应</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请登录才能访问该页面'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//说明登陆成功</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'登陆成功,您可以访问该页面'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//404页面</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置404状态码</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'您访问的页面不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h4><p>一般在客户端发送请求时,比如读取文件或者读取数据库失败，都会有错误信息,我们需要读取错误信息，并且设置对应的解决办法，express给我们提供了错误处理中间件,分为同步处理和异步处理,同步处理,在发生错误时,直接抛出错误即<strong>throw new Error</strong>然后调用错误处理中间件读取错误设置响应,异步处理即载文件读取失败或者读取数据库失败,用next()传递错误对象参数,触发错误处理中间件读取错误对象的信息,调用了错误处理中间件并设置响应后,文件就可以在报错后正常运行</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同步抛出错误,触发错误处理中间件</span>    <span class="token comment" spellcheck="true">// throw new Error('程序发生未知错误');</span>    <span class="token comment" spellcheck="true">//处理异步api错误需要用next()传递错误对象,来调用错误处理中间件</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./01.js'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//说明有错误用next传递错误对象调用错误处理中间件</span>            <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//错误处理中间件,默认捕捉同步信息</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//错误对象,读取错误信息就是错误对象下的message属性</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>异步api的错误信息都是通过回调函数去处理,支持promise对象的用catch可以捕获错误信息</p><p>try catch可以捕获异步函数以及其他同步代码在运行时的错误</p><p>try{可能放生错误的异步函数}catch(错误对象){next(err) 触发错误处理中间}</p><p>一般支持promise对象的都能写成异步函数形式,不支持的就需要用util这个模块中的promisify()这个方法去包装才能写成异步函数形式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入express框架</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promosify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promisify<span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包装文件读取api</span><span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">promosify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建网站服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./01.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="构建模块化路由"><a href="#构建模块化路由" class="headerlink" title="构建模块化路由"></a>构建模块化路由</h4><p>将请求不同主页面的路径交给不同的路由对象去处理，这样不同的路由对象就可以单独放在js文件中作为单独的模块导出即可,可以在主入口文件中导入,并为不同的路由对象匹配路径</p><h4 id="处理get和post请求参数"><a href="#处理get和post请求参数" class="headerlink" title="处理get和post请求参数"></a>处理get和post请求参数</h4><p>get请求参数</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//get请求参数,直接通过请求对象req.query属性获得,自动转化成对象形式</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>post请求参数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入处理post请求参数的第三方模块</span><span class="token keyword">const</span> bodyparser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拦截所有请求,如果有post请求带来的请求参数,就用urlencoded将其转化为对象,添加给请求对象的body属性,如果没有post请求参数会自动next()交给下一个中间件</span><span class="token comment" spellcheck="true">//extended:false 使用querystring模块处理</span><span class="token comment" spellcheck="true">//extended:true 使用qs第三方模块处理请求参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyparser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用urlencoded方法返回值也是一个函数,带参数req,res,next的</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>app.use的使用,在app.use中传递函数的调用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//可以在app.use方法里面调用定义好的函数,可以带上实参来控制返回的函数</span><span class="token comment" spellcheck="true">//但是这个调用的函数要返回一个带有参数req,res,next的函数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h4><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index/:id/:name/:age'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//路由参数的表现形式为/123而不是分隔,这种方法也可以当作get请求参数</span>    <span class="token comment" spellcheck="true">//使用req.params属性读取路由参数,内部自动转化为对象形式</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要使用/index/id/name/age来访问该路由</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//拦截所有请求通过express内置的static(静态资源路径)访问静态资源,如果不需要访问静态资源会自动next下一个中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h4><p>下载art-template和express-art-template这两个模板引擎</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//告诉express框架使用什么模板引擎来渲染什么后缀的模板文件</span><span class="token comment" spellcheck="true">//1.模板后缀2.模板引擎</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'art'</span><span class="token punctuation">,</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//告诉express框架模板存放的位置,配置模板位置,第一个值是规定的配置模板路径需要写的,第二个值是模板所在路径</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//告诉express框架模板默认的后缀是什么,第一个参数是规定这样写的</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'art'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用res.render()方法使用模板引擎</span>    <span class="token comment" spellcheck="true">//将路径和后缀拼接好</span>    <span class="token comment" spellcheck="true">//直接将拼接好的结果相应给了客户端,不需要设置变量接收</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'index'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//将公共数据添加到locals对象下,每个模板都可以访问到该数据locals.变量名 = 数据</span>app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>express框架提供了一套完整构建web网站结局方案,比起使用原生更加快捷方便，结构看起来更加清晰</li><li>创建服务器不需要引入http模块，直接调用require框架返回的方法创建服务器对象，监听路有不需要判断路径和请求方式什么的，可以直接使用服务器对象下的get、post、use方法，使用res.send()响应给浏览器不需要往响应头再去指定类型和编码了</li><li>模块化路由，可以根据请求路径不同在不同模块中(不同js文件)创建路由对象具体的请求响应步骤在该文件中执行,只需要导入模块对象,在主入口文件中导入指定对应路由的请求地址即可</li><li>处理get请求参数,直接使用请求对象中的.query属性即可,post请求参数导入请三方模块body-parser返回一个处理参数的对象,在use方法中调用该对象下的<strong>urlcoded({extended:false})</strong>即可在请求对象中使用body属性获取请求参数对象</li><li>路由参数，就是指定路由地址/参数1/参数2，而不是以？分隔的参数，通过请求对象的params属性获取</li><li>静态资源访问直接在use方法中调用框架提供的<strong>static()</strong>方法即可，参数填静态资源的路径s</li><li>使用模板引擎,下载express-art-template 和 atr-tempalate，做四件事<ul><li>设置用什么模板引擎来渲染什么后缀的模板文件engine方法</li><li>用set方法配置模板文件的根目录</li><li>用set方法配置模板文件的默认后缀名</li><li>用响应对象中的render(‘文件名不需要后缀’, ‘数据’)方法即可渲染想要的模板文件到页面中</li><li>公共数据需要所有模板都能访问到的数据,可以属性的形式添加到<strong>locals</strong>对象下</li></ul></li><li>中间件的使用,即框架提供的一些方法用来处理客户端请求的,用next()方法可以将请求处理权交给下一个中间件,协同处理同一请求,错误处理中间件,用来在发生错误时调用,使文件再发生错误时能正常运行,同步通过throw new error正常抛出错误调用,异步通过next()传入错误对象调用</li></ol>]]></content>
      
      
      <categories>
          
          <category> Express框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Express -node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node模板引擎</title>
      <link href="/2020/02/18/node.js04/"/>
      <url>/2020/02/18/node.js04/</url>
      
        <content type="html"><![CDATA[<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>使用模板引擎是为了方便拼接html文件字符串,目前使用最多的是art-template模板引擎</p><p>基本使用,先下载第三方模块art-template,然后引用会返回一个方法,这个方法用来拼接模板中的字符串,模板就是需要拼接的html文件,只不过一般改成art后缀</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回一个方法</span><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> views <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'index.art'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法第一个参数为模板的路径绝对路径,第二个参数为要在模板中显示的数据,对象类</span><span class="token comment" spellcheck="true">//返回是拼接好的字符串</span><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span>views<span class="token punctuation">,</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><p>标准语法            </p><p>原始语法        &lt;%= 数据 %&gt;</p><p>模板引擎默认不识别数据中的html标签，如果需要识别html标签需要原文输出</p><p>标准语法            </p><p>原始语法        &lt;%- 数据 %&gt;</p><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><pre><code>标准语法{{if 条件}} ... {{/if}}{{if 条件1}} ... {{else if 条件2}} ... {{/if}}原始语法&lt;% if (条件) { %&gt; ... &lt;% } %&gt;&lt;% if (条件) { %&gt; ... &lt;% } else if (条件2){ %&gt; ... &lt;% } %&gt;</code></pre><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><pre><code>标准语法$index表示索引,$value表示数组元素{{each 数据}}    {{$index}} {{$value}}{{/each}}原始语法&lt;% for(var i = 0; i &lt; 数据.length; i++) { %&gt;    &lt;%= i %&gt; &lt;%= 数据[i]&gt;&lt;% } %&gt;</code></pre><h4 id="子模版"><a href="#子模版" class="headerlink" title="子模版"></a>子模版</h4><p>子模版将网站公共的区块(头部、尾部)抽离到单独的文件中,然后再想要使用子模版的页面引入子模版即可</p><pre><code>标准语法{{include '模板路径'}}原始语法&lt;% include(&#39;模板路径&#39;)%&gt;</code></pre><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><ol><li><p>把html骨架模板单独拿出来放在一个模板里,因为所有页面都需要他,然后每个页面在使用的时候继承该html骨架模板即可</p></li><li><p>由于每个页面模板需要填写的link以及内容不同,所以在骨架模板中可以用block ‘填充部分名字’ /block表示该位置需要你继承时填入你自己所需要的,例如这是一份骨架模板,页面标题和link引入文件部分和内容部分,需要你继承的时候自己去填写</p></li><li><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{block 'title'}}{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">需要填充标题</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span>    {{block 'link'}}{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">需要填充引入的文件</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    {{block 'content'}}{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">需要填充内容</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>继承骨架模板,继承时用 extend ‘骨架模板路径’,同时用 block ‘填充部分名字’  /block,把你这个页面需要的内容填充完整</p><pre class=" language-html"><code class="language-html">{{extend './common/layout.art'}}{{block 'title'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">填充了标题</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span>{{block 'link'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">填充了引入的css文件</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span>{{/block}}{{block 'content'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">填充了内容</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h4><p>1.模板中不能直接使用第三方模块的方法,需要像模板中导入变量</p><p>template.defaults.imports.变量名 = 变量值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> format <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'date-format'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入处理时间的第三方模块</span><span class="token comment" spellcheck="true">//将format方法导入模板中,那么模板中就可以使用该方法</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>imports<span class="token punctuation">.</span>format <span class="token operator">=</span> format<span class="token punctuation">;</span></code></pre><p>2.配置模板的根目录,如果模板都在同一目录下,我们可以设置根目录,那么每次使用template是的路径就可以直接写模板文件名,还可以配置模板的默认后缀</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//配置模板根目录,模板根目录为views文件夹</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>root <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置模板的默认后缀,将模板默认后缀设置为.art</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>extname <span class="token operator">=</span> <span class="token string">'.art'</span><span class="token comment" spellcheck="true">//写路径的时候直接写views下文模板名即可,默认后缀为.art</span><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'06'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>模板引擎,在我们想要网站动态将html文件响应给页面时,之前的做法是将整个HTML文件拼接字符串当作变量响应给客户端,现在可以直接用模板引擎在html页面进行数据的操作,然后返回直接拼好的字符串.    在模板中我们可以原始方法和标准方法对数据进行处理,也可以使用提供的一些方法在模板说写js语法,将html页面里的数据变成动态的</p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB数据库增删改查</title>
      <link href="/2020/02/15/node.js03/"/>
      <url>/2020/02/15/node.js03/</url>
      
        <content type="html"><![CDATA[<h3 id="mongoDB数据库"><a href="#mongoDB数据库" class="headerlink" title="mongoDB数据库"></a>mongoDB数据库</h3><p>又称为NoSql数据库,即非关系型数据库,适用于处理大数据,采用json格式来存储数据，契合javascript语法操作，因此很适合node.js的开发者</p><p>操作mongoDB可以通过node.js中提供的数据库API来进行操作，也可以使用mongoD的可视化操作软件来进行操做</p><h3 id="数据库中一些概念"><a href="#数据库中一些概念" class="headerlink" title="数据库中一些概念"></a>数据库中一些概念</h3><p>一个数据库软件中可以包含多个数据仓库，每一个数据仓库中可以创建多个数据集合来存放不同类别的数据，每一集合中存放了同一类的一组数据叫文档，由json对象的形式存取，采用键值对的方式存取，对象的属性就叫字段</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/mongdb%E6%A6%82%E5%BF%B5.png" alt=""></p><h3 id="使用node-js操作mongodb"><a href="#使用node-js操作mongodb" class="headerlink" title="使用node.js操作mongodb"></a>使用node.js操作mongodb</h3><p>下载第三方模块mongoose,使用connect方法连接数据库,首先需要在命令行中启动mongdDB</p><pre><code>net stop mongdodb //停止mongodb服务net start mongodb //开启mongodb服务</code></pre><p>connect方法中有两个参数,第一个是数据库的地址类似url地址，第二个是选项,这个方法返回的是promise对象,再mongdodb中不需要使用什么命令创建数据库，如果你连接的数据库不存在，会自动创建该数据库</p><h3 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h3><p>node中与数据库相关的api的都是异步的,所以支持promise的方法获取回调结果</p><h4 id="方法一利用实例对象插入文档"><a href="#方法一利用实例对象插入文档" class="headerlink" title="方法一利用实例对象插入文档"></a>方法一利用实例对象插入文档</h4><ol><li>首先需要创建集合用来存放具体的数据,用model()方法,返回的是一个构造函数,用实例对象的方法来操作数据</li><li>创建集合之前需要规定集合的规则即规定集合中数据属性和其数据类型,用mongodb.Schema构造函数创建</li><li>像集合中插入数据,即创建文档,new一下model()方法返回的构造函数,写入要插入的数据按照集合规则来写,最后保存</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/playground'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>useNewUrlParser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span><span class="token string">'数据库连接失败'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建集合的规则,即规定需要加入的数据的数据类型</span><span class="token keyword">const</span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    author<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    publish<span class="token punctuation">:</span> Boolean<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建集合</span><span class="token keyword">const</span> Course <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Course'</span><span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个参数集合名称和集合规则，返回构造函数,利用实例对象的方法操作集合中的数据</span><span class="token comment" spellcheck="true">//创建文档,像集合中插入数据</span><span class="token keyword">const</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'node.js基础'</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> <span class="token string">'曹强'</span><span class="token punctuation">,</span>    publish<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用实例对象的save方法保存数据</span>course<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方法二是利用构造函数的create方法"><a href="#方法二是利用构造函数的create方法" class="headerlink" title="方法二是利用构造函数的create方法"></a>方法二是利用构造函数的create方法</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过create()方法,两个参数第一个是插入的数据,第二个回调返回插入数据的结果和错误信息</span>Course<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'javascript'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'曹强'</span><span class="token punctuation">,</span> publish<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//错误信息</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前插入的文档</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//通过promise对象操作异步结果</span>Course<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'javascript'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'曹强'</span><span class="token punctuation">,</span> publish<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doc <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="导入数据到数据库中"><a href="#导入数据到数据库中" class="headerlink" title="导入数据到数据库中"></a>导入数据到数据库中</h4><p>适用于json文件中的数据</p><pre><code>mongoimport -d 数据库名称 -c 集合名称 --file 要导入的数据文件    //使用该命令前首先要将mongoimport.exe的路径添加到系统环境变量中</code></pre><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a><strong>查询文档</strong></h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//查找集合find()返回promise对象,查找一组数据,以数组形式返回</span><span class="token comment" spellcheck="true">// User.find().then(result => console.log(result)).catch(err => console.log(err));</span><span class="token comment" spellcheck="true">//查找一个对象findOne(),默认返回第一个数据的对象,只会查找一个</span>User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个方法都可以传对象参数作为查找条件</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//$gt匹配大于 $lt匹配小于   匹配age大于20并且小于50的</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token punctuation">{</span>$gt<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span> $lt<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$in匹配是否包含</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>hobbies<span class="token punctuation">:</span> <span class="token punctuation">{</span>$<span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'足球'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//select()方法查询字段,不同字段之间空格隔开,默认会查询_id字段在前面加-排除</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'name age -_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sort()根据什么字段进行排序,前面加-为降序不加则为升序</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">'-age'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//skip()跳过多少数据 limit()限制查询数量</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//删除满足条件的一个数据,如果有多个满足条件的删除第一个,返回删除的那个数据</span>User<span class="token punctuation">.</span><span class="token function">findOneAndDelete</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据条件删除多个数据,如果不传条件或传空对象默认删除所有</span><span class="token comment" spellcheck="true">//返回一个对象{n:删除的个数,ok:删除是否成功(0/1),deletedCount:删除的个数}</span>User<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="更新数据-修改"><a href="#更新数据-修改" class="headerlink" title="更新数据/修改"></a>更新数据/修改</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//根据条件更新一个数据,返回一个对象{ n: 1, nModified: 1, ok: 1 }</span><span class="token comment" spellcheck="true">// User.updateOne({name: '张三'}, {name: '张飞'}).then(result => console.log(result));</span><span class="token comment" spellcheck="true">//根据条件更新多个数据,返回操作成功的对象</span>User<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>验证字段</strong>是否满足规则，限定字段的一些规则</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/Snipaste_2020-02-15_22-01-55.png" alt=""></p><p>用catch方法捕捉验证的错误信息</p><pre class=" language-js"><code class="language-js">Post<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>title<span class="token punctuation">:</span><span class="token string">'aa'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> category<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'bd'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取错误信息对象</span>        <span class="token keyword">const</span> err <span class="token operator">=</span> error<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//errors存着所有有错误的字段中的信息</span>        <span class="token comment" spellcheck="true">// 循环错误信息对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将错误信息打印到控制台中</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>集合的关联</p><p>在想要关联的字段规则的type属性中指定想要关联字段的ID<strong>mongoose.Schema.Types.ObjectId</strong>,    ref:关联的集合</p><p>联合查询用populate()指定要查询的关联字段即可</p>]]></content>
      
      
      <categories>
          
          <category> mongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
            <tag> NoSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的递归和闭包</title>
      <link href="/2020/02/13/han-shu-de-di-gui-he-bi-bao/"/>
      <url>/2020/02/13/han-shu-de-di-gui-he-bi-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h1><p>函数的递归是指在函数中调用函数自己</p><p>从定义上我们就可以看出,一个函数在外部被调用，在里面还需要调用自己，那么它就会在内部一直反复调用自身，因此我们要限制递归的条件，不能无限被调用。</p><h2 id="递归的条件"><a href="#递归的条件" class="headerlink" title="递归的条件"></a>递归的条件</h2><p>递归有两大条件</p><ol><li>递归的停止条件,在什么时候停止调用自己,但是只有停止条件不行,我们还需要每一次递归后都一步步接近这个条件，所以一般递归问题我们都会反向思考,每次递归的过程都会一步一步的将问题所简化</li><li>调用递归的条件,就是我们想要在什么时候调用自己</li></ol><h4 id="递归的举例"><a href="#递归的举例" class="headerlink" title="递归的举例"></a>递归的举例</h4><p>我对递归的理解就是,在你执行一个函数的过程中,中间需要你去调用另外一个函数,但是本身并没有被执行完，那么就会暂时将自己压下来去等待中间函数的调用,在中间函数执行过程中,又没有执行完成就去调用另一个函数,当前函数又会被压下,如此反复循环,等到达终止条件时,最后一个调用执行完成会从当前为起点往回依次执行完之前之前被压下的函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>图解步骤<br><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/%E9%80%92%E5%BD%92%E6%A1%88%E4%BE%8B.png" alt=""></p><p><strong>斐波那契数列</strong><br>            1,1,2,3,5,8,13<br>​            第一项1 第二项1 第三项2 第四项3 第五项5 第六项8 第七项13<br>​            从第三项开始2 = 1 + 1   第二项 + 第一项<br>​            第四项3 = 2 + 1     第三项 + 第二项<br>​            因此从第三项开始后面的数等于前面两项之和<br>​            递归公式<br>​            f(3) = f(2) + f(1)  f(4) = f(3) + f(2)<br>​               ….<br>​            f(n) = f(n -1) + f(n - 2)<br>​            递归结束条件为n = 1 和 n = 2</p><pre class=" language-js"><code class="language-js">        <span class="token keyword">function</span> <span class="token function">fibonacc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//第一项和第二项直接返回1</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当n从第三项开始,后面一项等于前面两项之和</span>                <span class="token keyword">return</span> <span class="token function">fibonacc</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacc</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fibonacc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fibonacc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>深拷贝递归</strong></p><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//深拷贝是多层拷贝,如果拷贝的是引用数据类型,会重开一个内存空间把数据完全拷贝到新对象中,而不是只拷贝内存地址</span>        <span class="token comment" spellcheck="true">//因此内存地址不是指向同一个，修改其中一个值不会影响另一个</span>        <span class="token keyword">let</span> cq <span class="token operator">=</span> <span class="token punctuation">{</span>            uname<span class="token punctuation">:</span> <span class="token string">'cq'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>                sex<span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span>                birth<span class="token punctuation">:</span> <span class="token string">'10/24'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//因为深拷贝拷贝多层,见到数据类型直接拷贝值,复杂数据类型需要遍历重新赋值给新对象</span>        <span class="token comment" spellcheck="true">//外层对象也需要遍历,因此内层如果是复杂数据类型需要重复遍历,就需要使用递归</span>        <span class="token comment" spellcheck="true">//封装深拷贝函数两个参数,第一个参数拷贝给谁(目标对象),第二个参数原始对象即被拷贝的对象</span>        <span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> oldObj<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//遍历被拷贝的对象</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取对象的属性值</span>                <span class="token keyword">let</span> item <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//因为对象中存了不同数据类型的数据，字符串、数字、数组、对象等</span>                <span class="token comment" spellcheck="true">//如果是简单数据类型直接复制,将值直接赋值给目标对象即可newObj[k] = item</span>                <span class="token comment" spellcheck="true">//如果是复杂数据类型，要进入其中继续遍历,将里面的值取出来一个个赋值</span>                <span class="token comment" spellcheck="true">//判断item的类型</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果是数组</span>                    newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果是对象</span>                    newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//就是简单数据类型</span>                    newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cq<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deepCopy</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> cq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//深拷贝修改其中一个引用数据类型的值不会改变另一个</span>        o<span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变了</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来的没有改变</span></code></pre><p><strong>猴子吃桃问题</strong></p><p>​    猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个，<br>​        第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃前一天剩下的一半零一个。<br>​        到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘多少个桃子？<br>​        第一天的桃子数量,等于第二天的桃子数量+1乘以二 f(1) = (f(2) + 1) * 2<br>​        第二天的桃子数量,等于第三天的桃子数量+1乘以二 f(2) = (f(3) + 1) * 2<br>​        第三天的桃子数量,等于第四天的桃子数量+1乘以二 f(3) = (f(4) + 1) * 2<br>​        …第十天的桃子数量,等于1                 f(10) = 1<br>​        每天的桃子数量等于后一天桃子数量+1 乘以2    从第十天可以倒推第一天的   当n==10停止递归</p><pre class=" language-js"><code class="language-js">        <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第十天停止递归</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`第一天一共摘了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">个桃子`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包的简单理解就是函数的嵌套,一个函数能访问到另一个函数中的局部变量。</p><p>这里有一个局部变量的概念，就是局部作用域即函数作用域,一般来说函数作用域在函数调用的时候被创建,这个时候这个作用域的变量会被开辟一个内存空间去保存,在函数调用完成后，函数作用域就会销毁,同时该变量也会被销毁，释放这个内存空间，这是一般情况。</p><p>闭包就是延续了变量的生命周期，使其嵌套的函数能够访问到这个局部变量，尽管这个函数已经被调用,在函数调用完成时,闭包现象就是能继续访问里面的局部变量,说明变量没有被销毁，还存在意味着内存空间还存着它，造成了内存泄露。</p><p>来看一下代码体验</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token number">2</span><span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//接收函数的返回值即inner函数</span><span class="token comment" spellcheck="true">//调用inner函数</span><span class="token function">v1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//能够访问到变量n 输出11，此时n变为11</span><span class="token function">v2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n = 11没有被销毁,输出12</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议与报文以及请求参数</title>
      <link href="/2020/02/12/node.js02/"/>
      <url>/2020/02/12/node.js02/</url>
      
        <content type="html"><![CDATA[<p>ip地址和域名</p><p>ip地址是每个服务器都特有的表示，客户端同ip地址可以找到指定的服务器，而域名则是网址名，一般都是将域名转换为ip地址才能找到服务器</p><p>端口就是服务器提供给客户端的一些服务类型，比如客户端浏览器要想向服务器发送web请求，那么这个时候服务器就会有对应的web服务端口(80端口)去接收这个请求，再比如浏览器向服务器发送了发送邮件的请求，那么服务器就会有一个专门处理邮件问题的端口去接受这个请求。</p><p>url</p><p>统一资源定位符</p><p>就是服务器端资源所在的位置，一般由网络协议、ip/域名：端口、资源所在位置等组成</p><p>在开发阶段我们自己的电脑如果安装服务器端的运行环境就可以用来创建接收客户端信息的对象，来响应客户端的请求，本地服务器的域名为localhost 本地ip127.0.0.1    可以用localhost来访问到自己的电脑就是开发者自己电脑上的本地服务器</p><p>创建网站服务器</p><p>首先需要引入http模块，使用creatServer()创建服务器对象，然后监听客户端请求事件，事件处理函数中有两个参数，一个是请求对象，一个响应对象，简单的用响应对象做出响应,然后监听我们的端口(3000),这样一来简单web服务器搭建好了,利用本地域名进行访问</p><p>可以用请求对象获取请求类型请求地址请求消息等等</p><p>可以用响应对象对客户端返回一些信息，如响应头中修改状态码和响应报文的一些信息</p><p>一般用on方法绑定一些事件</p><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a><strong>http协议</strong></h3><p>http协议相当于服务器与客户端之间沟通的桥梁、沟通的规范，超文本传输协议,超文本就相当于html</p><p>客户端向服务器端请求数据，服务器接收这个请求并可以做出响应,请求或响应的数据块成为<strong>报文</strong></p><p><strong>请求报文</strong>客户端向服务器发出的请求</p><p>请求头中的信息和响应头中的信息一般是键值对形式对象存在的</p><p>请求方式，告诉服务器这次请求的目的，GET(请求数据)常见的客户端请求数据就是输入网址 post(发送数据)，一般使用post方式更加安全</p><p>一般输入网址为客户端的get请求，表单提交为post请求</p><p><strong>响应报文</strong></p><p>一般响应报文主要是http状态码的形式返回客户端</p><ul><li>200 请求成功</li><li>404 请求的资源没有被找到</li><li>500 服务器端错误</li><li>400 客户端请求有语法错误</li></ul><p>请求参数分为get请求参数和post请求参数</p><p><strong>get请求参数</strong></p><p>一般在浏览器请求地址的时候,地址后面会有请求参数？uname=caoqiang&amp;age=18    以&amp;分隔的键值对形式</p><p>因为这个参数是在url中,因此需要引入url模块来处理这个参数，变成我们想要的对象形式,用parse()方法解析url地址，返回url的信息是一个对象，加第二个参数为true就能将请求参数转化为对象形式</p><p><strong>post请求参数</strong></p><p>格式与请求参数一样，放在请求报文中，而不是放在地址栏中,因此我们需要引用querystring模块去将这个字符串解析成对象,在发送post请求的时候,需要data事件(在传递请求参数的时候触发)和end事件(传递参数结束时触发)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入查询字符串模块</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个字符串来进行拼接，因为传递的参数有很多</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//请求监听data时end事件</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//传递时进行拼接</span>        str <span class="token operator">+</span><span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//传递结束时进行解析成对象</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我的第一个服务器创建成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始搭建hexo博客</title>
      <link href="/2020/02/12/da-jian-hexo-bo-ke-01/"/>
      <url>/2020/02/12/da-jian-hexo-bo-ke-01/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步准备工作"><a href="#第一步准备工作" class="headerlink" title="第一步准备工作"></a>第一步准备工作</h3><p>首先下载node.js运行环境,去官网下载长期稳定版,node安装好中自带npm包管理工具,因为hexo博客框架是基于node.js的，另外还需要下载git,确认这两个本电脑都已经安装可以去看本地path环境变量是否存在两者路径,如果有则说明安装成功，没有则需自行配置。</p><h3 id="第二步下载hexo"><a href="#第二步下载hexo" class="headerlink" title="第二步下载hexo"></a>第二步下载hexo</h3><p>1.在需要的文件中打开命令行工具,安装hexo命令行全局工具</p><pre><code>npm install -g hexo-cli</code></pre><p>2.然后用hexo命令创建博客文件夹(文件夹名字可自行定义)</p><pre><code>hexo install blog</code></pre><p>3.执行完以上操作后,可以看到生成了blog文件夹,注意里面的.config.yml文件和themes文件(.confing.yml文件是配置网站的一些基本信息，themes是主题后面会详细说明),利用package.json文件里面依赖属性可以下载hexo所需要的依赖包</p><pre><code>npm install</code></pre><p>4.下载完成后会多出一个node_modules的文件夹，这个文件是下好的依赖包</p><p>这样一个基本博客结构就搭建好了,进入到blog文件夹打开命令行启动hexo</p><pre><code>hexo s</code></pre><p>启动之后就可以在本地localhost:4000查看到博客，这样一个基本的本地博客就搭建好了</p><p>一些常用的命令</p><pre><code>hexo server  简写 hexo s         //本地启动hexo generate 简写 hexo g     //生成静态文件hexo deploy 简写 hexo d         //部署到网站hexo clean                     //清除缓存和已经生成的静态文件hexo new    简写 hexo n        //page新建页面    &quot;文章名&quot;新建文章</code></pre><p>更多命令请到<a href="https://hexo.io/zh-cn/docs/commands#new" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands#new</a>中查看</p><h3 id="第三步部署到远端服务器"><a href="#第三步部署到远端服务器" class="headerlink" title="第三步部署到远端服务器"></a>第三步部署到远端服务器</h3><p>部署到自己的github仓库,新建一个仓库,仓库名只能是自己的github ID.github.io</p><p>然后修改_config.yml文件,找到deploy</p><pre><code>deploy:  type: git  repo: git@github.com:ID/ID.github.io.git  branch: master</code></pre><p>然后命令行</p><pre><code>hexo ghexo d</code></pre><p>这样输入<a href="https://id.github.io就可以远端访问博客了,可以自行更换域名,后续会讲" target="_blank" rel="noopener">https://id.github.io就可以远端访问博客了,可以自行更换域名,后续会讲</a></p><h3 id="更换自己想要的主题"><a href="#更换自己想要的主题" class="headerlink" title="更换自己想要的主题"></a>更换自己想要的主题</h3><p>在github上找自己想要的hexo主题,或者hexo官网选择,默认的主题是landscape，在themes文件夹是主题文件夹</p><p>进入到themes文件夹,输入git命令</p><pre><code>git clone 你想要的主题仓库地址</code></pre><p>进入.config.yml，更换主题</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: 主题名</code></pre><p>去对应主题查看官方文档配置自己想要的样式</p><pre><code>hexo cleanhexo ghexo s</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初步使用git</title>
      <link href="/2020/02/12/git/"/>
      <url>/2020/02/12/git/</url>
      
        <content type="html"><![CDATA[<h3 id="进入到需要上传到远端的文件-使用全局配置"><a href="#进入到需要上传到远端的文件-使用全局配置" class="headerlink" title="进入到需要上传到远端的文件,使用全局配置"></a>进入到需要上传到远端的文件,使用全局配置</h3><p>git config –global user.name “github名字”和git config –global user.email “github邮箱”<br>在github上建立远程仓库</p><p>git init进行本地初始化  建立本地暂存区</p><p>readme.md//这个markdown文件是进行说明的文档</p><p>.git文件存储当前项目的所有版本信息</p><p>本地文件夹叫工作区  git init后的是暂存区 github上创建的仓库是远程仓库</p><p>将工作区的文件提交到暂存区<br>git add 文件名 或者 git add *   表示提交所有文件    git commit -m “提交的描述”</p><h3 id="查看当前工作区的状态"><a href="#查看当前工作区的状态" class="headerlink" title="查看当前工作区的状态"></a>查看当前工作区的状态</h3><p>git status  用于查看当前工作区的文件是否被修改</p><p>如果被修改了可以git add 文件名 重新提交修改过的文件    也可以用git checkout 文件名从暂存区恢复文件到工作区</p><h3 id="git-diff-可以详细查看工作区和暂存区的版本区别-看看哪个文件被修改了-修改了什么内容"><a href="#git-diff-可以详细查看工作区和暂存区的版本区别-看看哪个文件被修改了-修改了什么内容" class="headerlink" title="git diff 可以详细查看工作区和暂存区的版本区别 看看哪个文件被修改了 修改了什么内容"></a>git diff 可以详细查看工作区和暂存区的版本区别 看看哪个文件被修改了 修改了什么内容</h3><h3 id="git-log-查看已经提交到暂存区的历史版本"><a href="#git-log-查看已经提交到暂存区的历史版本" class="headerlink" title="git log 查看已经提交到暂存区的历史版本"></a>git log 查看已经提交到暂存区的历史版本</h3><h3 id="恢复文件到指定的某一个版本"><a href="#恢复文件到指定的某一个版本" class="headerlink" title="恢复文件到指定的某一个版本"></a>恢复文件到指定的某一个版本</h3><p>git reset –hard 版本号 </p><p>检查暂存区所有文件都都没有问题后，就可以将暂存区文件上传到github上，但是要先生成ssh密匙授权本电脑   ssh-keygen -t rsa -C “你github邮箱” 就可以生成本机的ssh密匙然后填写到github的ssh选项中  添加成功后就可以从本机将暂存区的文件传到github远程仓库中</p><h3 id="暂存区-gt-远程仓库"><a href="#暂存区-gt-远程仓库" class="headerlink" title="暂存区 =&gt; 远程仓库"></a>暂存区 =&gt; 远程仓库</h3><p>git remote add origin 远程仓库地址<br>git push -u origin master<br>第一次提交会要求输入github用户和密码  </p><p>第二次提交直接git push即可</p><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>从远程仓库克隆项目到本地</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>从远程仓库同步本地代码,即更新代码</p>]]></content>
      
      
      <categories>
          
          <category> git项目工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js第一天的学习</title>
      <link href="/2020/02/10/node01/"/>
      <url>/2020/02/10/node01/</url>
      
        <content type="html"><![CDATA[<h3 id="进入Node-js的学习"><a href="#进入Node-js的学习" class="headerlink" title="进入Node.js的学习"></a>进入Node.js的学习</h3><p>node为服务器开发，为后面Ajax后端技术做铺垫</p><p>实现网站的业务逻辑    如登录</p><p>数据的增删改查    如购物车</p><p>node使用javascript语法开发后端应用（有大量开源库可以使用）</p><h3 id="Node是什么"><a href="#Node是什么" class="headerlink" title="Node是什么"></a>Node是什么</h3><p>node是跟浏览器一样是javascript的运行环境，不同浏览器通过不同的js引擎来编译JavaScript转化成计算机认识的语言，因此js引擎不同js的运行环境不同，于是node是基于谷歌的js引擎V8来进行开发，达到了开发统一性</p><h3 id="Node-js运行环境"><a href="#Node-js运行环境" class="headerlink" title="Node.js运行环境"></a>Node.js运行环境</h3><p>下载完成后安装目录不要出现中文，用系统命令工具打开执行node，path系统环境变量：存放node.exe路径的，可以通过cmd命令找出来</p><h3 id="Node-js组成"><a href="#Node-js组成" class="headerlink" title="Node.js组成"></a>Node.js组成</h3><p>ES+node模块化api</p><p>如果要在node里运行js文件，应该在命令行中运行，将命令行的路径改成运行文件对应的路径 node 文件名即可运行</p><p>node.js全局对象global        global有一些js中window的方法在Node中可以省略</p><h3 id="Node-js模块化开发"><a href="#Node-js模块化开发" class="headerlink" title="Node.js模块化开发"></a>Node.js模块化开发</h3><p>js的开发有两大问题<strong>文件依赖</strong>和<strong>命名冲突</strong></p><p>软件模块化开发可以一个功能即为一个模块，多个模块组合成一个应用，每一个模块可以独立存在,如果一个模块中有问题，可以把这个模块拿出来修改问题，其他模块不会被影响</p><p>node中一个js文件代表一个模块，在模块内部定义的变量和函数默认情况下在外部无法得到</p><p>node中模块成员导出，即将一个模块中的函数和变量用expotrs导出,在另一个模块中用require(路径)方法返回对象来使用,路径可以不要后缀名</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//想要将一个模块中的函数或者变量取出给另一个模块用</span><span class="token comment" spellcheck="true">//使用exports对象,将函数或者变量作为对象的属性存入</span>exports<span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在想要导出的函数和变量的模块中，使用require()方法来接收，返回值为exports对象</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./03.module-a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二种方法    可以用module.exports对象导出</p><p>exports对象是module.exports对象的别名，两者是指向同一个对象(同一个内存地址),如果以对象.属性导出，两者一样，如果以对象赋值的形式导出，以module.exports对象为准</p><h3 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h3><p>Node开发环境提供的API成为系统模块</p><p>系统模块提供了许多模快开发API如<strong>文件系统模块 fs</strong>，首先在另一个模块中使用其他模块得用require引入</p><p>fs中提供了读取文件方法readFile(‘文件路径’[,编码],callback)三个参数</p><p>回调函数中存放方法的返回结果,回调函数有两个参数,<strong>一般node中提供的API中的回调函数第一个参数都是err</strong>表示一个对象，用来存储错误的信息，没有错误信息则为null,第二个参数为文件读取的结果</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./.01.helloworld.js'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//err是一个对象,存储错误的信息,如果没有错误的信息则为null</span>    <span class="token comment" spellcheck="true">//doc是文件读取的结果</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>文件写入内容writeFlie(‘路径’,’数据’,callback)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./dome.txt'</span><span class="token punctuation">,</span> <span class="token string">'我是即将写入的内容'</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果路径中没有这个文件会自动创建</span>    <span class="token comment" spellcheck="true">//err错误信息对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件内容写入成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>path模块</p><p>window中路径分隔符可以 / \</p><p>Linux中只能/</p><p>路径拼接方法path.join(‘字符串1’…)返回值为拼接好的路径../../</p><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><p>一般node中都写绝对路径，如果相对路径是相对于文件本身就用相对路径如require(),但是大多数情况下相对路径都是相对于命令行工具所在的目录</p><p>用__dirname获取当前文件夹的绝对路径    再用path.join()拼接路径</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前文件夹绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼接好的绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'01.helloworld.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'01.helloworld.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p>类似js插件,别人写好具有特定功能，我们可以直接拿来使用,也叫包</p><blockquote><p>第三方模块有两种形式：</p><ol><li>以js文件的形式存在，提供实现项目具体功能的API接口。本地安装</li><li>以命令行工具形式存在，辅助项目开发，例如   全局安装<ol><li>当文件修改时，自动重新node该文件</li><li>将md文档转换为更加通用的HTML文档</li></ol></li></ol></blockquote><h5 id="获取第三方模块"><a href="#获取第三方模块" class="headerlink" title="获取第三方模块"></a>获取第三方模块</h5><p>npm (node package manager) node的第三方模块管理工具</p><p>可以用这个工具到npm官网中下载想要的第三方模块</p><ul><li>所有第三方模块都被统一放置在了一个叫做<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>的网站中。</li><li>npm网站提供了一个叫npm的命令行工具用以下载此网站中的第三方模块。</li><li>Node环境默认集成了这个工具，所以可以直接使用，使用方式如下：<ul><li>npm install package  =&gt;  用npm命令安装(下载)第三方模块 (文件模块)</li><li>npm install package -g =&gt; 用npm命令安装(下载)第三方模块 (命令行工具)<ul><li>-g表示全局安装，即模块的使用不局限于当前项目，一般用于安装命令行工具。</li></ul></li></ul></li><li>默认情况下文件模块会被下载至一个叫做node_modules的文件夹中，如果文件夹不存在则自动创建。</li><li>全局安装的命令行工具会被下载到C:\Users\用户名\AppData\Roaming\npm文件夹中。</li><li>使用npm命令卸载包的方式<ul><li>npm uninstall package =&gt; 用npm命令卸载包</li></ul></li></ul><p><strong>nodemond第三方模块</strong>命令行工具要全局安装    可以实时检测文件的保存来执行文件    用nodemon来执行文件可以使用这个第三方模块    ctrl+c终止操作</p><p><strong>nrm</strong>全局    快速切换npm下载地址        默认是国外的nmpjs网站下载    切换到国内淘宝的下载地址    nrm ls下载地址列表 nrm use taobao    提高下载速度</p><h3 id="glup第三方模块"><a href="#glup第三方模块" class="headerlink" title="glup第三方模块"></a>glup第三方模块</h3><p>gulp提供的方法</p><p>gulp.src()获取任务要处理的文件    参数路径</p><p>gulp.dest() 输出文件，将处理好的文件输出 参数输出路径</p><p>gulp.task() 建立gulp任务</p><p>gulp.watch() 监控文件的变化</p><p>一般要在项目使用gulp模块，首先在npm中下载本地gulp库文件，当在项目目录中，创建一个src文件夹存放项目的所有源码,创建dist文件夹存放处理过后的文件,在各目录下创建gulpfile.js文件</p><p>在gulpfile.js中创建gulp任务,找到需要处理的文件经过.pipe处理输出到dist文件夹中,gulp任务创建完成后，下载</p><p>gulp-cli 命令行工具    在命令行中使用gulp命令来执行gulp任务 gulp 任务名即可</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建gulp任务gulp.task</span><span class="token comment" spellcheck="true">//第一个参数任务名,第二个参数任务的回调函数</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'fisrt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我的第一个gulp任务'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//gulp.src()获取处理的文件</span>    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/css/base.css'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//必须经过.pipe处理才能输出</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>gulp的插件:</p><ol><li>gulp-htmlmin:html代码压缩 安装 npm install   gulp-htmlmin</li><li>gulp-file-include:html公共模块提取 npm install gulp-file-include </li><li>gulp-less:less语法转化 npm install gulp-less </li><li>gulp-csso:css压缩 npm install gulp-csso</li><li>gulp-babel:JavaScript语法转化 npm install –save-dev gulp-babel @babel/core @babel/preset-env</li><li>gulp-uglify:压缩混淆js代码 npm install –save-dev gulp-uglify</li><li>！！！！！！注意！Gulp 4最大的变化就是你不能像以前那样传递一个依赖任务列表 如果Gulp是4.0的版本需要手动指定版本号 比如 npm install <a href="mailto:gulp@3.9.1">gulp@3.9.1</a> -D</li></ol><p>gulp插件的使用</p><p>使用npm下载插件        require引用插件        调用插件</p><p>找里面api怎么使用</p><p>gulp主要是为了项目上线给整个项目做了一些处理</p><h3 id="package-json的作用"><a href="#package-json的作用" class="headerlink" title="package.json的作用"></a>package.json的作用</h3><p>npm init 自动创建此文件后面 -y 都是用默认值</p><p>记录了项目的一些信息</p><p>在传输项目的时候不需要那些已经下载好的第三方模块文件夹,只需要package.json文件即可,然后用户根据此文件的”dependencies”属性依赖包直接npm install可以自动去找这个属性，来下载项目需要的第三方模块</p><h5 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h5><p>在项目的开发阶段和线上运营阶段，都需要依赖的第三方包，称为项目依赖。</p><p>使用<code>npm install 包名</code>命令下载的文件会默认被添加到package.json文件的dependencies字段中。</p><h5 id="开发依赖"><a href="#开发依赖" class="headerlink" title="开发依赖"></a>开发依赖</h5><p>在项目的开发阶段需要依赖，线上运营阶段不需要依赖的第三方包，称为开发依赖。</p><p>使用<code>npm install 包名 --save-dev</code>命令将包添加到package.json文件的devDependencies字段中。</p><p>npm install –production只下载dependencies中的依赖,即发布到线上时的依赖</p><p>package-lock.json记录了模块与模块之间依赖关系</p><p>版本和下载地址,加快了下载速度锁定了包的版本</p><p>“scripts”属性里存了一些命令的简写，如果写项目时有些比较长的命令需要重复输入,可以存在这个属性中定义一个简写    在命令行行中运行时 npm run 简写命令</p><h3 id="模块的查找规则"><a href="#模块的查找规则" class="headerlink" title="模块的查找规则"></a>模块的查找规则</h3><p>第一种方式require(‘./find.js’)引入模块参数是一个完整的路径文件,这会直接去找这个文件find.js</p><p>第二方式如果路径文件没有加后缀名require(‘./find’)</p><ul><li><p>首先去找当前文件夹下的find.js文件，如果找不到就在当前目录寻找同名文件夹</p></li><li><p>如果找了同名文件夹，就执行同名文件夹下index.js文件</p></li><li><p>如果同名文件夹中没有index.js，就会进入到同名文件夹根目录下的package.json文件中寻找里面main属性</p></li><li><p>如果在同名文件夹中找到了main属性中的js文件就引用成功,没找到则会报错</p></li></ul><p>第三种方式如果直接写模块名require(’find‘)</p><ul><li>首先会把find当成系统模块,如果没有该系统模块</li><li>则会当成第三方模块,则去node_modules文件夹下找同名的js文件</li><li>如果在node_modules文件夹下没有找到同名js文件，则会去找同名的js文件夹里面的index.js文件</li><li>如果没有找到index.js文件，则会通过同名文件夹下package.json去找main属性中入口文件,如果找不到则会报错</li></ul><p><strong>综上所述package.json中的main属性是模块的主模块文件,及模块的入口文件，里面所有的模块都依赖于这个主模块文件</strong></p><h3 id="node第一天的总结"><a href="#node第一天的总结" class="headerlink" title="node第一天的总结"></a>node第一天的总结</h3><p>​    node中最主要就是模块化开发，因此想要使用模块相当于引用文件需要用require()引入模块，有node环境自带的系统模块还有各种第三方模块，当你想使用哪个模块时就去文档里面找这个模块的一些api，知道api的用法和里面的参数和返回值，通过提供的这些api方法来进行操作，另外就是第三方模块可以用安装node后自带的npm工具下载，下载命令行辅助工具时一般是全局安装，查第三方模块api的使用</p><p>​    package.json文件主要记录了项目的一些信息，包括项目的名字、描述、项目的主入口文件、依赖的模块、简易化命令、代码协议等等。这个文件一般在项目的根目录,当我们导入别人的项目到本地时，可以通过这个文件中的依赖模块信息在npm下载模块，也可以查看到别人项目的信息等</p>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
