<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typescript装饰器</title>
      <link href="/2020/03/28/ts-zhuang-shi-qi/"/>
      <url>/2020/03/28/ts-zhuang-shi-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器: 装饰器就是一种特殊类型的声明,可以附加到类声明的方法、属性、参数上，可以修改类的行为，用来动态的修改类的行为,可以在不改变类声明本身的代码的情况下，添加一些额外的功能</p><p>通俗来说装饰器就相当于一个方法，可以注入到类、方法、属性或参数上来扩展类、方法、属性、参数的功能</p><p>主要常见的装饰器有：类装饰器、属性装饰器、方法装饰器、参数装饰器</p><p>装饰器的写法：普通装饰器(无法传参)， 装饰器工厂(可传参)</p><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><p>第一种普通装饰器</p><pre class=" language-tsx"><code class="language-tsx">// 类装饰器,使用@可以直接在类声明上面调用装饰器,定义装饰器的时候,如果是普通装饰器那么在定义时传入的新参就是当前类// 如果是装饰器工厂在定义的时候可以传入形参来表示传参，内部return一个函数接收当前类function logClass(params: any){  // params就是当前类,扩展里面的属性和方法  console.log(params)  params.prototype.apiurl = '动态扩展的属性'  params.prototype.sayHi = function(){      console.log('我是扩展的方法');  }}@logClassclass HttpClient {  constructor() {}  getData() {}}// 因为扩展方法不是本身class上有的,因此需要指定类型为anylet http1: any = new HttpClient();console.log(http1.apiurl);http1.sayHi()</code></pre><p>第二种工厂装饰器</p><pre class=" language-tsx"><code class="language-tsx">// 装饰器工厂(可传参)function logClass(params: string) {  return function(target: any) {    // target就是当前类,扩展里面的属性和方法    console.log(params)    target.prototype.apiurl = params    target.prototype.sayHi = function() {      console.log('我是扩展的方法')    }  }}@logClass('http://localhost:3000/get')class HttpClient {  constructor() {}  getData() {}}// 因为扩展方法不是本身class上有的,因此需要指定类型为anylet http1: any = new HttpClient()console.log(http1.apiurl)http1.sayHi()</code></pre><p>装饰器就是方法，可以扩展声明类的属性和方法，也可以修改类的属性和方法,不用修改class本身代码,在装饰器中修改,在类前面使用@调用对应的装饰器</p><p>使用类装饰器来重载构造函数，修改类中的属性和方法,在定义装饰器中使用extends关键字，返回一个class继承装饰器代表的类，在里面修改重载属性和方法</p><p>相当于继承了构造函数中的属性和方法然后进行修改,返回修改之后的类去替换原来的类</p><pre class=" language-tsx"><code class="language-tsx">function logClass(target: any) {    // 在装饰器中使用extends    return class extends target {        apiurl: string = '我是修改后的数据'        getData() {            console.log(this.apiurl);        }    }}// 类装饰器修改构造函数里的属性和方法@logClassclass HttpClient {    apiurl: string    constructor() {        this.apiurl = '我是构造函数里的apiurl'    }    getData() {        console.log(this.apiurl);    }}let http1 = new HttpClient()http1.getData()</code></pre><h4 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h4><p>属性装饰器</p><p>属性装饰器需要传入两个参数</p><p>第一个参数如果是修改静态属性就是类的构造函数,如果是实例属性就是类的原型对象</p><p>第二个参数为属性</p><p>在要修改的那个属性前面调用属性装饰器,对当前属性进行赋值操作,如果原来这个属性有值不能进行修改</p><pre class=" language-tsx"><code class="language-tsx">function logProto(params: string) {  return function(target: any, attr: any) {    // target就相当于类装饰器中target.prototype    console.log(target)    // 当前属性    console.log(attr)    // 修改属性    target[attr] = params  }}class HttpClient {  @logProto('我是修改的属性')  name: string;  constructor() {}  getData() {      console.log(this.name);  }}let p1 = new HttpClient()p1.getData()</code></pre><h4 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h4><p>方法装饰器也是使用@紧跟在要监视的方法前面</p><p>方法装饰器 可以用来监视类里的方法,修改或重写方法</p><p>有三个参数 第一个参数如果是静态方法就是类的构造函数,如果是实例方法就是类的原型对象</p><p>第二个参数,成员的名称(方法的名称)</p><p> 第三个参数,当前方法的描述</p><pre class=" language-tsx"><code class="language-tsx">// 方法装饰器扩展类的属性和方法function get(params: string) {    return function (target:any, methodName:any, desc:any) {        console.log(target);        console.log(methodName);        // desc中value就表示当前的方法        console.log(desc);        // 跟类装饰器一样扩展方法和属性        target.apiurl1 = params;        target.getParams = function() {            console.log('我是扩展的方法');        }    }}class HttpClient {    apiurl: string = 'xxxx';    constructor() {}    @get('http://localhost:3000/get')    getData() {        console.log(this.apiurl);    }}let http:any = new HttpClient();console.log(http.apiurl1);http.getParams()</code></pre><pre class=" language-tsx"><code class="language-tsx">// 修改原有的方法,将getData中参数改成字符串型function get(params: string) {    return function (target:any, methodName:any, desc:any) {        // desc中value就表示当前的方法        console.log(desc.value);        // 将原来的方法保存        let oMethods = desc.value;        // 再对原来的方法进行修改        desc.value = function(...args:any[]) {            args = args.map(value => {                return String(value)            })            // 调用原来的方法,将修改成字符串的参数传入            oMethods.apply(this, args)        }    }}class HttpClient {    constructor() {}    @get('http://localhost:3000/get')    getData(...args:any[]) {        // getData就已经被修改过了,所有的参数都会转化为字符串        console.log(args);    }}let http:any = new HttpClient();http.getData(123, '123')</code></pre><h4 id="方法参数装饰器"><a href="#方法参数装饰器" class="headerlink" title="方法参数装饰器"></a>方法参数装饰器</h4><p>调用的时候在对应的类方法的参数中调用</p><pre class=" language-tsx"><code class="language-tsx">// 方法参数装饰器 再调用的时候会被当作函数调用,用于给类的原型增加一些元素数据// 有三个参数 第一个参数如果是静态方法就是类的构造函数,如果是实例方法就是类的原型对象// 第二个参数,调用方法装饰器对应的方法名称// 第三个参数,参数在函数列表中的索引function logParams(params: string) {    return function (target:any, methodName:any, paramsIndex:any) {        console.log(target);        console.log(methodName);        console.log(paramsIndex);        // 在类的原型上添加属性        target.apiurl = params    }}class HttpClient {    constructor() {}    getData(@logParams('xxx') uid:any) {        // getData就已经被修改过了,所有的参数都会转化为字符串        console.log(uid);    }}let http:any = new HttpClient();http.getData('aaaa')console.log(http.apiurl);</code></pre><h4 id="装饰器的执行顺序"><a href="#装饰器的执行顺序" class="headerlink" title="装饰器的执行顺序"></a>装饰器的执行顺序</h4><p>属性装饰器—方法装饰器—方法参数装饰器—类装饰器</p><p>如果相同类型的装饰器有多个是从后向前执行,后面调用的装饰器先执行</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>装饰器主要用于监视类的属性、方法、方法中的参数，可以对这些进行修改也可以扩展类的一些属性和方法</p><p>主要来说就是用来监视类的成员，包括静态成员和实例成员，在不修改类本身的代码的情况下可以对类成员进行扩展、修改、重写</p><p>装饰器就是方法，函数的定义，一般常用的都是工厂装饰器，可以传入参数，在内部返回一个函数用来表示当前类，在内部返回的函数里对类成员进行监视和扩展、修改处理</p><ol><li>类装饰器，可以用来扩展类的静态成员和实例成员，传入的参数只能是类的构造函数(即当前装饰的类)，扩展类的实例成员在原型对象上扩展，扩展类的静态成员直接在传入的参数中扩展即可,如果需要修改类中的属性和方法,需要内部return一个继承被装饰的类,在该返回类中可以继承装饰类的所有属性和方法,然后需要将这些属性和方法进行修改,重写构造函数，所以修改类中属性和方法不会使用类装饰器</li><li>属性装饰器,用于给静态属性和实例属性赋值，传入的参数有两个，如果是装饰静态属性,第一个参数传入类的构造函数，如果是装饰实例属性，第一个参数传入类的原型对象，第二个参数永远是被修饰的那个参数的名称</li><li>方法装饰器，可以跟类装饰器一样可以扩展类的成员,同时可以直接修改或重写被装饰的方法,传入三个参数，第一参数也是根据是修饰的方法是静态成员还是实例成员来决定的，第二个参数就是修饰的方法名称，第三个参数是修饰的方法的描述(在第三个参数中可以获取当前修饰的方法)</li><li>方法参数装饰器, 在方法里面调用，在被修饰参数之前调用,用于扩展类的原型的上的元素数据，第一参数也是根据是修饰的属性是静态方法里的还是实例方法里的来决定的，第二个参数就是被修饰参数的所在的方法名称，第三个参数是参数在函数列表中的索引</li></ol><p>如果需要直接对类的成员进行扩展，可以使用类装饰器</p><p>如果需要对类的属性进行赋值或修改，可以使用属性装饰器</p><p>如果需要对类的方法进行修改，可以使用装饰器</p><p>如果只需要扩展属性，可以使用参数装饰器</p><h4 id="使用vue创建ts项目"><a href="#使用vue创建ts项目" class="headerlink" title="使用vue创建ts项目"></a>使用vue创建ts项目</h4><ol><li>所有的js文件都会转化成ts文件</li><li>每一个组件都是一个继承Vue类的组件类，语法typescript</li><li>每一个组件类前都会有类装饰器@component方法来对当前组件类进行扩展</li><li>所有每一个vue单组件文件都会导入一个component和vue函数，需要给当前组件类添加子组件的话使用@component装饰器，所有组件都是被当成继承Vue类的组件类默认导出</li></ol>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript函数和类</title>
      <link href="/2020/03/27/ts-fan-xing/"/>
      <url>/2020/03/27/ts-fan-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="泛型的定义和使用"><a href="#泛型的定义和使用" class="headerlink" title="泛型的定义和使用"></a>泛型的定义和使用</h4><p>在定义函数、接口或者类的时候,不预先指定具体的类型(使用泛型来代替),而是在使用的时候在指定具体类型</p><p>提高组件的可复用性，一个组件可以是支持多个数据类型的数据</p><pre class=" language-tsx"><code class="language-tsx">// 泛型的定义// 在定义函数、接口或者类的时候,不预先指定具体的类型(使用泛型来代替),而是在使用的时候在指定具体类型// 提高组件的可复用性，一个组件可以是支持多个数据类型的数据// 我们定义一个函数 有一个要求需要输入一个值并返回该值,这个值什么类型就要返回什么类型// 这样写就只能使用number和返回number,如果我们想要string就需要重新定义一个参数和返回值都是string类型的函数function getValue(value: number): number {    return value}</code></pre><pre class=" language-tsx"><code class="language-tsx">// 泛型的使用// <T>代表泛型,再调用该函数时由传入<>中的类型决定该传入什么类型返回什么类型,传入和返回的类型一致// <T>可以使用任意大写字母,一般使用大写Tfunction getValue<T>(value: T): T {    return value}// 这样即实现了类型检查,又提高了可复用性console.log(getValue<number>(1));console.log(getValue<string>('我是字符串'));// 再使用泛型函数时,有两种方式,第一种不写<>的类型,通过参数的类型,做类型推断返回值类型let g1 = getValue(2)let g2 = getValue('aaa')// 第二种就是在<>中指定类型</code></pre><h4 id="泛型变量"><a href="#泛型变量" class="headerlink" title="泛型变量"></a>泛型变量</h4><pre class=" language-tsx"><code class="language-tsx">// 泛型变量// <T>表示泛型变量也是用来表示当成一个类型去使用,这里当成数组去使用function getArr<T>(arr: T[]): T[] {  console.log(arr.length)  return arr}console.log(getArr([1, 2]))// 泛型变量可以是任意字符,可以是多个字符,交换两个类型组成的元组function swap<T, U>(arr: [T, U]): [T, U] {    return [arr[0], arr[1]]}swap([0, 'a'])// 该元组第一个参数是数组类型,第二个参数是对象类型swap([[0, 1, 2], { name: 'caoqing' }])</code></pre><h4 id="类的泛型"><a href="#类的泛型" class="headerlink" title="类的泛型"></a>类的泛型</h4><p>在定义类的时候,可以使用泛型来规定属性的类型和方法的返回值和参数的类型,只支持实例成员使用泛型</p><pre class=" language-tsx"><code class="language-tsx">// 类的泛型// 定义一个求数组最小值的类,要求输入什么类型就返回什么类型的最小值class MinClass<T> {    list: T[] = [];    add(value: T): void{        this.list.push(value);    }    min(): T{        let minNum = this.list[0]        for (let i = 0; i < this.list.length; i++) {            if (minNum > this.list[i]) {                minNum = this.list[i]            }        }        return minNum    }}let m = new MinClass<number>() // 实例化类,并制定了T的类型为numberm.add(1);m.add(2);m.add(6);m.add(10);console.log(m.min());let m1 = new MinClass<string>() // 实例化类,并制定了T的类型stringm1.add('a');m1.add('b');m1.add('c');m1.add('d');console.log(m1.min());</code></pre><p>泛型接口</p><pre class=" language-tsx"><code class="language-tsx">// 泛型接口// 两种方式,第一种使用函数类型接口,将泛型变量加在函数定义之前// 第二种使用函数类型接口,将泛型变量加在接口之后第一种interface ConfigFn {  <T>(value: T): T}let getData: ConfigFn = function<T>(value: T): T {  return value}console.log(getData(1));</code></pre><pre class=" language-tsx"><code class="language-tsx">// 第二种interface ConfigFn<T> {    (value: T): T}function getData<T>(value: T): T{    return value}let myData: ConfigFn<string> = getDataconsole.log(myData('aaaa'));</code></pre><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><ol><li><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它的属性或方法</p></li><li><p>语法： 使用 泛型 变量T   extends 继承 我们定义的接口； 约束了必须符合的形状</p></li></ol><pre class=" language-tsx"><code class="language-tsx">// 我要们需要定义一个泛型函数,打印出参数的length属性function getLength<T>(arr: T): T {    // 不知道T是什么类型,不能使用该类型的length属性,或报错    // console.log(arr.length);    return arr}// 顶一个length属性的接口interface Length {    length: number}// 约束泛型变量必须满足这个接口,有length属性并且是数字型function getLength1<T extends Length>(arr: T): T {    console.log(arr.length);    return arr}// console.log(getLength1(1)) 数字型没有length属性会报错console.log(getLength1('aaa'));console.log(getLength1([1, 2, 3]));</code></pre><p>使用接口来对不确定的泛型类型进行约束，表示在调用函数的时候指定具体的类型的时候,该类型必须满足该接口的形状,就是如果在定义函数时使用了类型的属性和方法,就需要创建一个接口来满足该属性和方法,然后使用泛型变量 extends 定义的接口来进行约束</p><p>如果你在调用函数时指定的类型跟接口形状不符合就会报错</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>泛型主要用于定义函数、类、接口时，如果对参数的类型不确定，可以使用泛型来代替，然后在使用的时候在具体指定类型</p><p>类似于any可以让使用任何类型，但是会进行类型检查,如果在使用的时候，制定了类型就必须是该类型</p><p>可以进行函数、类、接口的复用，支持所有可能的数据类型</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript接口</title>
      <link href="/2020/03/26/ts-jie-kou/"/>
      <url>/2020/03/26/ts-jie-kou/</url>
      
        <content type="html"><![CDATA[<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="接口的初始用"><a href="#接口的初始用" class="headerlink" title="接口的初始用"></a>接口的初始用</h4><p>接口的使用就相当于自定义类型名,可以用来定义对象类型，描述对象的形状,即定义对象中有哪些属性,属性值是什么类型,那么在使用对象接口类型的时候,属性要与形状相符</p><p>接口是对行为的抽象,就是将类中共有的属性和方法抽离为一个接口再去实现</p><pre class=" language-tsx"><code class="language-tsx">interface Sports {    color: string;    name: string;}let run: Sports = {    color: 'blue',    name: 'caoqiang'}</code></pre><h4 id="可选属性和只读属性"><a href="#可选属性和只读属性" class="headerlink" title="可选属性和只读属性"></a>可选属性和只读属性</h4><pre class=" language-tsx"><code class="language-tsx">// 可选属性和只读属性// 如果不需要完全匹配一个对象形状,可以使用?操作符可选属性// 只读属性使用readonly关键字表示该属性在使用过后就不能进行修改interface Sports {    name: string;    readonly cate: string;    // evn是可选属性    env?: string;}let ball: Sports = {    name: 'basketball',    cate: 'balls',}// ball.cate = 'run' 报错let ball1: Sports = {    name: 'football',    cate: 'balls',} </code></pre><h4 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h4><p>任意属性就是一个接口除了包含我们需要的属性之外,还可以拥有其他属性(一些不确定的属性),就可以使用任意属性</p><pre class=" language-tsx"><code class="language-tsx">// 任意属性就是一个接口除了我们需要的属性之外还可以包含其他属性,这时就要用到任意属性// 格式就是索引签名[index: string]: 所有属性类型的父类// 任意属性的类型必须包含所有其他属性的类型interface Sports {    name: string;    sum: number;    env?: boolean;    // 任意属性,any包含了所有必需属性和可选属性的类型    [propName: string]: any}let ss2: Sports = {    name: 'basketball',    sum: 1,    env: true,    price: 123,    hobbies: '篮球'}console.log(ss2);</code></pre><h4 id="函数类型接口"><a href="#函数类型接口" class="headerlink" title="函数类型接口"></a>函数类型接口</h4><pre class=" language-tsx"><code class="language-tsx">// 函数类型接口,接口除了能定义有基本属性的对象类型之外,还可以定义函数类型// 在接口定义的函数类型,在使用时对应位置参数类型必须是一致的// 就是说你定义的参数类型第一个参数是number,那么使用时,第一个参数就要是number// 函数表达式let pin = function(x: number, y: string): string{    return x.toString() + y;}// 函数定义let pin1: (x: number, y: string) => stringpin1 = function(x: number, y: string): string{    return x.toString() + y;}console.log(pin(1, 'aa'), pin1(2, '---'));// 函数类型接口interface MyFn {    // 右边为输入类型 : 左边为输出类型    (x: number, y: string): string}let pin2: MyFn;pin2 = function(a: number, b: string): string{    return a.toString() + b;}console.log(pin2(1, 'y'));</code></pre><h4 id="可索引属性"><a href="#可索引属性" class="headerlink" title="可索引属性"></a>可索引属性</h4><p>可索引属性就是指可以使用索引来获取的类型,比如arr[1],obj[‘name’],数组和对象</p><p>可索引属性具有一个索引签名，索引签名就是指定索引的类型只有数字和字符串类型,然后指定索引返回值的类型</p><p>在接口中的表达形式就是[索引名: number/string] ：索引对应的返回值类型</p><p>同时使用时如果使用数字类型的索引，返回值必须是字符串索引返回值类型的子类型或者相同，因为如果使用obj[100],就相当于要转化为obj[‘100’]</p><p>单独使用数字类型索引,数组和对象都可以</p><pre class=" language-tsx"><code class="language-tsx"> interface Myindex {     [index: number] : number  } let arr1: Myindex = [1, 2, 3] let obj1: Myindex = {     1: 3,    2: 2,     3: 1 }</code></pre><p>单独使用字符串索引,只能是对象</p><pre class=" language-tsx"><code class="language-tsx">interface Myindex {     [index: string] : number  } // let arr1: Myindex = [1, 2, 3] 数组索引只能是数字类型 let obj1: Myindex = {     '1': 3,     '2': 2,     '3': 1 }</code></pre><p>同时使用</p><pre class=" language-tsx"><code class="language-tsx">class Sports {    name: string;}class Ball extends Sports {    env: boolean;}let n1: Ball = new Ball()let n2: Sports = new Sports()interface Myindex {    // 同时使用时,数字类型索引的返回值必须是字符串的子类型或者相同    [index: number] : Ball // 如果这里写Sports,而下面写Ball是会报错,这里只能和下面同为sports或者这里写ball    [index: string] :  Sports}let obj2 = {    // 数字类型返回值是Ball类型,即Ball构造函数实例    1: n1,    '2': n2}</code></pre><h4 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h4><p>继承一个接口</p><pre class=" language-tsx"><code class="language-tsx">// 接口继承// 接口继承也是使用extends关键字,可以将一个接口的成员复制到另一个接口,可以更灵活地将接口分隔到可复用的模块中// 可以继承一个接口也可以继承多个接口interface Mom {    name: string;}interface Son1 extends Mom {    color: string;}// 需要满足字接口形状还要满足父接口形状let i1: Son1 = {    color: 'red',    name: 'basketball'}</code></pre><pre class=" language-tsx"><code class="language-tsx">// 继承多个接口interface Mom {    name: string;}interface Father1 {    only: boolean}interface Son1 extends Mom, Father1 {    color: string;}// 需要满足字接口形状还要满足父接口形状let i1: Son1 = {    color: 'red',    name: 'basketball',    only: true}</code></pre><h4 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h4><pre class=" language-tsx"><code class="language-tsx">// 接口继承类// 接口可以继承类里面的成员,但是不包括成员的实现,就是不会继承属性值和具体方法的实现,只会在接口声明类里成员// 可以使用接口的地方都可以使用类class Mom {    name: string = 'BigMom'    hun() {        console.log('我是类里面定义的方法');    }}interface Kaer extends Mom {    nuo: string}let nuo1: Kaer = {    nuo: '糯糯果实',    name: '卡二',    hun() {        console.log('我是接口中hun方法具体实现');    }}// 使用接口来定义,打印的是具体实现,因此说明接口继承类是会继承类里的属性名和方法名console.log(nuo1.name);nuo1.hun()</code></pre><h4 id="类实现接口"><a href="#类实现接口" class="headerlink" title="类实现接口"></a>类实现接口</h4><p>让一个类去符合一个接口的定义,就是类使用implements关键字去实现了接口,就要实现接口中具体的属性和方法，一般一个类只能继承一个类,但是如果多个类有共有的属性和方法可以抽取出来封装成一个接口,然后再让类具体的去实现该接口</p><pre class=" language-tsx"><code class="language-tsx">// 类实现接口// implements关键字实现对应的接口,将多个类共有的属性和方法抽离成一个接口,再由类去具体实现接口// 接口将类中共有的属性和方法进行声明,不予以具体实现interface Sweet {    // 声明一个函数签名    taste(): void;}class Dangao implements Sweet {    name: string = '蛋糕'    taste() {        console.log('我是蛋糕类里的方法实现');    }}class Binggan implements Sweet {    name: string = '饼干'    taste() {        console.log('我是饼干类里的方法实现');    }}// 类可以当接口使用let D1: Dangao = new Dangao()let B1: Binggan = new Binggan()D1.taste()B1.taste()</code></pre><h3 id="接口总结"><a href="#接口总结" class="headerlink" title="接口总结"></a>接口总结</h3><p>接口就是用来描述形状的,大概这个类型是什么样子,具体的实现都是由使用接口类型时来进行的,具体实现的时候既要满足形状一致(就是匹配规则要与接口一致),还需要给形状画上颜色填充内容</p><p>接口就相当于自定义的类型,用来约束变量来符合接口里定义的属性</p><p>接口里面只能进行属性的声明不能赋初始值,比如说只能定义属性名这个属性名对应的属性值是什么类型</p><p>只能进行函数的定义不能给予具体的函数体的实现比如函数签名,或者函数类型接口(输入的类型) : 输出的类型</p><p>索引签名[index: number/string] : 索引对应的返回值类型</p><p>可以当作类型去使用,使用接口类型的值就需要满足接口里定义的属性和方法并且赋予值,给予方法的具体实现</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript函数和类</title>
      <link href="/2020/03/26/ts-han-shu-he-lei/"/>
      <url>/2020/03/26/ts-han-shu-he-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数的声明"><a href="#函数的声明" class="headerlink" title="函数的声明"></a>函数的声明</h4><p>在typescript中声明函数常用的两种形式是声明函数和函数表达式,只不过输入的形参和输出的返回值需要类型约束</p><pre class=" language-tsx"><code class="language-tsx">// typescript函数的形式,一般常用的有声明和函数表达式// 只不过需要指定输入和输出的类型,输入就是函数形参,输出就是函数返回值function add1(x: number, y: number): number {    return x + y}const add2 = function(x: number, y: number): number {    return x + y}</code></pre><p>在ts定义函数使用=&gt;符号，该符号在es6中是箭头函数,在ts中表示函数的定义，左边为输入的形参，右边为输出的返回值</p><pre class=" language-tsx"><code class="language-tsx">// ts中函数的定义,就是定义函数的输入和输出的类型// 使用=>符号,不是箭头函数的意思,左边为函数输入的形参类型用小括号包裹,右边为返回值输出的类型let add3: (x: number, y: number) => number = add1console.log(add3(1, 2));</code></pre><p>常用的是使用接口自定义函数类型</p><pre class=" language-tsx"><code class="language-tsx">// 使用接口的自定义一个函数类型interface myFn {    (x: number, y: number): number}let add4: myFn = add2console.log(add4(3, 5));</code></pre><h4 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h4><p>typescript如果参数传多或者传少都会编译报错,但是可以使用?来表示可选参数,给参数赋初始值来表示默认参数,默认参数在ts中会被识别为可选参数</p><pre class=" language-tsx"><code class="language-tsx">// 在typescript中,传入的参数多了和少了都会直接编译报错// 使用?来表示可选参数,可选参数表示可传可不传,可选参数必须在必须参数后面,可选参数后面不允许有必须参数// 可以给参数赋默认值,来表示默认参数,ts中将默认参数识别为可选参数,可传可不传function getName(firstN: string, lastN?: string): string {    return firstN + lastN}// 没传就是undefinedconsole.log(getName('mike'));</code></pre><pre class=" language-tsx"><code class="language-tsx">function getName1(firstN: string, lastN: string = 'Jordan'): string {    return firstN + lastN}// 没传第二个,默认参数的值就是Jordanconsole.log(getName1('mike'));</code></pre><h4 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h4><p>在es6中可以使用…来接收剩余参数,将不确定的剩余实参参数序列转化为数组,在ts中可以使用…rest运算符来接收剩余参数,也是可以将所有剩余的实参转化为数组,展开运算符是…rest运算符的逆运算,将数组转化为以逗号分隔的参数序列</p><pre class=" language-tsx"><code class="language-tsx">// 剩余参数,在es6中使用...来接收剩余参数,将传入的实参序列转化为数组// 而ts中使用...rest运算符,同样可以接收剩余参数,将实参序列转化为数组// 展开运算符是...rest运算符的逆运算,将数组转化为以逗号分隔的参数序列function getBall(ball1: string, ...restBall: string[]): string{    console.log(restBall);    // console.log默认去掉了逗号    console.log(...restBall);    return ball1 + '-' + restBall.join('-')}console.log(getBall('baketball', 'football', 'paiqiu'));</code></pre><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>函数的重载主要用于在函数传入不同类型的参数时,会有不同的返回的结果，在函数重载时需要精确定义传入参数的具体的类型和返回结果的具体类型,而函数实现的时候需要将所有可能的参数类型使用|操作符或者?操作符包括进去</p><pre class=" language-tsx"><code class="language-tsx">// 函数的重载,就是同名的函数的参数的个数、类型或者顺序必须有一个不同// 最精准的定义一般都在最上面,函数的实现一般放在重载后面,使用|操作符或者?将所有可能的类型全都包括进去// 一般用于传入不同的参数,有不同的结果,如果传入不同的参数得到的类型结果是一样不需要使用函数重载// 函数的重载function getSum1(a: number, b: number): numberfunction getSum1(a: string, b: string): string// 函数的实现,将所有类型的参数都包含进去function getSum1(a: number | string, b: number | string): string | number {    if (typeof a === 'number' && typeof b === 'number') {        return a + b    } else if (typeof a === 'string' && typeof b === 'string') {        return a + b    }}// 如果不使用重载,d1和d2的类型是string | number// 使用重载,d1的类型就是number,d2的类型就是stringlet d1 = getSum1(1, 2)let d2 = getSum1('a', 'b')</code></pre><p>总结在ts中的函数都要约束输入和输出的类型</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="创建对象实例"><a href="#创建对象实例" class="headerlink" title="创建对象实例"></a>创建对象实例</h4><p>在js中创建对象实例有两种方式</p><p>第一种是传统构造函数方法,实例的属性都使用this来绑定,实例的方法都绑定在构造函数的原型对象中</p><p>第二种是使用class语法糖来创建类,实例的属性需要绑定在constructor(){}中,但是在es7中，需要在最顶层定义属性</p><pre class=" language-tsx"><code class="language-tsx">// 创建实例对象有两种方法// 第一种使用传统的es5中提供的构造函数和原型对象可以创建属性和方法// 第二种使用es6中class语法糖来创建类,在类中使用constructor()构造函数创建实例属性,在ES7中,属性需要定义在最顶层function Geeter(message) {    this.msg = message}Geeter.prototype.sayHi = function() {    console.log(`---${this.msg}---`);}let aa1 = new Geeter('我是传统方法创建的实例')console.log(aa1.msg);aa1.sayHi()class Geeter1 {    // 在constructor中绑定属性时,需要在最顶层定义该属性    msg: string    constructor (message) {        this.msg = message    }    sayHi() {        console.log(`---${this.msg}---`);     }}// 使用class关键字创造的类相当于一个类型// new类名就会调用constructor构造函数,类在js本质上就是函数// 类就相当于构造函数,类里的方法就相当于构造函数原型对象上的方法let aa2: Geeter1 = new Geeter1('我是class创建的实例')console.log(aa2);console.log(aa2.msg);aa2.sayHi()console.log(Geeter1 === Geeter1.prototype.constructor); // trueconsole.log(aa2.sayHi === Geeter1.prototype.sayHi); // true</code></pre><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><pre class=" language-tsx"><code class="language-tsx">// 类的继承,使用extends关键字进程父类的属性和方法// 在手动定义子类constructor使用字类this之前,必须先调用父类构造函数super()// 如果字类的方法名与父类方法名一样,将会重写父类的该方法class Father {    msg: string = '我是父类的属性'    move(distance: number) {        console.log(`我移动了${distance}米`);    }}class Son extends Father {    constructor() {        // 在子类中必须得在使用字类this之前调用父类的构造函数        super()        console.log('我是子类的this');    }    move() {        console.log('我是字类的move');    }}let bb1 = new Son()console.log(bb1.msg);// bb1.move(10) 字类有相同的方法名,需使用子类的move方法bb1.move()</code></pre><h3 id="静态属性和方法"><a href="#静态属性和方法" class="headerlink" title="静态属性和方法"></a>静态属性和方法</h3><p>在es5中，构造函数中的属性和方法就是成员,分为实例成员和静态成员,实例成员就是构造函数中使用this来添加的属性和方法，静态成员就是构造函数本身上的属性和方法,实例成员是能通过实例对象来访问,静态成员只能通过构造函数来访问</p><p>在es6及以上提供了关键字static来添加静态属性和方法,构造函数本身上的属性和方法,需要使用class类自身来调用</p><pre class=" language-tsx"><code class="language-tsx">// 在类中提供了static关键字添加静态属性和方法,只能通过构造函数来访问class Animal {    name: string = 'wangcai'    static height: number = 123    sayHi() {        console.log('我是实例方法');    }    static sayGoobay() {        console.log('我是静态方法');    }}// 实例属性和方法只能通过实例对象去调用,静态属性和方法只能通过构造函数去调用let dog = new Animal()console.log(dog.name);console.log(Animal.height);dog.sayHi()Animal.sayGoobay()</code></pre><p>readonly表示只读属性,初始化之后不能进行更改</p><pre class=" language-tsx"><code class="language-tsx">// readonly表示只读属性,必须在声明或或构造函数里进行初始化,后续不能更改值class Satr {    name: string = 'ldh';    readonly age: number = 18}let ldh = new Satr()// ldh.age = 13 这样会报错,在初始化之后不能再更改该值</code></pre><h4 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h4><p>可以来控制类里面属性和方法的访问权限</p><p>public(默认的,公开),默认不设置修饰符,所有的属性和方法都是public,也可以单独给某个属性和方法设置public</p><pre class=" language-tsx"><code class="language-tsx">class Students {    public name: string = 'caoqiang'    public done() {        console.log('我是public上的方法');    }}let ss1: Students = new Students()console.log(ss1.name);ss1.done()</code></pre><p>private(私有的,仅在类本身里面才能访问)</p><pre class=" language-tsx"><code class="language-tsx">// 只能在类本身进行访问class Students {    private name: string = 'caoqiang'    private done() {        console.log('我是private上的方法');    }    sayHi () {        console.log(this.name);        this.done()    }}let ss1: Students = new Students;ss1.sayHi()</code></pre><p>protected(受保护的,仅在自身和继承该类的字类中才能访问)</p><pre class=" language-tsx"><code class="language-tsx">//在本身中访问class Students {    protected name: string = 'caoqiang'    protected done() {        console.log('我是protected上的方法');    }    sayHi () {        console.log(this.name);        this.done()    }}let ss1: Students = new Students;ss1.sayHi()class Banzhang extends Students {    constructor() {        super()        console.log(this.name);        this.done()    }}//在其子类中可以访问let ss2: Banzhang = new Banzhang()</code></pre><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><pre class=" language-tsx"><code class="language-tsx">// 抽象类只能作为其他类的基类来使用，就是说只能被继承,不能进行实例化// abstract关键字用于定义抽象类的里面的抽象方法和属性// 抽象类的里面的抽象方法只能进行函数签名,需要在继承的类中具体实现abstract class Tab {    name: string = 'tab栏'    abstract move(): void}class Tabson extends Tab {    move() {        console.log('我是实现抽象类中的方法');    }}let tab1: Tabson = new Tabson()tab1.move()</code></pre><h4 id="关于签名的一些概念"><a href="#关于签名的一些概念" class="headerlink" title="关于签名的一些概念"></a>关于签名的一些概念</h4><p>比如使用接口来定义数组的时候会用到索引签名,索引签名就是先使用[]定义索引的类型,然后冒号后在定义数组里值的类型</p><p>函数签名：定义函数名和输入参数的类型，冒号后面定义函数输出返回值的类型</p>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript类型</title>
      <link href="/2020/03/25/ts-lei-xing-bi-ji/"/>
      <url>/2020/03/25/ts-lei-xing-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="TypeScript是什么"><a href="#TypeScript是什么" class="headerlink" title="TypeScript是什么"></a>TypeScript是什么</h3><p>TypeScript是javascript的超集，用来约束javascript语言，像里面添加了可选的静态类型和基于类的面向对象编程</p><p>但是我们需要注意的是TypeScript不能直接的运行在浏览器中，需要进行编译成javascript语言，所以我们可以理解为TypeScript只存在开发阶段，在真正项目上线的时候，TypeScript还是要编译成javascript语言才能正常运行的</p><h3 id="ts开发环境"><a href="#ts开发环境" class="headerlink" title="ts开发环境"></a>ts开发环境</h3><ol><li><p>我们直接生成ts文件并且引入html页面中，是无法执行的，浏览器并不识别ts语法，需要使用npm i typescript -g进行ts全局安装，然后在使用tsc命令运行ts文件，会讲ts编译成js文件</p></li><li><p>在文件夹中编译ts文件,直接生成一个ts的配置文件tsconfig.json，在里面写如下配置项,target表示将ts最终编译成什么语法,module表示使用什么模块化，outDir表示编译输出目录，rootDir表示存放ts的根目录，noEmitOnError表示ts语法错误不会进行编译，在编写ts代码的时候可以实时监控ts代码的修改进行编译，并输出到js文件夹中</p><pre><code>// 将tsconfig的配置文件修改为这个样子{  &quot;compilerOptions&quot;: {    &quot;target&quot;: &quot;es5&quot;,    &quot;module&quot;: &quot;commonjs&quot;,    &quot;outDir&quot;: &quot;./js&quot;,    &quot;rootDir&quot;: &quot;./ts&quot;,    &quot;noEmitOnError&quot;: true  }}</code></pre><p>3.项目开发</p><p>正常的一般项目开发，我们可以使用三大框架的脚手架来创建，那么这些配置会在webpack中自动生成，就不需要我们手动的在进行配置了，只是需要手动的去加一些团队的代码风格的约束</p><p>eslint用来检测代码的风格和格式化，比如说函数名后小括号前要加空格，定义的变量如果不用改变需要使用const定义，回调函数使用箭头函数等等</p><p>prettier用来配合eslint格式化代码，规定代码的样式，例如只使用单引号，行尾需要加分号，一行只允许多少个代码等等</p><p>配合vscode使用团队项目开发</p></li></ol><h3 id="TS数据类型"><a href="#TS数据类型" class="headerlink" title="TS数据类型"></a>TS数据类型</h3><p>ts中在定义变量时不再是直接定义，而需要在定义变量后面加上静态类型来约束</p><ol><li><p>数据类型</p><pre class=" language-tsx"><code class="language-tsx">// 数字类型Number 双精度64位浮点数 支持二进制，八进制，十进制，十六进制let binary: number = 0b011let octdec: number = 0o744let decmial: number = 100let hex: number = 0x8BFconsole.log(binary, octdec, decmial, hex);</code></pre></li><li><p>字符串类型string</p><pre class=" language-tsx"><code class="language-tsx">// 字符串型 支持单引号 双引号 模板字符串let str1: string = "aaa"let str2 = 'bbb'let str3 = `我是${str1}----${str2}`console.log(str1, str2, str3);</code></pre></li><li><p>布尔型boolean</p><pre><code>// 布尔型 boolean 只有true和falselet isDone: boolean = true// new Boolean是对象因此不能赋值给boolean类型，只能赋值给Boolean类型基本包装类型let bool1: Boolean = new Boolean(1)console.log(isDone, bool1)</code></pre></li><li><p>void 表示没有任何类型 一般用于没有返回值的函数</p><pre class=" language-tsx"><code class="language-tsx">// void类型 表示没有任何类型,适用于没有返回值的函数function tishi(): void { console.log('我是没有返回值的函数')}tishi()</code></pre></li><li><p>enum 表示枚举类型 为一组数值赋予友好的名字,使用enum 关键字自定义一组数值</p><pre class=" language-tsx"><code class="language-tsx">// enum枚举类型 一般用于为一组数值赋予友好的名字，比如可以把0-6自定义为周一到周日// 默认从0开始 可以手动赋值 使用enum关键字自定义类型 后面跟大括号来装数值对应的名字enum Week {  Sunday,  Monday,  Tuesday}let s1: Week = Week.Mondaylet s2: Week = Week.Tuesdayconsole.log(s1, s2);// 输出的是1 2,给1和2用来表示周一和周二</code></pre></li><li><p>数组和元组，数组表示一组同类型的集合(使用any可以存取任何类型)，元组表示不同类型集合</p><pre class=" language-tsx"><code class="language-tsx">// 数组和元组// 数组表示一组相同数据类型的集合(使用any可以存任何数据类型) 元组表示不同类型的集合// 数组定义方式1.类型+[]let list1: number[] = [1, 2, 3] // 表示这一组数组中只能存放number类型// 数组泛型 Array<数据类型>let list2: Array<string> = ['a', 'b', 'c'] // 表示这一组数组中只能存放字符串类型// 利用接口表示数组,索引签名,只能index是什么类型interface SelfArray {    // 指定一个自定义数组类型SelfArray,用来存放数字    [index: number]: number}let list3: SelfArray = [4, 5, 6]// 元组 [指定需要用到的数据类型]，赋值时按照类型顺序赋值let list4: [number, string] = [1, 'a']console.log(list1,list2,list3,list4);</code></pre></li><li><p>any和Object类型，都是用来移除类型检查，可以赋值任何类型，区别就是any类型的可以使用自身的方法也可以使用原型链上的方法，Object类型只能使用本身的方法</p><pre class=" language-tsx"><code class="language-tsx">// any类型和Object类型// any类型允许在编译时移除类型检查,赋值任何类型// Object也是移除类型检查，但是两者调用方法不同,any可以调用任何方法,Object只能调用构造函数本身的方法let notSure: anynotSure = 1notSure = 'a'notSure = 6.666// 保留一位小数notSure.toFixed(1)let notSure1: ObjectnotSure1 = 6.66// notSure1.toFixed(1) 报错Object上没有该方法notSure1.toString()</code></pre></li><li><p>null和undefined</p><pre class=" language-tsx"><code class="language-tsx">// null 和 undefined 两个都代表空置，但是类型不同,undefind表示未定义,null表示空对象// null 和 undefined是所有类型的子类型可以直接赋值给其他类型console.log(undefined == null);console.log(undefined === null);let a1: number = nullconsole.log(a1);</code></pre></li></ol><p>综上所述ts在声明变量的时候，都是先指定变量的数据类型，然后再进行赋值操作</p><p>数字型 字符串型 布尔型 null undefined void enum 数组和元组 类型[] Array&lt;类型&gt; 接口形式interface 自定义类型名 { [index: number]: 类型 } 元组不同类型,赋值时按照顺序与指定的类型对应 any Object</p><h3 id="TS变量声明"><a href="#TS变量声明" class="headerlink" title="TS变量声明"></a>TS变量声明</h3><p>在ts中推荐使用let和const进行声明变量，不推荐使用var，因为var声明的变量只有函数作用域和全局作用域，还存在变量提示，const和let声明的变量不存在变量提升，存在块级作用域，变量只在定义的块级作用域中生效</p><h3 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h3><h4 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h4><p>表示一个变量的取值可以是多种类型中其中的一种，类型之间用|隔开，但是联合类型只能使用所有类型中共有的属性和方法，不能使用类型特有的属性和方法</p><pre class=" language-tsx"><code class="language-tsx">// 联合类型就是指一个变量可以时多个类型中的一种,类型之间用|分隔// 联合类型的属性或方法，只能访问他的所有类型共有的属性和方法function getParams(params: number | string): number | string {    // console.log(params.toFixed(1)) 该方法只有number特有的，string类型中并没有该方法    console.log(params.toString()); // toString()是两者共有的方法    return params}console.log(getParams(6.66));</code></pre><h4 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h4><ul><li><p>在进行变量初始化时，如果没有选择类型，类型判断会自动帮我们提供会赋值的那个类型</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">// v1 = 'a' 会报错,在初始化赋值的时候类型推断已经帮我将该变量设置后赋值的类型number了</span></code></pre></li><li><p>在定义函数的时候,形参没有只有声明而没有赋值,就是any类型，函数的返回值会根据return的值来进行类型判断</p><pre class=" language-tsx"><code class="language-tsx">// 该函数形参没有赋值就是any类型,返回值根据return后的值类型来决定是number类型function getSum(sum) {    return 1}console.log(getSum(1));</code></pre></li></ul><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p>类型断言就是我们可以手动指定一个值的类型跳过ts编译</p><pre class=" language-tsx"><code class="language-tsx">// 类型断言,手动指定一个值的类型跳过ts编译// 第一种方法<类型>值   第二种方法 值 as 类型   建议采取第二种方法function getParams1(params: number | string): number {    if (typeof params === 'string') {        // 需要返回params的长度,该属性只有string类型才有,需要将params手动指定为string类型        return (<string>params).length    } else {        return (<string>params.toString()).length    }}console.log(getParams1(123));</code></pre><pre class=" language-tsx"><code class="language-tsx">// 双重断言let a: number | stringa = '123'// 将y指定为a断言类型的子类型,先对a进行指定指定类型,然后在对指定类型之后a继续断言指定其子类型let y = (a as any) as string </code></pre><p>一般类型断言与联合类型结合使用，可以跳过联合类型的判断，直接指定一个类型</p><h4 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h4><p>相当于给一个类型起了一个新名字来进行使用</p><pre class=" language-tsx"><code class="language-tsx">// 类型别名,就是给一个类型起了一个姓名字,用别名来代替该类型,实际开发使用接口来代替类型别名,type关键字let b1: number = 1type Name = numberlet b2: Name = 2type Nmame1 = number | stringlet b3: Nmame1 = 'hello'</code></pre><h4 id="字符串字面量类型"><a href="#字符串字面量类型" class="headerlink" title="字符串字面量类型"></a>字符串字面量类型</h4><p>用来约束string类型取值只能是几个字符串中的一种,使用type定义,boolean和number字面量类型也同样支持</p><pre class=" language-tsx"><code class="language-tsx">// 字符串字面量类型,用来约束类型为string的取值是某几个字符串中的一个// 使用type来定义,在typescript中也同样支持boolean和number字面量类型type MoveDirection = 'top' | 'bottom' | 'left' | 'right'function move(params: MoveDirection): void {    console.log(params);}// params取值只能是四种中的一中move('top')type num = 1 | 2 | 3let c1: num = 2</code></pre>]]></content>
      
      
      <categories>
          
          <category> typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue春招面经</title>
      <link href="/2020/03/22/vue-chun-zhao-mian-jing/"/>
      <url>/2020/03/22/vue-chun-zhao-mian-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="http与浏览器"><a href="#http与浏览器" class="headerlink" title="http与浏览器"></a>http与浏览器</h3><p>1.http常见状态码的含义</p><p>http状态码由3位十进制数字组成，第一个数字表示状态码的分类,后面的两位表示该分类下的不同状态</p><p>1**    信息。服务器收到请求，请继续执行请求</p><p>2**      成功。请求被成功接收并处理</p><p>3**      重定向。需要进一步操作来完成请求</p><p>4**  客户端错误。无法完成请求,或请求包含语法错误</p><p>5**  服务器错误。服务器在处理请求的过程中发生错误</p><table><thead><tr><th align="left">100</th><th>continue</th><th>继续。客户端继续其请求</th></tr></thead><tbody><tr><td align="left">404</td><td>Not Found</td><td>没有找到对应的页面,服务器找不到请求的网页</td></tr><tr><td align="left">400</td><td>Bad Request</td><td>客户端请求的语法错误,服务器无法理解(非法请求)</td></tr><tr><td align="left">505</td><td>HTTP Version not supported</td><td>服务器不支持请求的HTTP协议的版本,无法完成处理</td></tr><tr><td align="left">500</td><td>error</td><td>服务器内部错误，无法完成请求</td></tr><tr><td align="left">200</td><td>OK</td><td>请求成功，一般用于get和post请求</td></tr></tbody></table><h3 id="vue面试题"><a href="#vue面试题" class="headerlink" title="vue面试题"></a>vue面试题</h3><ol><li><p>你能讲讲什么是MVVM吗</p><p>MVVM是Model-View-ViewModel的缩写，其中Model指的是模板数据，View指的是视图层ui组件，ViewModel是两者之间联系的桥梁，Model通过数据绑定到ViewModel中并自动将数据渲染到视图层View中，当视图层View中的数据发生变化时通过事件绑定通知ViewModel层进行模板中数据的更新</p></li><li><p>说说vue2.x中如何监测数组的变化</p><p>使用了函数劫持的方法,重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法，当调用数组api时，就会通知其依赖进行更新，如果数组中有引用数据类型，就会继续对引用数据类型再次递归遍历进行监控，这样就实现了监听数组的变化</p><p>函数劫持就是指在函数运行之前，将其劫持下来添加自己的一些功能，这样函数就不是原来的函数了，变成了一个拥有新功能的新函数，数组中的一些方法都在原型对象中，因此要重写原型链指向自己定义的数组原型方法</p></li><li><p>nextTick方法</p><p>当页面中DOM元素重新被渲染结束的时候执行回调函数</p></li><li><p>说一下Vue的生命周期</p><ul><li>Vue实例从创建到销毁的过程，这过程中会触发一系列钩子函数</li><li>beforeCreate是new Vue()之后触发的第一个钩子函数,此时的methods、data、computed、watch中数据和函数都无法被访问</li><li>created在创建实例之后被调用，此时已经完成了数据的观测，可以读取数据，更新数据但是不会触发update，可以在此阶段获取一些初始数据，但是无法跟DOM进行交互，如果非要在此阶段访问DOM可以使用vm.$nextTick来访问DOM元素</li><li>beforeMount再挂载之前被调用，在此之前template模板已导入渲染函数中进行编译，此时虚拟DOM已经创建完成，即将开始进行数据渲染</li><li>Mouted挂载之后被调用，此时真实的DOM元素已经被挂载在页面中，数据完成双向绑定，可以在这里获取数据发送ajax请求</li><li>beforeUpdate在响应式数据更新之前触发，此时页面上还都是旧数据，虚拟DOM还没有开始重新渲染</li><li>updated数据更新之后触发，此时页面中已经是更新之后的新数据，DOM已经更新完成</li><li>beforeDestory销毁vue实例之前触发，此时实例还是可以完全被使用，可以在此阶段做一些善后工作比如清除定时器</li><li>destoryed实例销毁完成后触发，此时只剩DOM空壳，所有的数据绑定和事件监听都已经被解除，组件被拆解，子实例都被销毁</li></ul></li><li><p>computed和watch的区别</p><ul><li><p>computed本质上是具备缓存的watcher，当其所依赖的属性发生变化时，会更新视图，适用于计算比较消耗性能的计算场景，当表达式过于复杂，写在模板中太多逻辑表达式会造成模板的难以维护，可以将复杂的逻辑表达式写入计算属性中处理</p></li><li><p>watch不具备缓存，主要是为了观察数据的变化，适用于在数据发生变化时执行异步或开销过大的操作，再对对象进行监听时，需要开启深度监听将deep设置为true，就可以监听对象里的每一个属性，这样会造成性能消耗过大，优化的的操作是使用<strong>字符串形式</strong>进行监听，如果没有写到组件中需要使用unWatch手动注销</p><p>官方文档给出的示例时，监听文本框的值发生变化来发送ajax请求，再发送请求之前使用lodash中的方法进行限制访问接口的频率,在用户输入完成时才会发送ajax请求</p></li></ul></li><li><p>v-if和v-show的区别</p><p>v-if通过条件判断是否渲染DOM元素，频繁的进行DOM元素的销毁和创建比较消耗性能，而v-show只渲染一次DOM元素，来控制css样式display进行元素的显示和隐藏，优化性能</p></li><li><p>组件中的data为什么是一个函数</p><p>当组件被多次复用时,会创建出多个实例，但是本质上这些实例属于一个构造函数,如果data直接是一个对象，修改对象中的值会影响到所有的实例，因此为了保证组件不同实例之间的data不冲突，data必须是一个函数并且需要返回一个私有数据对象</p></li><li><p>v-model的原理</p><p>v-model实质是使用了属性绑定和事件监听，通过属性绑定不同标签的value，当value发生变化时会根据标签的不同触发不同事件</p></li><li><p>Vue事件绑定原理</p><p>原生中事件绑定是通过addEventListener绑定到真实元素上，Vue中组件的事件绑定通过自定义的$on方法来实现的</p></li><li><p>vue模板编译的原理</p><p>简单的说，Vue的模板编译过程就是将template转化为rander函数的过程，首先解析模板，生成AST树(一种使用JavaScript对象的形式来描述整个模板)，在解析过程中使用大量的正则表达式进行解析，在遇到标签、文本的时候都会执行对应的钩子进行相关处理，对AST树进行优化之后将其转化为可执行的代码</p></li><li><p>虚拟DOM和key属性的作用</p><p>由于在浏览器中操作DOM很昂贵的，频繁的操作DOM，会产生一定的性能问题,这就是虚拟DOM的产生原因，再vue2.x中虚拟DOM的本质就是用原生的js对象来描述一个DOM节点，是对真实的DOM的一层抽象</p><p>key属性的作用是为了高效的更新虚拟DOM，用来表示每一个DOM节点具有唯一标识，让diff算法可以正确的识别此节点</p></li><li><p>keep-alive了解吗</p><p>vue内置组件,可以实现组件的缓存，被其包裹的组件进行切换时不会对当前组件进行卸载，用于保存组件的状态或避免重新渲染</p><p>两个常用的属性include/exclude,根据名称匹配有条件的进行缓存</p></li><li><p>Vue中组件生命周期调用顺序</p><p>组件的调用顺序是先父后子        渲染完成的顺序是先子后父</p><p>组件的销毁操作是先父后子        销毁完成的顺序是先子后父</p><p>加载渲染过程：父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p><p>子组件更新过程：父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p><p>父组件更新过程：父beforeUpdate-&gt;父updated</p><p>销毁过程：父beforeDistory-&gt;子beforeDistory-&gt;子distoryed-&gt;父distoryed</p><p>先调用父组件的生命周期钩子再调用子组件的生命周期钩子，等子组件完成之后再来完成父组件的</p></li><li><p>vue2.x组件的通信方式</p><ul><li><p>父子组件通信 </p><p>父组件向子组件通信，父组件通过属性绑定，子组件使用props选项接收</p><p>子组件向父组件通信，子组件调用$emit，父组件进行事件绑定$on</p><p>Ref引用对象获取到组件的实例,从而调用组件的一些属性和方法</p></li><li><p>兄弟组件通信</p><p>Event Bus事件中心</p><p>vuex</p></li><li><p>跨级组件通信</p><p>vuex</p></li></ul></li><li><p>SSR了解吗</p><p>SSR就是服务端渲染，就是将Vue在客户端把标签渲染成HTML的工作放在了服务器端,然后再把HTML返回给客户端</p><p>SSR具有更好的SEO，首屏加载速度更快等优点，同时也有一些缺点，比如我们的开发条件会受到限制，服务端渲染只支持beforeCreate和created两个钩子</p></li><li><p>我做过的vue项目的优化</p><p>编码阶段：</p><ul><li>v-if和v-for不能连用</li><li>key属性保证唯一</li><li>按需导入</li><li>路由懒加载，异步组件</li><li>图片懒加载</li></ul><p>打包阶段：</p><ul><li>代码压缩</li><li>使用CDN加载第三方模块</li></ul><p>项目上线阶段：</p><ul><li>服务器端将http协议修改成https</li><li>服务器端使用gzip压缩</li></ul><p>之后在项目中会遇到更多优化,这只是很小的一部分</p></li><li><p>hash路由和history路由的实现原理</p><p>hash路由就是location.hash中#后面的值，URL地址中#后面的</p><p>history路由实际上采用了HTML5提供的API来实现，主要的API有history.pushState()和history.replaceState()</p></li><li><p>如何让css样式只在当前组件中起作用</p><p>再style中加上scoped</p></li><li><p>如何获取dom</p><p>添加ref属性引用对象，再调用this.$refs来进行获取</p></li><li><p>vue-loader是什么？使用它的用途？</p><p>vue-loader是webpack中vue文件的加载器，可以将template、script、style转换为js模块 </p><p>用途：js可以写一些es6语法，style样式可支持less或scss，template可以加jade等，jade也是一种html，只不过没有开始标记和结束标记</p></li><li><p>vue中双向数据绑定是如何实现的</p><p>vue数据双向绑定就是通过数据劫持结合发布-订阅模式来实现的，也就是说数据和视图同步，当数据发生变化时，视图也会发生变化，当试图变化时，数据也会跟着变化。核心就是使用了Object.defineProperty()方法,因为该方法ES5中不支持，所以这也是vue不支持IE8和低版本浏览器的原因</p><p>发布-订阅模式被称为观察者模式，它定义的是一种一对多的依赖关系，当一个状态发生变化时，所有依赖该状态的对象都会得到通知</p><p>Object.defineProperty()方法，可以用于在对象上增加新属性，和修改对象上现有属性，返回该对象</p><p>将一个js对象放入vue实例当作data选项时，vue会对对象的所有属性进行遍历，然后使用Object.defineProperty方法将这些属性转化为setter/getter，这些setter/getter用户是不可见，仅在内部让vue能够追踪依赖，当属性被访问和修改的时候发送通知进行变更</p><p>每一个组件实例都有一个对应的watcher实例，会讲组件渲染的时候所有接触过的数据属性记录为依赖，当依赖项的setter触发时，就会通知对应的watcher，让对应的组件进行重新渲染</p></li><li><p>单页面应用和多页面应用的区别和优缺点</p><p>单页面应用(SPA),只有一个主页面的应用，刚开始浏览器就需要加载所有必须的html、css、js，所有的内容都包含在这个主页面中，但是编写代码的时候是分开编写的，使用路由功能来动态的加载，路由跳转渲染不同内容在主页面中，实现局部资源刷新</p><p>多页面应用(MPA)，有多个页面的应用，在页面进行跳转的时候是加载整个网页</p><p>单页面应用优点：用户体验很好，内容的变化不会加载整个网页，对服务器压力较小，前后端分离</p><p>缺点：不利用seo，提高了页面的复杂度，不支持浏览器前进后退功能，初始加载消耗较大</p></li><li><p>v-if和v-for的优先级</p><p>如果v-if和v-for同时使用，v-for拥有更高的优先级，这就意味着v-if会重复的在v-for中执行，因此不推荐同时使用</p></li><li><p>assets和static的区别</p><p>相同点：两者都是用来存放静态资源的</p><p>不同点：在项目打包过程中，会将assets中的文件进行打包上传，打包可以理解为代码压缩，代码格式化，最终会将压缩好的assets中的文件中放在static中上传到服务器端。但是在static文件夹中的文件在打包过程不会进行代码压缩、代码格式化等操作，而是直接可以上传到服务器端，因此在打包工程中static提高了打包效率，但是文件的体积会比较大</p><p>建议: 将项目中tmplate中需要的js，样式图片等文件可以放在assets中，将一些第三方文件已经处理过的可以放在static中，例如字体图标库</p></li><li><p>vue-router和location.href有什么区别</p><p>location.href是直接跳转到另一个页面，加载刷新了整个页面，而vue-router有两种模式，一种是hash模式，主要使用router.push方法来跳转实现局部页面刷新，一种是history模式，主要使用history.pushState方法来进行静态跳转</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack前端工程化</title>
      <link href="/2020/03/06/webpack-de-shi-yong/"/>
      <url>/2020/03/06/webpack-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h3><p>就是前端模块化，统一采用E6S模块化规范，不同功能写在不同的js文件，每一个js文件就是单独的模块，模块之间相互独立，如果要想使用模块中的变量和函数，使用export进行模块成员导出，在使用的模块中使用import进行模块成员导入</p><h4 id="使用babel可以在node-js中支持E6模块化规范"><a href="#使用babel可以在node-js中支持E6模块化规范" class="headerlink" title="使用babel可以在node.js中支持E6模块化规范"></a>使用babel可以在node.js中支持E6模块化规范</h4><ol><li><p>默认模块成员导出和导入</p><p>使用export default {} 将该对象里的一些变量和函数进行导出，在导入时，使用import 变量名 from ‘对应的模块文件’，该步骤中变量名就是接收的导出的那个对象，默认导出export default只能使用一次</p></li><li><p>按需导出和导入</p><p>使用export  将需要的变量和函数单个导出,在导入时使用import {变量名1,变量名2} from ‘模块文件’,该步骤中import后面是使用对象结构的方式接收导入的变量，因此变量要跟导出时的一致,也是使用as关键字更改变量名,export 可以使用多次</p></li><li><p>导入执行模块代码</p><p>在模块中没有成员需要导出，可以直接import导入该模块文件并执行</p></li></ol><h3 id="webpack的基本使用和配置"><a href="#webpack的基本使用和配置" class="headerlink" title="webpack的基本使用和配置"></a>webpack的基本使用和配置</h3><p>在项目中使用npm init -y 生成package.json项目描述文件,在新建一个src文件夹所有的开发时候的源代码放在该文件中</p><p>在项目中使用npm install webpack webpack-cli -D    表示在开发环境中安装webpack相关包</p><p>在项目根目录配置webpack的信息，新建webpack.config.js文件,该文件直接导出一个一个模块成员mode，mode的属性值分为两种一个是development，开发模式编译的速度快点,文件大小没有压缩，另外一种production，生产模式，编译速度慢一点代码是压缩过的</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//webpack.config.js文件配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span> <span class="token comment" spellcheck="true">//development表示开发环境的打包 production生产模式</span><span class="token punctuation">}</span></code></pre><p>然后再项目的描述文件中package.json的script指令中添加dev指令，内容为webpack,将webpack的命令简化使用dev命令代替,那么使用命令行执行的时候,可以直接npm run script指令中的增加的命令</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>打包好的文件会自动生成dist文件夹将main.js输入其中，然后再浏览器中就可以引用该打包的文件了，就解决了ES6模块语法兼容问题了</p><h4 id="配置webpack的入口文件和出口文件"><a href="#配置webpack的入口文件和出口文件" class="headerlink" title="配置webpack的入口文件和出口文件"></a>配置webpack的入口文件和出口文件</h4><p>默认的webpack入口文件是src文件夹下的index.js，出口文件问dist目录下main.js</p><p>可以在webpack.config.js配置文件中添加entry和output配置项来自定义入口文件和出口文件</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//development表示开发环境的打包 production生产模式</span>    <span class="token comment" spellcheck="true">//指定入口文件的路径</span>    entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//指定出口文件存放位置和出口文件名</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">'bundel.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="配置webpack自动打包"><a href="#配置webpack自动打包" class="headerlink" title="配置webpack自动打包"></a>配置webpack自动打包</h4><p>在每次修改完入口文件的代码时都需要重新打包输入命令npm run dev，使用npm install webpack-dev-server下载webpack自动打包工具，然后将package.json中的script指令的dev命令的更改为webpack-dev-server，使用该工具命令进行自动打包，修改引用script标签中文件的路径为根目录下的出口文件，然后进行npm run dev进行自动打包命令，该工具将项目文件托管在本地localhost：8080的服务器中，在这里面可以访问到项目的文件夹，出口文件放在了项目根目录，但是我们在项目文件夹中看不到是隐藏的</p><h4 id="预览自动打包页面"><a href="#预览自动打包页面" class="headerlink" title="预览自动打包页面"></a>预览自动打包页面</h4><p>在使用了自动打包webpack-dev-server时，我们会使用localhost：8080来访问项目，默认在访问根目录的时候会出现的是项目目录结构，但是我们想在访问网站的根目录直接呈现index.html页面</p><p>首先npm install html-webpack-plugin -D</p><p>修改webpack.config.js里面的配置内容，导入该模块，创建该模块的实例对象进行一些配置</p><p>然后再将实例对象放在plugins数组中作为模块成员导出，该数组用于存放webpack打包时用到一些插件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlplugin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要预览那个html文件</span>    template<span class="token punctuation">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//修改预览文件的名字，存在根目录中但是不会在目录中显示</span>    filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//development表示开发环境的打包 production生产模式</span>    <span class="token comment" spellcheck="true">//指定入口文件的路径</span>    entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//指定出口文件存放位置和出口文件名</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">'bundel.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>htmlplugin<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//该数组用于存放webpack打包时用到一些插件</span><span class="token punctuation">}</span></code></pre><p>这样在使用该自动打包工具时访问网站根目录就会显示配置的这个html文件了</p><h4 id="配置自动打包的参数"><a href="#配置自动打包的参数" class="headerlink" title="配置自动打包的参数"></a>配置自动打包的参数</h4><p>修改pageage.json文件中dev属性值的配置,”dev”: “webpack-dev-server –open –host 127.0.0.1 –port 3000”</p><p>–open为自动打开浏览器 –host 配置ip –port配置端口号</p><h3 id="webpack加载器"><a href="#webpack加载器" class="headerlink" title="webpack加载器"></a>webpack加载器</h3><p>默认webpack打包文件只会打包.js结尾的模板文件,打包其他类型的模板文件需要使用调用第三方库文件加载器loader来打包指定的模板文件，加载器就是用来打包出js文件以外的其他常见文件，在打包js文件的时候如果含有高级语法也需要配置babel加载器来处理打包该js文件</p><h4 id="打包css文件"><a href="#打包css文件" class="headerlink" title="打包css文件"></a>打包css文件</h4><p>使用npm i style-loader css-loader -D安装css文件loader</p><p>然后在webpack.config.js文件中加入module配置属性,该属性是一个对象用来配置所有第三文件模板的匹配规则</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//所有的第三方文件模块的匹配规则</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><p><strong>注意</strong>:在rules数组中配置多个加载器匹配规则,test接受一个正则,匹配文件的后缀名,use为使用什么加载器来处理，加载器的顺序是固定,但是处理的时候是从后面往前面依次处理，书写顺序不能写错，但是显示css-loader来处理将处理结果交给style-loader加载器</p><h4 id="打包less文件"><a href="#打包less文件" class="headerlink" title="打包less文件"></a>打包less文件</h4><p>使用npm i less-loader less -D安装less文件loader</p><p>less文件加载器依赖css文件的加载器，因此再新增规则的时候在use中要加上这两个加载器</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><h4 id="打包scss文件"><a href="#打包scss文件" class="headerlink" title="打包scss文件"></a>打包scss文件</h4><p>使用npm i sass-loader node-sass -D安装sass文件loader</p><p>新增规则</p><h4 id="配置postcss为css添加浏览器私有前缀"><a href="#配置postcss为css添加浏览器私有前缀" class="headerlink" title="配置postcss为css添加浏览器私有前缀"></a>配置postcss为css添加浏览器私有前缀</h4><p>npm i npm install postcss-loader autoprefixer -D</p><p>在项目根目录创建postcss.config.js配置文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>autoprefixer<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>修改css加载器的那条规则，在后面加上postcss-loader即可</p><h4 id="打包样式表里的图片路径和字体文件"><a href="#打包样式表里的图片路径和字体文件" class="headerlink" title="打包样式表里的图片路径和字体文件"></a>打包样式表里的图片路径和字体文件</h4><p>运行npm i url-loader file-loader -D</p><p>加上以下配置项loader规则</p><pre class=" language-js"><code class="language-js">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//打包样式表图片文件和字体文件</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'url-loader?limit=16941'</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="打包高级js语法babel加载器"><a href="#打包高级js语法babel加载器" class="headerlink" title="打包高级js语法babel加载器"></a>打包高级js语法babel加载器</h4><p>在项目如果有用到js的高级语法不兼容，可以使用babel语法转换并打包为兼容的js语法文件</p><p>1.安装babel转换器<br>​    npm install babel-loader @babel/core @babel/runtime -D<br>2.安装babel语法插件包<br>​    npm install @babel/preset-env @babel/plugin-transform-runtime @babel/plugin-proposal-class-properties -D</p><p>在项目根路径添加babel配置js文件,将依赖第三方作为模块成员导出</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    presets<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span> <span class="token string">"@babel/plugin-proposal-class-properties"</span> <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>再在webpack.config.js文件中配置loader规则加上</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//打包样式表图片文件和字体文件</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'url-loader?limit=16941'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//新增babel高级js语法转换loader</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//exclude为排除项，意思是不要处理node_modules中的js文件</span>                exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><h4 id="打包vue单组件文件"><a href="#打包vue单组件文件" class="headerlink" title="打包vue单组件文件"></a>打包vue单组件文件</h4><p>vue单组件文件就是以.vue文件后缀组成的，用于生成vue的组件，该文件包含三部分</p><p>template模板部分，script业务逻辑部分就是就是除了模板以外的其他选项，将该部分使用exprot default默认导出，style部分每个组件私有样式，为了保证不冲突，在style标签中加上scoped属性，一个.vue文件就是一个组件</p><pre class=" language-vue"><code class="language-vue"><template>    <div>        <h1>我是App 跟组件</h1>    </div></template><script>export default {    data: function() {        return {        }    },    methods: {    }}</script><style scoped>    h1 {        color: red;    }</style></code></pre><p>打包.vue文件需要npm vue-loader vue-template-compiler -D</p><p>然后在webpack.config.js配置文件中导入vue-loader插件下的文件,返回一个构造函数,将该模块插件实例对象添加到plugins数组中最后再加上一条.vue的loader规则</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导入vue-loader插件</span><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//存放打包时候的第三插件</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>htmlplugin<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><pre class=" language-js"><code class="language-js">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//打包样式表图片文件和字体文件</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.jpg|png|gif|bmp|ttf|eot|svg|woff|woff2$/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'url-loader?limit=16941'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//新增babel高级js语法转换loader</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//exclude为排除项，意思是不要处理node_modules中的js文件</span>                exclude<span class="token punctuation">:</span><span class="token regex">/node_modules/</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.vue/</span><span class="token punctuation">,</span> use<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span></code></pre><h4 id="在webpack项目中使用vue"><a href="#在webpack项目中使用vue" class="headerlink" title="在webpack项目中使用vue"></a>在webpack项目中使用vue</h4><p>一般在真实的开发项目中我们都会使用webpack+vue来构建前端项目，因此在webpack中使用vue就不再向单纯的使用vue那样了</p><p>我们需要npm i vue -S下载vue的第三方包，然后在入口文件使用import Vue from ‘vue’默认导入vue模块，这样就可以使用Vue来创建vue实例了，同时我们还需要导入单文件组件，就是各种.vue文件后缀的单文件组件,然后在vue实例中使用render属性进行组件的渲染,在wabpack项目中渲染组件都是使用render函数而不再会有componts和template等实例选项设置了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导入vue模块</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//导入vue跟组件</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./components/App.vue'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建vue实例</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//要渲染的组件,在webpack项目中只会使用render函数来渲染组件不会出现components和template来渲染</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="webpack项目简单打包"><a href="#webpack项目简单打包" class="headerlink" title="webpack项目简单打包"></a>webpack项目简单打包</h4><p>在packjson中script指令中添加build命令，    “build”: “webpack -p”，然后使用npm run build来进行项目的打包上线，会根据webpack.config.js配置文件的一些信息，出入口文件，第三方插件，加载器等来进行打包，打包好的dist文件夹就是我们最终上线的项目</p><h3 id="webpack总结"><a href="#webpack总结" class="headerlink" title="webpack总结"></a>webpack总结</h3><ol><li><p>使用webpack就是支持ES6的模块化规范,在项目开发过程中可以使用mode开放模式来进行项目的模块开发，支持浏览器和服务器端的模块化开发</p></li><li><p>在构建项目的时候，所有的源代码都写在src文件中,所有的配置信息都在项目根目录，新建webpack.config.js来配置webpack，将配置项作为模块成员导出，常见的配置文件配置项，mode配置项目环境开发与生产，entry指定项目的入口文件，output指定项目的出口文件，plugings数组用于存放打包时候需要用到的第三方模块实例对象，module配置打包不同类型的文件加载器规则</p></li><li><p>在项目的描述文件package.json中script添加对应webpack命令</p></li><li><p>自动打包需要使用webpack-dev-sevser会创建一个localhost来跑当前的项目,每修改一次文件就会自动打包,需要将package.json中的dev指定指定为该模块</p></li><li><p>加载器，webpack在打包文件的时候会判断该文件是不是.js后缀的文件如果不是就是其它类型的文件就需要下载对应的文件打包加载器，然后在配置文件中module属性下rules设置各种文件加载器的规则,常见的加载器就是css和.vue的加载器配置,还有js的高级语法转换babel加载器,需要打包这类文件时就在项目中去下载对应的npm第三方包，然后进行加载器规则的配置</p></li><li><p>最后在项目上线的时候进行打包上线,会去读取webpack配置信息来生成打包的文件,生成后的文件dist文件夹中的,该文件夹就是打包好的项目</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件开发</title>
      <link href="/2020/03/03/vue-zu-jian-kai-fa-ji-chu/"/>
      <url>/2020/03/03/vue-zu-jian-kai-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><p>不同的功能封装到不同的组件当中，将各个组件组合在一起形成一个完整的应用，组件就相当于html标签，vue实例就是顶级组件，相同组件可以进行复用并且数据私有化</p><h3 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h3><p>全局组件的注册,使用Vue.component方法进行全局的注册，第一个参数为组件的名称，第二个参数是一个对象，对象的中的属性跟new Vue里的一样除了el属性没有以外，不过都需要一个模板属性template，在里面可以直接写字符串形式的vue模板</p><p>局部组件的注册，在实例对象下的components属性中，是一个对象，属性名是组件的名称，使用短横线-的方式命名，属性值是组件的内容是一个对象可以抽离出去在外面定义，只能在父模板中使用，只能在定义组局部组件的父组件下使用，不能在其他组件中使用</p><p>组件的使用直接在html页面的模板下写组件的名称双标签形式，在html页面中的组件只能使用短横线的形式，也可以在字符串模板中使用就是在template属性中使用</p><p>组件的注意事项</p><ul><li>注册组件内容的data属性必须是一个函数，同时需要返回一个对象，这就导致组件是可以复用的并且每个复用的组件中data返回的对象数据都是私有的</li><li>组件模板中必须要有一个根元素进行包裹，就是在最外面写一个容器div标签</li><li>可以使用模板字符串的形式写template属性中的值</li><li>局部组件只能在父组件中使用，只能在元素挂载的父模板下使用组件标签</li><li>组件命名可以使用驼峰命名只能在字符串模板中使用，在html模板下需要转化成短横线-的形式才能使用该组件，所以一般在取组件名字的时候推荐使用短横线的形式命名，dom元素是不支持大小写的</li></ul><h3 id="组件之间传值"><a href="#组件之间传值" class="headerlink" title="组件之间传值"></a>组件之间传值</h3><h4 id="父组件向子组件中传值"><a href="#父组件向子组件中传值" class="headerlink" title="父组件向子组件中传值"></a>父组件向子组件中传值</h4><p>父组件通过属性的形式在子组件中传入值，也可以通过属性绑定的形式在子组件中传值，可以传入数字、数组、对象等数据类型的值，同时在子组件中需要添加props属性来接收父组件传入的值，该属性是一个数组可以存多个值，然后子组件可以在自己的字符串模板中使用props里的值，props属性中的名字如果是驼峰命名，在html模板中应该转化成短横线“ - ”的形式，在字符串模板中不用转化</p><p>所有自定义的驼峰命名在html模板中都没有效果，因为html模板不识别大小写</p><h4 id="子组件向父组件传递数据"><a href="#子组件向父组件传递数据" class="headerlink" title="子组件向父组件传递数据"></a>子组件向父组件传递数据</h4><p>一般不能在子组件直接修改props属性中的数据,要传递数据到父组件，让父组件修改data中的数据</p><p>在子组件中需要使用$emit()方法来自定义一个事件,但是在子组件中需要通过一个事件去触发这个自定义事件，所以一般子组件的自定义事件都是写在事件绑定的后面,$emit()第一个参数为自定义的事件名称,第二个参数为需要传递的数据,那么在父组件中就需要来正常监听这个自定义的事件,直接在父组件模板中绑定该自定义事件名称使用$event进行对传过来的数据的接收,就是事件对象存着传递过来的数据</p><h4 id="非父子组件之间的传递数据"><a href="#非父子组件之间的传递数据" class="headerlink" title="非父子组件之间的传递数据"></a>非父子组件之间的传递数据</h4><p>相当于兄弟组件之间,核心还是通过$emit()方法进行自定义事件数据的传递，但是这个操作不由两个组件本身去执行，而是由第三方事件中心去完成，这个事件中心就是new Vue()不带参数,在A组件中想要传递数据给B组件,那么在A组件中就需要通过一个事件去触发事件中心的$emit()方法,事件中心的$emit()将这个自定义的事件名称和传递的数据传给了B组件，在B组件中需要在生命周期mounted钩子函数中来监听事件中心传递过来的自定义事件，使用事件$on()方法来监听，第一个参数是A中$emit()方法自定义事件的名称,第二个参数是事件处理函数,事件处理函数中有个参数来接收A组件传递过来的数据，在事件处理函数中对该数据进行操作，反过来B想传递数据给A是一样的</p><p>子组件向父组件传递数据 和非父子之间传递数据其实都是通过$emit()方法来进行自定义事件，对自定义事件的监听对传递过来的数据进行一系列操作，只不过后者是通过新创建的vue实例即事件中心来控制的, 重点就是利用生命周期钩子函数mounted来完成对自定义事件的监听,在模板渲染完成之后才能进行监听事件</p><h3 id="插槽的使用"><a href="#插槽的使用" class="headerlink" title="插槽的使用"></a>插槽的使用</h3><p>可以将父组件传递过来的内容显示在子组件模版中,在定义子组件的时候，在模板中添加<slot>标签，该标签内部的内容是在使用子组件的时候,在子组件标签中传递的</p><p>例如这是一个alert-box组件的模板</p><pre class=" language-html"><code class="language-html">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>ERROR:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>在父模板中使用组件传递内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span>代码出错<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span></code></pre><p>那么<alert-box>之间的内容就会被渲染到子模版的<slot>标签之中</p><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>就是在定义子组件的时候,在子组件模板中,给<slot>标签加上name属性,这样这个插槽就有对应的名字了,在向该插槽传递内容的时候，需要在标签上加上slot属性，slot=具体的name属性值,去匹配子组件模板中的slot标签</p><p>例如这是一个base-layout组件的模板，有名字叫header和footer的插槽，还有一个默认插槽没有name属性</p><pre class=" language-html"><code class="language-html">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>那么在父组件中这样匹配对应有名字的插槽，那么在子组件模板中header标签内部就被渲染了两个h1标签表示头部标题，main部分因为没有指定slot的名字就是默认渲染子模版没有name属性的slot标签，footer标签内被渲染了两个p标签尾部内容1</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>base<span class="token operator">-</span>layout<span class="token operator">></span>            <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>h1<span class="token operator">></span>头部标题<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                <span class="token operator">&lt;</span>h1<span class="token operator">></span>头部标题<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是主体内容<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>我是主体内容<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>p <span class="token operator">></span>我是尾部内容<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                <span class="token operator">&lt;</span>p <span class="token operator">></span>我是尾部内容<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>base<span class="token operator">-</span>layout<span class="token operator">></span></code></pre><p>就是在给子模板的slot标签加上name属性，对应的在使用组件时，需要传递slot属性来匹配name的值</p><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>允许在父组件对子组件的模板内容进行操作,在定义子组件模板的时候你想要把哪一部分的内容和数据开放出去给父组件能访问到</p><p>这是一个friut-list组件的模板item这个数据只能在子模板中使用并访问到，但是我想要动态的控制这里面的内容,就需要把这一部分的内容放在slot标签中</p><pre class=" language-html"><code class="language-html">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                {{item.name}}                             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>子模板内容变成这种形式,在slot标签中进行属性绑定,属性的名字可以自己定义,那么属性的值就是item这个数据，这个绑定的属性list就叫做插槽prop</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                {{item.name}}                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>那么相应的在父模板中操作这个数据的时候需要加上slot-scope这个属性,这个属性接受了传递过来的插槽prop，我们可以这个属性值自定义名字，只不过我们一般约定叫slotProps，那么这个值就接受了子组件模板中属性绑定的那个值这里就是list属性，list属性绑定的就是item这个数据,就是说slotProps可以访问到item数据</p><pre class=" language-html"><code class="language-html"> <span class="token comment" spellcheck="true">&lt;!-- 在父组件对插槽中的item数据进行操作 需要在template标签中加上slot-scope属性,后面的名字可以自定义,一般约定叫slotProps--></span>            <span class="token comment" spellcheck="true">&lt;!-- slotProps中就存取了list这个属性,而这个属性里面绑定的就是item数据就是子组件模板中的数据 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slotProps.list.id<span class="token punctuation">=</span><span class="token punctuation">=</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>current<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                {{slotProps.list.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>{{slotProps.list.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>组件之间传值和插槽是不同的，组件之间的传值一般都是传一些数据，而插槽是对模板中的内容进行操作和内容的传递</p><p><strong>注意在vue2.6以上这些在标签中的slot属性都可以使用v-slot指令去替换</strong></p><p>v-slot:插槽名        就是匹配具名插槽</p><p>v-slot:插槽名=”slotProps”    就是作用域插槽接收传递过来的插槽prop中的数据</p><h3 id="目前所学的全局API和配置"><a href="#目前所学的全局API和配置" class="headerlink" title="目前所学的全局API和配置"></a>目前所学的全局API和配置</h3><p>KeyCodes     定义自定义的键盘事件修饰符的时候Vue.config.KeyCodes.修饰符名字 = keycode码</p><p>Vue.directive        全局设置自定义指令</p><p>Vue.filter        全局设置过滤器</p><p>Vue.component    全局注册组件</p><p>Vue.set            响应式的更新对象和数组中的数据</p><p>局部注册当成实例的属性选项提供</p><p>directives        局部设置自定义指令</p><p>filters            局部设置过滤器</p><p>components        局部注册组件            </p>]]></content>
      
      
      <categories>
          
          <category> vue.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax同源与跨域请求</title>
      <link href="/2020/02/27/ajax03/"/>
      <url>/2020/02/27/ajax03/</url>
      
        <content type="html"><![CDATA[<h3 id="同源政策"><a href="#同源政策" class="headerlink" title="同源政策"></a>同源政策</h3><p>同源就是指同一来源,这些请求都是请求的同一个服务器，如果两个页面具有<strong>相同的协议相同的域名相同的端口号</strong>就说明这两个页面是同源的，只要有一个不同那么就不同源，在浏览器的同源政策下一般情况ajax不能向不同源的服务器发送请求，主要是对js中ajax请求的一些限制，还有恶意访问cookie</p><h3 id="使用jsonp解决非同源"><a href="#使用jsonp解决非同源" class="headerlink" title="使用jsonp解决非同源"></a>使用jsonp解决非同源</h3><p>jsonp实际上已经不算ajax请求，他利用script标签的scr属性可以访问非同源服务器，在src属性中填写非同源的服务器地址，在非同源服务器端书写一个字符串形式的函数调用，在调用的时候可以带上json对象的参数，然后被客户端的script标签解析直接在客户端来调用该函数，客户端就需要提前的函数声明，来对服务器端的函数调用传过来的实参进行一些处理。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">//客户端函数声明</span>        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是在服务器端调用的'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 利用script标签的scr属性可以访问非同源服务器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:3001/test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//服务器端书写函数的调用</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">'fn({name: "张三"})'</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简单的来说就是在服务器端调用函数，不过不能直接调用要包裹成字符串响应出去,那么就会被客户端script标签解析并调用，所以在客户端需要有一个对应的函数声明</p><p><strong>优化一</strong>: 客户端函数名称可以作为get参数传给服务器端，服务器端接收到get参数中的函数名并响应，这样客户端在修改函数名的时候只用一起修改get参数即可，服务器端接收该函数名就不用写固定的函数名</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://localhost:3001/better?callback=fn1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>服务器端：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 接收客户端传递过来的函数的名称</span>    <span class="token keyword">const</span> fnName <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> fnName <span class="token operator">+</span> <span class="token string">'({name: "张三"})'</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>优化二</strong>：动态的生成script标签在需要的时候发送请求，就是在需要的时候创建script标签，给其src属性赋值，然后追加到页面中，在加载完成后移除</p><pre class=" language-js"><code class="language-js"> btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//动态创建script标签</span>            <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//给script的scr属性赋值非同源即可</span>            script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:3001/better?callback=fn1'</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将标签添加到页面中</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在每次加载完script标签后移除该标签</span>            script<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="简单的jsonp函数的封装"><a href="#简单的jsonp函数的封装" class="headerlink" title="简单的jsonp函数的封装"></a>简单的jsonp函数的封装</h4><p>动态的生成script标签，在其src属性中写出请求的服务器地址，然后添加到页面中</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装的jsop函数</span>        <span class="token keyword">function</span> jsonp <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//动态创建script标签</span>            <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//给script的scr属性赋值非同源即可</span>            script<span class="token punctuation">.</span>src <span class="token operator">=</span> options<span class="token punctuation">.</span>url<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将标签添加到页面中</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在每次加载完script标签后移除该标签</span>            script<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h4 id="封装完整的jsonp函数"><a href="#封装完整的jsonp函数" class="headerlink" title="封装完整的jsonp函数"></a>封装完整的jsonp函数</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//jsonp函数的调用</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">'http://localhost:3001/better'</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'caoqiang'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span> <span class="token number">21</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//封装jsonp函数</span>        <span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//动态生成script标签</span>            <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//拼接get参数字符串,该方式只能支持get请求</span>            <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> options<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                params <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//随机函数名myjsonp0112331</span>            <span class="token keyword">let</span> fnName <span class="token operator">=</span> <span class="token string">'myjsonp'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将调用函数挂载在window对象下并生成随机的函数名</span>            window<span class="token punctuation">[</span>fnName<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">.</span>success<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将函数名和get请求参数拼接到请求地址后面</span>            script<span class="token punctuation">.</span>src <span class="token operator">=</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?callback='</span> <span class="token operator">+</span> fnName <span class="token operator">+</span> params<span class="token punctuation">;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在加载完成后移除该script标签</span>            script<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>在服务器端如果是用node中的express框架，在请求对象中有一个jsonp方法他会帮我们将获取的get参数和函数名拼接好，同时也会自动帮我们将数据转成json字符串形式返回，我们只要在jsonp方法中写要返回给客户端的实参数据即可</p><pre class=" language-js"><code class="language-js">res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="CORS跨域资源共享"><a href="#CORS跨域资源共享" class="headerlink" title="CORS跨域资源共享"></a>CORS跨域资源共享</h3><p>CORS：全称为Cross-origin-resource-sharing    即跨域资源共享,他允许ajax请求进行跨域请求，即非同源请求，在ajax发送跨域请求的时候，在请求头中会添加一个origin字段，该字段内容为请求跨域地址，然后在服务器端会给在响应头中设置</p><pre><code>//允许哪些网站能访问本网站Access-Control-Allow-Origin//支持哪些请求方式Access-Control-Allow-Method</code></pre><p>在响应给浏览器后，浏览器会自动判断响应头是否有这两个字段，如果有才可以进行跨域ajax请求，否则就不能进行跨域请求，CORS主要是由服务器端来配置响应头中的字段，由浏览器自动判断是否接受跨域请求，因此前端部分的ajax请求代码不会有所变化，只需要在服务器端配置即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//node.js中的配置</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'GET, POST'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="服务器端代理解决跨域"><a href="#服务器端代理解决跨域" class="headerlink" title="服务器端代理解决跨域"></a>服务器端代理解决跨域</h3><p>同源政策一般是浏览器限制ajax请求，在服务器端是不存在同源政策的，服务器端可以访问其他服务器端数据，因此我们只需要在服务器端去请求其他服务器端的数据然后在响应给自己客户端的ajax请求</p><p>就是A网站客户端向A网站服务器端发送了Ajax请求，A网站服务器端去请求B网站服务器端的数据,将B网站服务器端的数据先在A网站服务器端接收，然后A网站服务器端就把这个从B网站服务器端接收的数据响应给A网站客户端的ajax请求即可</p><p>在node.js中，需要引入第三方模块requset模块去请求别的服务器端的数据</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 向其他服务器端请求数据的模块</span><span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该模块返回一个方法</span>pp<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/server'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3001/cross'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="跨域ajax请求携带cookie"><a href="#跨域ajax请求携带cookie" class="headerlink" title="跨域ajax请求携带cookie"></a>跨域ajax请求携带cookie</h3><p>cookie一般都是存取了用户的一些登录信息，便于服务器端识别，如果在同一个公司的一个项目下的两个服务器端要进行登录请求，在发送了登录跨域ajax请求的时候是不会携带cookie进行传递的，需要服务器端和客户端双向配合才能允许跨域携带cookie</p><p>在客户端发送ajax请求的时候要设置ajax对象下的<strong>withCredentials</strong> = <strong>true</strong>;默认情况下时false不允许，同时服务器端还在在响应头除了加上ajax请求CORS配置以外还要加上Access-Control-Allow-Credentials字段，将其设置为true，只有这两个都设置才允许跨域携带cookie信息</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="解决跨域ajax请求的几种方案"><a href="#解决跨域ajax请求的几种方案" class="headerlink" title="解决跨域ajax请求的几种方案"></a>解决跨域ajax请求的几种方案</h4><h4 id="方法一：使用jsonp"><a href="#方法一：使用jsonp" class="headerlink" title="方法一：使用jsonp"></a>方法一：使用jsonp</h4><p>模拟ajax请求，利用script标签的src属性可以访问其他服务器端的资源，在src属性中填写需要访问数据的服务器url地址，服务器端会返回一段javascript函数的调用，将响应的数据通过函数的实参传递到客户端，在客户端需要有对应的函数声明然后对实参传过来的数据做具体操作，因为需要借用src属性因此只能支持get请求方式，将随机的函数名和一些请求参数通过get请求添加到url地址后，同时需要前后端配合完成</p><h4 id="方法二：CORS跨域资源分享"><a href="#方法二：CORS跨域资源分享" class="headerlink" title="方法二：CORS跨域资源分享"></a>方法二：CORS跨域资源分享</h4><p>主要是在服务器端完成，在服务器端给响应头添加以下字段即可，不用改变客户端的ajax代码，浏览器再检测到ajax跨域请求时会自动在请求头中设置Origin字段,在响应头中判断是否有以下字段允许ajax跨域请求</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//允许哪些网站能访问本网站</span>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token comment" spellcheck="true">//支持哪些请求方式</span>Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Method<span class="token punctuation">:</span> <span class="token keyword">get</span><span class="token punctuation">,</span>post</code></pre><p><strong>如果设置了服务器端响应头Access-Control-Allow-Credentials:true,同时在客户端ajax请求对象下也应该设置withCredentials = true就允许跨域携带cookie信息</strong></p><h4 id="方法三-服务器端代理"><a href="#方法三-服务器端代理" class="headerlink" title="方法三: 服务器端代理"></a>方法三: 服务器端代理</h4><p>主要是在服务器端完成，让ajax请求本地的服务器，让本地服务器去请求其他服务器的资源，将请求的结果通过本地服务器响应给ajax请求对象，就是通过ajax请求同源的服务器，让服务器去帮ajax请求其他非同源的服务器里的资源再将结果响应给ajax，绕过浏览器的同源政策，服务器端不受同源政策影响</p>]]></content>
      
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax的原生封装</title>
      <link href="/2020/02/25/ajax01/"/>
      <url>/2020/02/25/ajax01/</url>
      
        <content type="html"><![CDATA[<h3 id="Ajax应用"><a href="#Ajax应用" class="headerlink" title="Ajax应用"></a>Ajax应用</h3><p>Ajax出现主要是为了局部更新数据,再不刷新页面的情况下局部更新后台的数据响应到页面中,增加浏览网站的体验</p><p>一般来说发送请求和接收响应都是由浏览器完成的是我们不可控制,所以我们需要在浏览器中创建一个ajax对象来帮助浏览器发送请求和接收响应数据，所以浏览器可以空出手来让用户一遍浏览网页一边通过ajax对象实现局部数据的刷新,通过浏览器中JavaScript代码来控制,但是ajax应用需要基于服务器端需要开启服务器使用路由方式访问html文件才能使用浏览器创建的ajax对象,因为需要请求数据和接收响应数据。</p><h3 id="ajax请求实现步骤"><a href="#ajax请求实现步骤" class="headerlink" title="ajax请求实现步骤"></a>ajax请求实现步骤</h3><ol><li><p>创建ajax对象</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>告诉ajax请求方式和请求地址(对应服务器端路由地址)</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>发送请求</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取服务器端的响应数据,因为等待响应需要时间属于异步,所以监听ajax对象下onload事件（给出响应后触发该事件）来获取响应信息</p></li><li><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre></li></ol><p>服务器的需要有ajax对象对应请求方式的路由,和做出响应，那么我们就可以在浏览器中通过域名访问html文件利用在浏览器中创建的ajax发送请求和接收响应信息</p><p>服务器端的响应数据一般都是json字符串形式，用Ajax对象接收了该响应数据需要使用JSON.parse()方法转化成对象形式然后通过字符串拼接使用DOM方法呈现在页面中</p><h4 id="传递get请求参数"><a href="#传递get请求参数" class="headerlink" title="传递get请求参数"></a>传递get请求参数</h4><p>一般传递请求参数都是通过表单，但是要使用Ajax对象来传递我们就不需要传统的表单控件利用submit来提交数据了,不需要跳转页面传递数据,我们只需要把获取表单的值,拼接成get请求参数格式，然后再将get参数拼接在ajax请求地址的？后面即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//监听点击事件</span>        btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//自行拼接get请求参数添加到请求路径后面</span>            <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token template-string"><span class="token string">`name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>un<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//讲get请求参数拼接在请求路径后面</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:3000/get?'</span> <span class="token operator">+</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="传递post请求参数"><a href="#传递post请求参数" class="headerlink" title="传递post请求参数"></a>传递post请求参数</h4><p>因为post请求参数是在请求体中进行传递的,我们需要将拼接好的请求参数传入ajax对象的send()方法中,还必须要在请求头中设置post请求参数的数据类型,因为普通数据上传和文件上传的数据格式不同,还有json格式的数据</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//post请求必须设置请求参数的类型,在请求头中的content-type中设置</span>            xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//post请求参数是放在请求体中进行传递的,将拼接好的请求参数传入send方法会自动帮我们放在请求体里</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><h4 id="传递json请求参数数据格式"><a href="#传递json请求参数数据格式" class="headerlink" title="传递json请求参数数据格式"></a>传递json请求参数数据格式</h4><p>首先传统的表单和get请求参数都不支持json数据格式的请求参数，因此只能使用post方式进行传递,但是需要在请求头中设置请求参数格式为json格式,同时在send()方法中的参数需要时json字符串形式的需要使用JSON.stringify方法将对象转化为字符串,同时在服务器端解析post请求的时候,需要使用json方法来解析而不是urlencoded方法</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyparser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发送请求,将对象转化为json字符串放在send()方法进行发送json格式的数据</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'caoqiang'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="使用监听ajax状态码来获取响应数据"><a href="#使用监听ajax状态码来获取响应数据" class="headerlink" title="使用监听ajax状态码来获取响应数据"></a>使用监听ajax状态码来获取响应数据</h4><p>该方法onreadystatechange兼容ie低版本但是会被出发多次效率不如onload事件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//ajax状态码为0,还没有调用open方法</span>        <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ajax状态码为1,调用open方法,还没发送数据</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:3000/ajaxState'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//onreadystatechange每当状态码发生变化,该事件就会被触发,使用send方法后就会放生变化</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2 发送了请求</span>            <span class="token comment" spellcheck="true">//3 接受了部分响应数据</span>            <span class="token comment" spellcheck="true">//4 响应数据全部接收完毕,当状态码为4的时候就可以读取服务器端响应过来的数据了</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//发送了请求之后,ajax状态时刻在变化</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Ajax错误处理"><a href="#Ajax错误处理" class="headerlink" title="Ajax错误处理"></a>Ajax错误处理</h4><ol><li><p>网络通畅,服务器返回了非200http状态码,例如返回了400就代表客户端错误,这时候在ajax请求中通过xhr.stutas属性获取服务器端响应的http状态码,如果xhr.stutas等于400就做出相应的处理</p></li><li><p>提示404http状态码,请求资源没有找到去检查请求路径</p></li><li><p>如果提示了500状态码,是服务器端发生错误，沟通服务器端程序员即可</p></li><li><p>网络连接失败的时候,无法监听到onload事件,因为没有网服务器端不会做出响应,使用onerror事件</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当服务器端返回了非200的错误http状态码,我们在ajax对象中可以通过status属性获取http状态码</span>                <span class="token comment" spellcheck="true">//并给客户端一些提示</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'客户端请求参数错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            xhr<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//离线状态监听该事件</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'网络连接中断'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span></code></pre><h4 id="ie低版本缓存数据"><a href="#ie低版本缓存数据" class="headerlink" title="ie低版本缓存数据"></a>ie低版本缓存数据</h4><p>请求相同的地址会从ie缓存中拿数据但是拿到的是上一次请求成功后在缓存中的数据，因此解决该问题只需要在每次请求路径上加一些不同的请求参数,这样请求就不是同一地址了</p><pre class=" language-js"><code class="language-js">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://www.example.com?='</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="Ajax封装"><a href="#Ajax封装" class="headerlink" title="Ajax封装"></a>Ajax封装</h3><p>一般在项目会有许多ajax请求,如果没法送一个请求都要重新创建一个ajax对象并对请求进行配置,这样的代码是不利用复用的,重复性高，因此在实战中都是会有封装好的ajax函数,我们传入对应的实参数据调用即可,将ajax请求过程中一些不确定的变量通过实参对象的属性传入</p><pre class=" language-js"><code class="language-js"> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//请求方式</span>            type<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//请求地址</span>            url<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000/first'</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这里是succuss函数调用的'</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//这是一个最基本的ajax发送请求到接受响应数据</span> <span class="token keyword">function</span> ajax <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建ajax对象</span>            <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//配置请求方式和地址</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>type<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//发送请求</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在请求成功后,接受了服务器端响应数据,会触发该事件调用事件处理函数</span>            xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//调用请求成功后的函数,将服务器端响应数据作为函数参数</span>                options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>方法二：加入get或者post参数请求,再调用函数中以对象形式传入请求参数，在函数中转化为字符串,同时判断是get请求还是post请求做出不同的ajax发送请求参数，注意post请求需要设置请求头中请求参数类型</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//拼接字符串</span>            <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token string">''</span>            <span class="token comment" spellcheck="true">//将对象转化为字串形式</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> options<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                params <span class="token operator">+</span><span class="token operator">=</span> k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&amp;'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//末尾多了一个&amp;符号,进行截取字符串</span>            params <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断请求方式</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果是get请求拼接到url地址中</span>                options<span class="token punctuation">.</span>url <span class="token operator">=</span> options<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//配置请求方式和地址</span>            xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>type<span class="token punctuation">,</span> options<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'post'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果是post请求放入send方法中同时设置请求头</span>                xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//发送请求</span>                xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>三：对post请求中请求参数格式的进一步判断</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">'post'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> ContentType <span class="token operator">=</span> options<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果是post请求放入send方法中同时设置请求头</span>                xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> ContentType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断post请求头中请求参数数据格式</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ContentType <span class="token operator">===</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果是json格式</span>                    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p>四：在完全接受服务器响应数据之后对http状态进行判断,如果是200就调用成功后的函数,非200就调用发生错误时的函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//调用请求成功后的函数</span>                    options<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//调用发生错误时的函数</span>                    options<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p>五：对服务器端响应过来的数据格式进行判断,看是json数据格式还是其他数据格式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取响应头中响应数据格式</span>                <span class="token keyword">let</span> contentType <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//响应数据</span>                <span class="token keyword">let</span> responseText <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果响应头Content-Type中信息包括application/json,说明服务器端响应的数据是json字符串形式的</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//需要转化成对象形式</span>                    responseText <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span></code></pre><p>六：调用函数不一定非要传那么多参数,可是在封装函数中设置一个默认值得对象,如果调用的时候没传就使用默认值,然后使用浅拷贝将实参对象覆盖默认对象即可，这样再调用函数得时候就不用写那么多属性了,根据实际情况传你所需要的就可以了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//设置默认值对象</span>            <span class="token keyword">let</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>                url<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                header<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                error<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//浅拷贝,如果传了实参对象的值就覆盖默认对象中的值</span>            Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="完整的封装ajax请求函数"><a href="#完整的封装ajax请求函数" class="headerlink" title="完整的封装ajax请求函数"></a>完整的封装ajax请求函数</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置默认参数对象</span>    <span class="token keyword">let</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        error<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//请求头中参数类型</span>        header<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将实参传的对象浅拷贝到默认对象中覆盖</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拼接请求参数</span>    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> defaults<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        params <span class="token operator">+</span><span class="token operator">=</span> k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> defaults<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&amp;'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//截取拼接字符串最后的&amp;</span>    params <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> params<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断get请求方式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'get'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        defaults<span class="token punctuation">.</span>url <span class="token operator">=</span> defaults<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">'?'</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>type<span class="token punctuation">,</span> defaults<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断post请求方式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'post'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断post请求参数类型</span>        <span class="token keyword">let</span> ContentType <span class="token operator">=</span> defaults<span class="token punctuation">.</span>header<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> ContentType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ContentType <span class="token operator">===</span> <span class="token string">'application/json'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果设置的是json对象格式,需要将对象数据转化成字符串进行传递</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取响应头中响应的数据类型</span>        <span class="token keyword">let</span> ContentType <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> responseText <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断服务器端响应数据的类型是否是json数据字符串</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ContentType<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'application/json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果是json字符串就需要转化为对象形式</span>            responseText <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//无错误时调用</span>            defaults<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            defaults<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Ajax最主要的作用就是局部刷新后台数据,帮助浏览器发送请求和接收响应</li><li>get请求参数和post请求参数(post请求参数的数据类型json和普通数据类型,需要在请求头中设置)</li><li>ajax错误处理,通过判断ajax对象下的http状态码来进行对应的错误处理</li><li>封装一个稍完整的ajax请求函数(可以保存起来作为工具复用),以后每次发送ajax请求时,调用该函数即可或者引入该js文件即可</li><li>一般我们连接的路径和请求方式(open方法中的配置)就是服务器端设置好的路由,也可以理解为接口,与服务器端的要一致,服务器 响应的数据一般都是json字符串格式,需要转化为js对象形式才能在脚本javascript代码中做相应的处理</li></ol>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> javascript </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客项目的总结</title>
      <link href="/2020/02/24/bo-ke-xiang-mu-zong-jie/"/>
      <url>/2020/02/24/bo-ke-xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="node阶段博客项目的总结"><a href="#node阶段博客项目的总结" class="headerlink" title="node阶段博客项目的总结"></a>node阶段博客项目的总结</h3><p>这个项目更大程度体现了一个网站的基本开发,主要是服务器端和客户端之间的请求与响应，更大程度偏向于node开发就是服务器端的开发,而HTML页面只是起到了渲染数据库的数据模板作用,整个html页面中的脚本js代码更多的只是做一些验证表单,体验了一个网站的基本流程前端在页面中渲染后台的数据,后台把数据从数据库取出。让我稍微了解node开发基于服务器层面的一些知识,在频繁操作数据库的增删改查之中对我的逻辑有些提升。</p><p>同时在这次项目中比较充分的体现了模块化开发,各个js文件相互独立,需要的变量与函数进行导出供其他模板使用,主入口文件都是写的一些基本配置信息,例如为整个项目配置模板引擎以及静态资源,主路由路径，错误中间件等，而使用框架express进行网站开发确实更加高效，强大的中间件以及第三方依赖包更适合模块化开发使代码与文件夹结构看起来更加清晰与干净,比如说模块化路由,一般真实项目中路由会有很多,我们需要把主路由文件分开,然后分别建立二级路由,同时把路由的事件处理函数通过模块成员导出,供主路由使用。</p><p>这个项目比较频繁的操作数据库,对用户信息以及文章信息的增删改查,还有文章集合和用户集合的联合查询依赖关系,让前台模板的数据动态生成，更深层次的理解了post请求与get请求，通常一般表单数据如果不想让别人看见都使用post请求,如果要针对的利用一些特有属性做一些特定操作就比如说将id值(该值是唯一的)作为get请求参数,这样就能指定在数据库对某一个数据进行操作,还比如说有的页面模板是同一个比如这个项目中的用户修改页面和添加用户页面,我们要判断这两个请求的不同来渲染不同的数据到同一模块中，这里就使用id值作为判断条件</p><h3 id="项目中遇到的一些问题"><a href="#项目中遇到的一些问题" class="headerlink" title="项目中遇到的一些问题"></a>项目中遇到的一些问题</h3><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><p>在做登录功能，我们会进行双重验证浏览器脚本js代码验证和node服务器端接受了数据之后的验证,主要是以防用户禁用了脚本js。再通过验证之后登陆成功之后我们要如何判断用户是否真的被服务器端所识别认识了,在登陆了之后做一些别的请求服务器端能让登录用户看到只有登陆之后才能看到的数据,而不是没有真正的将登录用户存入服务器端，因此我们借用基于express第三方包express-session将登录的用户存在session队中，响应给浏览器的时候将sessionid存入浏览器的cookie中，使浏览器和服务器在做完一次请求和响应后继续保持联系。同时我们将一些登陆用户信息存入session对象下方便做登录拦截判断,也需要存入locals中供所有模板使用该登陆用户的信息。</p><h4 id="新增用户功能"><a href="#新增用户功能" class="headerlink" title="新增用户功能"></a>新增用户功能</h4><p>新增用户的时候我们依然选择了服务器端的验证注册的信息是否符合规则,使用了第三方模块joi来做一些对请求数据的验证和判断,通过服务器端验证后才能进行下一步，引用了bcrypt第三方模块对存入数据库的用户密码进行了加密,生成随机字符串对明文密码进行加密替换了加密密码之后存入数据库中,第二次修改的时候比对加密密码即可，使用了错误中间件来处理错误情况将对象转化为json格式字符串,然后错误处理中间件解析json格式字符串。</p><p>同时我们需要巧妙地将对象转化为get请求参数的形式,先转化为数组再转化为字符串，同时也需要将get请求参数截取出来转化成字符串相反操作即可。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//let obj = {path: '/admin/user-edit', message: '密码比对失败,请输入正确密码才能修改信息', id: id};</span>    <span class="token comment" spellcheck="true">//用于拼接请求参数的数组</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//路径都是一样的,后面get请求参数不同,因此需要重新凭借path后面的请求参数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!==</span> <span class="token string">'path'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(arr);拼接好数组为下面的,然后用join方法&amp;分隔成字符串拼接到？问号后面即可</span>    <span class="token comment" spellcheck="true">//["message=密码比对失败,请输入正确密码才能修改信息","id=5e4f93fedab52110c0aa930c"]</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="删除用户功能"><a href="#删除用户功能" class="headerlink" title="删除用户功能"></a>删除用户功能</h4><p>这里删除用户利用脚本js代码与node开发合作完成,脚本js利用事件触发将需要的数据传给表单隐藏域，我了解了表单隐藏域的功能主要用于传送数据而不被用户看到该表单控件。</p><h4 id="新增文章信息"><a href="#新增文章信息" class="headerlink" title="新增文章信息"></a>新增文章信息</h4><p>表单如果涉及了文件上传，文件上传的数据是通过二进制的形式来进行数据传送的跟普通的数据不一样，我们使用formidable第三方模块来解析二进制表单数据，同时在脚本js中使用Filereder构造函数来读取文件实现预览效果，另外使用mongoose-sex-page第三方模块分页从数据库查询数据让我们对分页功能的设计更加简便化</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//1.创建解析表单实例化对象</span>    <span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formidabal<span class="token punctuation">.</span>IncomingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.配置文件上传的地址</span>    form<span class="token punctuation">.</span>uploadDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'uploads'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.保存上传文件的后缀名</span>    form<span class="token punctuation">.</span>keepExtensions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.解析表单</span>    form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> field<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> Article<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span> field<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            author<span class="token punctuation">:</span> field<span class="token punctuation">.</span>author<span class="token punctuation">,</span>            publishDate<span class="token punctuation">:</span> field<span class="token punctuation">.</span>publishDate<span class="token punctuation">,</span>            cover<span class="token punctuation">:</span> files<span class="token punctuation">.</span>cover<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span> field<span class="token punctuation">.</span>content        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//重定向回用户列表页面</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/article'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="文章评论功能"><a href="#文章评论功能" class="headerlink" title="文章评论功能"></a>文章评论功能</h4><p>评论是属于具体的一篇文章同时一般需要登陆人的用户信息,所以在设计评论集合的规则时需要关联用户及文章集合，通过登陆成功后存在locals下的用户对象来判断用户是否登陆状态再决定评论框的显示和隐藏,所以在要退出用户的时候将locals下的该对象置空。利用唯一的文章id去查询属于这个文章的评论渲染到页面</p><h3 id="学到的知识"><a href="#学到的知识" class="headerlink" title="学到的知识"></a>学到的知识</h3><ol><li>项目的开放环境和生产环境通过系统环境变量来判断,使用config第三方模块配置不同环境的配置信息，利于不同环境下代码的复用和维护</li><li>服务器的session和浏览器的cookie</li><li>joi第三方模板验证数据</li><li>bcrypt第三方模板对密码进行加密</li><li>表单隐藏域上传数据</li><li>使用formidable第三方模板解析表单上传文件二进制数据，表单entype属性，脚本中Filereader构造函数读取数据</li><li>mongoose-sex-page第三方模板的分页查询数据库</li><li>mongodb数据库集合之间的关联查询,type值为id,ref为关联集合，poluplate(关联字段)联合查询</li><li>JQ中使用serializeArray()获取所有表单控制的值及name属性和value属性的值</li></ol>]]></content>
      
      
      <categories>
          
          <category> node.js网站开发项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客管理系统前台展示</title>
      <link href="/2020/02/23/qian-tai-zhan-shi-he-yi-xie-xi-jie/"/>
      <url>/2020/02/23/qian-tai-zhan-shi-he-yi-xie-xi-jie/</url>
      
        <content type="html"><![CDATA[<p>为mongodb数据库添加权限账号,超级管理员可以操作所有的数据库,普通用户只能操作指定数据库,然后更改默认的不需要账号就可以连接数据库的服务,在连接数据库时加上账号密码连接即可</p><p>开发环境和生产环境,开发环境是指项目在开发中,项目在程序员的电脑上运行,生产环境是指项目发布到线上,在线上的环境去运行,这两者依赖的环境是不同的,我们通过系统环境变量去判断项目是在开发环境还是生产环境然后配置不同的信息，我们要是在node开发中通过procees.env来获取系统环境变量并且进行判断，可以在不同的环境中做不同的事,如果是开发环境我们可以使用morgan第三方模块来打印客户端的请求信息,帮助我们去开发</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取系统环境变量,返回值是对象里面存着所有的系统环境变量,我们选取我们想要的环境变量属性</span><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">==</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//说明当前是开发环境</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前是开发环境'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用中间件打印请求信息</span>    app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">morgan</span><span class="token punctuation">(</span><span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'当前是生产环境'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>config第三方模块</strong></p><p>该模块主要是用于设置并读取不同开发环境下的配置信息，它可以自动根据系统环境变量去判断项目的环境,然后读取不同环境下的配置信息,就比如数据库连接信息,在开发环境和生产环境中数据库连接的信息是不同,因此将此信息使用config配置并且读取,就可以省去还不通环境下去修改配置代码的时间。</p><p>一般使用config模块，需要建立一个config文件夹,里面建立三个json文件,分别填写默认环境和开发环境和生产环境的配置信息,然后在需要读取配置的信息的模块中导入config模块,使用get方法自动识别环境读取不同json文件的配置信息即可，我们拿数据库连接配置信息举例,首先在config文件夹中的开放环境配置数据库的一些信息</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"db"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"caoqiang"</span><span class="token punctuation">,</span>        <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>        <span class="token property">"port"</span><span class="token operator">:</span> <span class="token string">"27017"</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"blog"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后再连接数据库的文件中读取这些配置信息,这样就可以根据不同环境进行数据库的连接了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入config模块读取配置信息</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接数据库</span>mongoose<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'useCreateIndex'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`mongodb://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'db.user'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'db.pwd'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'db.host'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'db.name'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">{</span>useNewUrlParser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接失败'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在config模块中，我们可以将一些敏感信息存入到系统环境变量中,例如数据库的密码就不直接明文写在json文件中,这时候需要在config文件夹下建立一个custom-environment-variables.json文件,里面存取一些敏感信息,例如存取数据库的密码</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>       <span class="token property">"db"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"pwd"</span><span class="token operator">:</span> <span class="token string">"系统变量存取密码的系统环境变量名,在该环境变量名下存取数据库的密码即可"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="博客系统前台展示"><a href="#博客系统前台展示" class="headerlink" title="博客系统前台展示"></a>博客系统前台展示</h3><h4 id="添加博客前台展示页面路由"><a href="#添加博客前台展示页面路由" class="headerlink" title="添加博客前台展示页面路由"></a>添加博客前台展示页面路由</h4><p>利用模块化路由博客后台管理的路由都是admin文件夹,博客前台页面展示路由就在home文件夹,在home路由中添加一个首页页面展示路由和一个文章详情页面展示路由</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//博客前台首页展示</span>home<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./home/index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//博客前台文章详情展示</span>home<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/article'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./home/article'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="渲染文章前台页面模板"><a href="#渲染文章前台页面模板" class="headerlink" title="渲染文章前台页面模板"></a>渲染文章前台页面模板</h4><p>将文章首页和文章详情页面的模板添加到文件夹views下面的home中,同时修改模板后缀为art,在home文件夹下新建common文件夹用于存放html骨架模板和公共部分模板,修改两个模板的外链链接,将link和src里的路径也称绝对路径,请求绝对路径下的静态资源/就表示静态资源的绝对路径public文件夹。同时提取出两个页面的html骨架模板放入common文件夹下layout模板文件中,因为外链css和内容不同,在骨架模板中填一个外链css的坑和一个内容区域的坑即可,然后继承骨架模板,将两个页面的头部区域抽离出来,然后导入即可，然后将用render方法渲染模板</p><p>骨架模板:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>博客文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/css/base.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{block 'link'}}{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    {{block 'main'}}{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="渲染数据到文章首页以及分页"><a href="#渲染数据到文章首页以及分页" class="headerlink" title="渲染数据到文章首页以及分页"></a>渲染数据到文章首页以及分页</h4><p>文章首页的一些文章信息是数据库存取的所有文章信息,因此需要将数据库中的文章信息查询出来渲染到页面,这里考虑到分页查询,因此需要使用第三方模板mongoose-sex-page,使用该模板对象返回方法进行分页查询，同时页面中也需要作者的详细信息用户名等,需要联合查询polulate()</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//分页从数据库中查询所有的文章,并且联合查询出作者信息</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">pagination</span><span class="token punctuation">(</span>Article<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">'author'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>返回一个对象，对象下有page表示当前页，records查询出来的数据是数组形式，display分页器数组，pages总的页面，有这些属性值,因此将数据渲染到模板中即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 渲染数剧</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home/default.art'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        result<span class="token punctuation">:</span> result    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在模板中循环records属性就是查询出来的文章信息,注意fr和fl的类名,判断索引号来添加响应的类名,注意时间的格式使用format方法,文章的详细内容不需要全部显示需要截取字符串在页面只显示详情一部分即可,直接使用substr()方法来截取同时原文输出用replace方法将html标签全都替换为空串</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list w1100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{each result.records}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{$index % 2 <span class="token punctuation">=</span><span class="token punctuation">=</span> 0 ? <span class="token punctuation">'</span>fl<span class="token punctuation">'</span> : <span class="token punctuation">'</span>fr<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/article?id<span class="token punctuation">=</span>{{@$value._id}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{$value.cover}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article-title<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/article?id<span class="token punctuation">=</span>{{@$value._id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{$value.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{$value.author.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{format($value.publishDate, 'yyyy-mm-dd')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brief<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 文章内容部分需要截取字符串不能全文显示在页面中,同时需要把所有的html标签替换成空串,还需要原文输出,以免出现空格之类的 --></span>                    {{@$value.content.replace(/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>[^</span><span class="token punctuation">></span></span>]+>/g,'').substr(0, 100) + '...'}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        {{/each}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>分页器设置,在页面中的分页器通过循环display属性就会显示有多少个分页器,给每个分页器链接跳转到文章首页带上page参数为当前的value值,然后在首页路由接收该page参数填入分页查询的page()方法中,判断当前页数与第一页和总的页数的关系来控制上一页和下一页的显示,判断每个分页器的value值是否与当前页一致来添加active选中状态的类名</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 分页开始 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page w1100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{if result.page > 1}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/?page<span class="token punctuation">=</span>{{result.page - 1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>上一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        {{/if}}        {{each result.display}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/?page<span class="token punctuation">=</span>{{$value}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{$value <span class="token punctuation">=</span><span class="token punctuation">=</span> result.page ? <span class="token punctuation">'</span>active<span class="token punctuation">'</span> : <span class="token punctuation">'</span><span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{$value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        {{/each}}        {{if result.page &lt; result.pages}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/home/?page<span class="token punctuation">=</span>{{result.page - 0 + 1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下一页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        {{/if}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 分页结束 --></span></code></pre><p>这样首页的模板渲染就完成了</p><h4 id="渲染数据到文章详情页"><a href="#渲染数据到文章详情页" class="headerlink" title="渲染数据到文章详情页"></a>渲染数据到文章详情页</h4><p>在文章首页的文章图片和文章标题的超链接跳转到文章详情页面带上自身的id参数,在文章详情页面路由下获取参数的id值,通过id值联合查询到文章和作者的详细信息,将该数据渲染到文章详情页面即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取传过来的id参数</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id    <span class="token comment" spellcheck="true">//根据id查询出文章信息,注意联合查询作者信息</span>    <span class="token keyword">let</span> article <span class="token operator">=</span> <span class="token keyword">await</span> Article<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span> id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">'author'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home/article.art'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        article<span class="token punctuation">:</span> article    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h3><ol><li><p>评论信息不是存在文章集合当中,需要创建评论集合</p><p>在model文件夹建立comment.js文件用于创建评论集合,创建集合规则时判断集合的字段及要求</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建评论集合规则</span><span class="token keyword">const</span> commentSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//评论属于具体一篇文章的,关联文章集合,类型为id</span>    aid<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span>        ref<span class="token punctuation">:</span> <span class="token string">'Article'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//评论里有登录用户的一些信息,关联用户集合,类型id</span>    uid<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span>        ref<span class="token punctuation">:</span> <span class="token string">'User'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//评论发布时间</span>    time<span class="token punctuation">:</span> Date<span class="token punctuation">,</span>    content<span class="token punctuation">:</span> String<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><p>   创造好集合规则后创建评论集合构造函数,将其作为模块成员导入供其他模块使用该构造函数</p><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">//创建文章评论集合构造函数</span>   <span class="token keyword">const</span> Comment <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Comment'</span><span class="token punctuation">,</span> commontSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将文章评论集合构造函数通过模块成员导出</span>   module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>       Comment<span class="token punctuation">:</span> Comment   <span class="token punctuation">}</span></code></pre><p>   <strong>修改登录功能</strong>，在登录功能路由中,在登陆成功后,判断用户的角色是超级管理员还是普通用户,如果是普通用户将页面跳转到博客前台首页,如果是超级管理员跳转到博客管理页面</p><pre class=" language-js"><code class="language-js">   <span class="token comment" spellcheck="true">//登陆成功之后判断用户的角色权限,如果是普通用户跳转到博客首页,如果是超级管理员才能进入博客后台管理页面</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>role <span class="token operator">==</span> <span class="token string">"normal"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">//普通用户</span>                   res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/home/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true">//超级管理员用户</span>                   res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span></code></pre><p>   同时修改登录拦截,在登陆成功后将用户的角色信息存入请求对象的session对象中,在登陆拦截的时候再加一层判断,如果session对象中的role属性是普通用户,就跳转到博客首页,同时阻止程序向下进行,因为登录拦截是拦截所有/admin请求路径,如果请求管理页面路径就会调用该拦截中间进行登录判断和角色信息判断</p><pre class=" language-js"><code class="language-js">               <span class="token comment" spellcheck="true">//将用户的角色信息存在session中</span>               req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>role <span class="token operator">=</span> user<span class="token punctuation">.</span>role<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果登录了判断角色进入不同的页面</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>role <span class="token operator">==</span> <span class="token string">'normal'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//普通用户只能浏览博客前台页面,阻止程序向下进行</span>               <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/home/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span></code></pre><ol start="2"><li><p>在评论时需要判断用户是否登录,只有登录了才能将评论信息提交,在我们登录成功的时候我们在locals属性下存取了userInfo的值为登录的用户信息对象,这个变量userInfo变量所有模板都可以访问到,因此我们在文章详情模板的评论区域做判断,如果有这个变量代表登录就显示评论区域,如果没有该值就提醒用户登录之后进行评论,同时在用户退出没有登陆的时候将userInfo的值变成空</p><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//退出登陆时删除locals下的userInfo属性</span>        req<span class="token punctuation">.</span>app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><pre class=" language-html"><code class="language-html">                    {{if userInfo}}                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>评论<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comment-form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                    {{else}}                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>请先登录再进行评论!!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    {{/if}}</code></pre></li><li><p>添加评论功能的路由,给form表单设置提交地址/home/comment设置提交方式为post,同时设置两个表单隐藏域,一个存取name为uid的可以直接使用userInfo变量下的_id赋值给该表单value，一个存取name为aid的,在文章详情页面有查询出来文章信息数据,将文章id渲染到模板该表单value值即可</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 存取登录用户的id --></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{@userInfo._id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token comment" spellcheck="true">&lt;!-- 存取当前文章的id --></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aid<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{@article._id}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li><li><p>在评论路由中接收客户端传来的评论信息</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取传过来的请求参数</span>    <span class="token keyword">const</span><span class="token punctuation">{</span>content<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> aid<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body</code></pre></li><li><p>将评论信息存入评论集合中,需要导入评论集合构造函数，同时在导入数据的时候记得带上time字段</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//将评论信息存储到评论集合中</span>    <span class="token keyword">await</span> Comment<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        content<span class="token punctuation">:</span> content<span class="token punctuation">,</span>        uid<span class="token punctuation">:</span> uid<span class="token punctuation">,</span>        aid<span class="token punctuation">:</span> aid<span class="token punctuation">,</span>        time<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>将页面重定向回文章详情页面，带上文章的id属性即aid值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//重定向为文章详情页,带上文章id</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/home/article?id='</span> <span class="token operator">+</span> aid<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>在文章详情页中的路由导入评论集合构造函数,根据aid在评论集合中查询数据评论中还需要登陆用户的一些信息要联合查询uid,aid就是传过来的get参数中的文章id,因为一篇文章会有多个评论,这是根据aid查询出来的值不是唯一的,所以要使用find()方法查询,查询出来后将数据添加到模板中,然后渲染模板</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//这里使用find方法查询,因为属于一篇文章的评论有多条</span>    <span class="token keyword">let</span> comment <span class="token operator">=</span> <span class="token keyword">await</span> Comment<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>aid<span class="token punctuation">:</span> id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'home/article.art'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        article<span class="token punctuation">:</span> article<span class="token punctuation">,</span>        comment<span class="token punctuation">:</span> comment    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">{{each comment}}                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>article-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{$value.uid.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{format($value.time, 'yyyy-mm-dd')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{$value.uid.email}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comment-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                {{$value.content}}                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        {{/each}}</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> node.js网站开发项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户修改删除和文章管理增删改</title>
      <link href="/2020/02/22/duo-ren-bo-ke-03/"/>
      <url>/2020/02/22/duo-ren-bo-ke-03/</url>
      
        <content type="html"><![CDATA[<h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><ol><li><p>在用户列表页面点击操作修改时,跳转链接带上get请求参数id,因为修改用户页面和添加用户页面是同一模板,因此要通过id来判断,如果get请求参数中有id值就是用户修改页面,查询到该id代表用户信息,将用户信息显示到页面中给每个表单空间的value值填上相应的数据即可,如果get请求参数中没有id值,就是新增用户页面,不需要用户数据,将两者的form表单域地址和添加修改按钮要随着动态是否有id值来变化，因此在不同渲染数据中,加上相应的link和button数据渲染到对应的页面</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-container<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{link}}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>un<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{user &amp;&amp; user.username}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入邮箱地址<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>em<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{user &amp;&amp; user.email}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>角色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;option value="normal" {{user &amp;&amp; user.role == 'normal' ? 'selected' : ''}}>普通用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        &lt;option value="admin" {{user &amp;&amp; user.role == 'admin' ? 'selected' : ''}}>超级管理员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>状态<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        &lt;option value="0" {{user &amp;&amp; user.state == 0 ? 'selected' : ''}}>启用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        &lt;option value="1" {{user &amp;&amp; user.role == 1 ? 'selected' : ''}}>禁用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>buttons<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{button}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre></li></ol><pre class=" language-js"><code class="language-js">   <span class="token keyword">let</span> <span class="token punctuation">{</span>message<span class="token punctuation">,</span> id<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//判断是否get参数中有id属性</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//有id是用户修改页面</span>           <span class="token comment" spellcheck="true">//根据用户id查找用户</span>           <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span> id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//将用户信息渲染到修改信息页面中</span>           res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/user-edit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>               message<span class="token punctuation">:</span> message<span class="token punctuation">,</span>               user<span class="token punctuation">:</span> user<span class="token punctuation">,</span>               link<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/admin/user-modify?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//修改页面的表单数据提交地址为user-modify</span>               button<span class="token punctuation">:</span> <span class="token string">'修改'</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//用户添加页面</span>           res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/user-edit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>               message<span class="token punctuation">:</span> message<span class="token punctuation">,</span>               link<span class="token punctuation">:</span> <span class="token string">'/admin/user-edit'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//新增用户页面的表单数据提交地址为user-edit</span>               button<span class="token punctuation">:</span> <span class="token string">'添加'</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span></code></pre><p>   在渲染模板时,用户修改页面应该显示用户id的标题,而新增用户页面没有,通过判断两个页面的button值来让该id标题显示或隐藏</p><pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">display: </span><span class="token punctuation">{</span><span class="token punctuation">{</span>button == <span class="token string">'修改'</span> ? <span class="token string">'block'</span> <span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{@user &amp;&amp; user._id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span></code></pre><ol start="2"><li><p>点击修改按钮数据提交地址还要传入用户的id值,修改页面的表单数据提交地址为link数据,在link数据后带上用户的id值</p><pre class=" language-js"><code class="language-js"> link<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/admin/user-modify?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span></code></pre></li><li><p>建立post请求用户修改信息功能路由,建立/user-modify修改功能的路由,并导入到admin主路由文件中</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//实现post请求用户修改功能</span>admin<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user-modify'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./admin/user-modify'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>接收修改页面post请求参数和get请求参数id</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//用户的请求参数</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> role<span class="token punctuation">,</span> state<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用户的get请求参数id</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre></li><li><p>根据传过来的id值查询用户信息,将用户修改页面填写的密码与数据库中查询到用户的密码进行比对,用户修改页面填写的密码就是post请求参数中的password,通过get参数id查询到的用户信息中的密码是加密后的密码,因此需要引入第三方模块bcrypt，使用compare()方法进行密码比对,返回的是布尔值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过id查找出用户信息</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span> id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将用户输入的密码与数据库查询出来的密码进行比对,返回布尔值</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>比对成功后,通过id查询条件将用户修改的信息更新到数据库中,但是用户输入的密码不用更新,然后重定向回用户列表页面即可</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// res.send('密码比对成功')</span>        <span class="token comment" spellcheck="true">//将用户信息更新到数据库中,不修改密码</span>         <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span> id<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            username<span class="token punctuation">:</span> username<span class="token punctuation">,</span>            email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>            role<span class="token punctuation">:</span> role<span class="token punctuation">,</span>            state<span class="token punctuation">:</span> state        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//重定向回用户列表页</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>比对不成功,调用错误处理中间件,使用next传递错误信息,需要带上id值因为原来的页面get参数是由id值需要渲染页面数据的，修改错误处理中间件接收到的对象格式,因为对象中只有path属性是固定的都是用户编辑模板,其他值都是path后面get请求参数不固定,因此将接收过来对象予以改造,将对象里的属性和属性值变为get参数形式属性=属性值这样的形式添加到新数组中,然后将新数组通过join方法&amp;分隔成字符串拼接在重定向path地址?后面即可,这样重定向传过来的get参数就是动态的了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//触发错误处理中间件,重定向会用户修改页面</span>        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/admin/user-edit'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'密码比对失败,请输入正确密码才能修改信息'</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> id<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">next</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>   let result = JSON.parse(err);<br>       //用于拼接请求参数的数组<br>       let arr = [];<br>       //路径都是一样的,后面get请求参数不同,因此需要重新拼接path后面的请求参数<br>       for (let k in result) {<br>           if (k !== ‘path’) {<br>               arr.push(k + ‘=’ + result[k]);<br>           }<br>       }<br>       // console.log(arr);拼接好数组为下面的,然后用join方法&amp;分隔成字符串拼接到？后面即可<br>       //[“message=密码比对失败,请输入正确密码才能修改信息”,”id=5e4f93fedab52110c0aa930c”]<br>       return res.redirect(<code>${result.path}?${arr.join(&#39;&amp;&#39;)}</code>);</p><pre><code>### 删除用户在这之前先了解一下什么是表单隐藏域隐藏域在页面中对于用户是不可见的，在表单插入中隐藏域的目的在于收集和发送信息，以利于被处理表单的程序所使用注：隐藏只是在网页页面上不显示输入框，但是虽然隐藏了，还是具有form传值功能。一般用来传值，而不必让用户看到。基本语法：```html&lt;input type=&quot;hidden&quot; name=&quot;field_name&quot; value=&quot;value&quot; /&gt;</code></pre><p>实际上在点击删除链接时,会弹出一个确认删除框,该删除框也是form表单形式的</p><ul><li><p>所以第一步在弹出框表单中增加一个表单隐藏域,用于来传用户的id值</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userID<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span></code></pre></li><li><p>在用户信息展示列表模板中,给每个删除超链接添加一个自定义id属性,为本身用户信息的id值</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"glyphicon glyphicon-remove del"</span> data<span class="token operator">-</span>toggle<span class="token operator">=</span><span class="token string">"modal"</span> data<span class="token operator">-</span>target<span class="token operator">=</span><span class="token string">".confirm-modal"</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"{{@$value._id}}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span></code></pre></li><li><p>在点击超链接的时候,将删除超链接的自定义id属性值赋值给表单隐藏域的value值,属于客户端脚本代码写在模板中即可</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span><span class="token punctuation">{</span>block <span class="token string">'script'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment" spellcheck="true">//点击删除链接将自定义的id属性值传给表单隐藏域的value值</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.del'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'data-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#userID'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">/</span>block<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>然后给该表单添加数据提交地址提交方式直接是get请求,让表单隐藏域传过来的id值直接显示在url中,创建用户删除路由</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>form <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"modal-content"</span> method<span class="token operator">=</span><span class="token string">"GET"</span> action<span class="token operator">=</span><span class="token string">"/admin/user-remove"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//实现用户删除功能路由</span>admin<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user-remove'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./admin/user-remove'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>获取传过来get参数id值,根据该id查询数据库中数据删除掉</p><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">//获取get请求参数id值</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将该id代表的用户信息在数据中删除</span>    <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOneAndDelete</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span> id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重定向回用户列表页面</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>重定向回用户列表页面</p></li></ul><h3 id="文章管理"><a href="#文章管理" class="headerlink" title="文章管理"></a>文章管理</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>添加路由渲染文章管理的页面,并且在侧边栏修改链接,并给文章管理页面和用户管理页面设置一个表示来判断是否选中状态</p><h4 id="创建文章集合"><a href="#创建文章集合" class="headerlink" title="创建文章集合"></a>创建文章集合</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> articleSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        minlength<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>        maxlength<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>        required<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">'请输入文章标题'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">.</span>Types<span class="token punctuation">.</span>ObjectId<span class="token punctuation">,</span>        ref<span class="token punctuation">:</span> <span class="token string">'User'</span><span class="token punctuation">,</span>        required<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    publishDate<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Date<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    cover<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> String<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建文章集合</span><span class="token keyword">const</span> Article <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Article'</span><span class="token punctuation">,</span> articleSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="创建添加文章路由"><a href="#创建添加文章路由" class="headerlink" title="创建添加文章路由"></a>创建添加文章路由</h4><p>点击文件列表页的发布新文章按钮,将链接跳转到文章编辑页面,添加文章post请求路由指定表单的数据提交地址请求方式,给每个表单控件加上name属性,因为涉及到文件上传,要修改表单默认的entype,要将表单的上传的文件数据编码变成二进制上传到服务器端</p><pre class=" language-html"><code class="language-html">//实现文章添加功能路由admin.post('/article-add', require('./admin/article-add'))<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-container<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/article-add<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h4 id="文章添加功能"><a href="#文章添加功能" class="headerlink" title="文章添加功能"></a>文章添加功能</h4><p>实现文件上传功能需要使用formidabal第三方模块来解析表单数据</p><p>使用formidabal来解析表单传过来的数据,需要以下几步</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入formidabal表单数据解析第三方模块</span><span class="token keyword">const</span> formidabal <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'formidable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1.创建解析表单实例化对象</span>    <span class="token keyword">const</span> form <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">formidabal<span class="token punctuation">.</span>IncomingForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.配置文件上传的地址,写绝对路径</span>    form<span class="token punctuation">.</span>uploadDir <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">,</span> <span class="token string">'uploads'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.保存上传文件的后缀名</span>    form<span class="token punctuation">.</span>keepExtensions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.解析表单</span>    form<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> field<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.对象 err解析表单时候的错误信息,有错误信息该对象不为空,没有错误信息该对象为空</span>        <span class="token comment" spellcheck="true">//2.field 对象类型 里面存着普通数据,即除了文件上传之外传过来的请求数据</span>        <span class="token comment" spellcheck="true">//3.files 对象类型 存了一些关于上传的文件的一些信息 如文件的路径修改时间类型文件原名等</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>实现图片预览功能,在html页面脚本中完成该功能，使用new FileReader()创建读取文件实例化对象,在监听事件文件选取完成后,创建文件读取对象,调用实例化对象下的readAsDataURL()方法通过监听onload方法读取文件结果,将结果赋值给img下的src属性即可将图片显示在页面上</p><pre class=" language-js"><code class="language-js">file<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建文件读取对象</span>            <span class="token keyword">let</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//this.files表示选取的文件列表因为可以选取多个文件,这里只要求选取一张图片文件即可</span>            <span class="token comment" spellcheck="true">// console.log(this.files);</span>            <span class="token comment" spellcheck="true">//读取文件readAsDataURL()是一个异步方法,需要使用回调才能拿到结果</span>            reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//监听文件读取对象的onload事件,来获取文件读取的结果,reader.result结果会是图片编码</span>            reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//将图片显示在页面中</span>                preview<span class="token punctuation">.</span>src <span class="token operator">=</span> reader<span class="token punctuation">.</span>result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>使用formidabal第三方模块来接收传过来的post数据,将文章信息存入数据库中,但是在上传文件时的files里面的cover属性中的path地址是相对于服务器端的,数据库中cover应该存取相对于浏览器的绝对地址,即浏览器访问静态资源的地址,我们将上传的文件存在静态资源文件夹public中,因此数据库中的cover应该存取public之后的地址,因此需要截取files里面地址信息存到数据库中,然后重定向回文章列表页</p><pre class=" language-js"><code class="language-js"><span class="token keyword">await</span> Article<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span> field<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            author<span class="token punctuation">:</span> field<span class="token punctuation">.</span>author<span class="token punctuation">,</span>            publishDate<span class="token punctuation">:</span> field<span class="token punctuation">.</span>publishDate<span class="token punctuation">,</span>            cover<span class="token punctuation">:</span> files<span class="token punctuation">.</span>cover<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            content<span class="token punctuation">:</span> field<span class="token punctuation">.</span>content        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//重定向回用户列表页面</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/article'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="文章列表页的分页功能"><a href="#文章列表页的分页功能" class="headerlink" title="文章列表页的分页功能"></a>文章列表页的分页功能</h4><p>使用mongoose-sex-page第三方模块</p><p>引用该模块会返回一个方法,该方法接收一个用户集合构造函数作为参数,即你想要查询什么集合里的数据,就可以传该集合构造函数,然后就可以在后面链式调用page()、size()、diaplay()、等方法,查询你需要的数据,最后调用exec()表情向数据库发送查询请求,page()接收当前页数,size()传入一页显示多少个数据,display()传入页面中有几个分页器</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//page()表示当前页,size()每一页显示的数据,display()页面中分页器的数目,exec()表示向数据库发送查询请求</span>    <span class="token keyword">let</span> articles <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">pagination</span><span class="token punctuation">(</span>Article<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span><span class="token string">'author'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用该方法的返回值,返回一个对象,对象下面有如下属性,page:当前页,size:每一页显示的数据,total:总的数据,records:存取所有查询出来的数据数组,pages:总共分多少页,display:页面显示的页数数组，将这些数据渲染到文章列表页模板中,同时给每个分页器的超链接跳转到文章列表页路由并且传入page参数,将该get请求参数的值作为page()方法的参数就可以动态的显示页数了,同时判断一下上一页和下一页,在当前页数为第一页时,上一页的按钮消失,在当前页数为最后一页时,下一页的按钮消失</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 分页 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagination<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                {{if articles.page > 1}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/article/?page<span class="token punctuation">=</span>{{articles.page - 1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity" title="&laquo;">&amp;laquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                {{/if}}                {{each articles.display}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/article/?page<span class="token punctuation">=</span>{{$value}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{$value}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                {{/each}}                {{if articles.page &lt; articles.pages}}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/article/?page<span class="token punctuation">=</span>{{articles.page - 0 + 1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                {{/if}}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- /分页 --></span></code></pre><p>文章信息修改和文章删除同用户的操作一样,添加对应的文章修改功能和删除功能路由即可照葫芦画瓢,只是要注意在修改文章的上传数据的时候同样要使用formidable第三方模块来解析数据</p>]]></content>
      
      
      <categories>
          
          <category> node.js网站开发项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新增用户和用户列表展示分页功能</title>
      <link href="/2020/02/21/xin-zeng-yong-hu/"/>
      <url>/2020/02/21/xin-zeng-yong-hu/</url>
      
        <content type="html"><![CDATA[<h3 id="新增用户功能"><a href="#新增用户功能" class="headerlink" title="新增用户功能"></a>新增用户功能</h3><ol><li><p>在用户列表页面给新增用户按钮添加链接,跳转到用户编辑页面</p></li><li><p>新增get请求路由用户编辑页面/user-edit路由,渲染用户编辑页面</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//呈现用户编辑页路由</span>admin<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user-edit'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./admin/user-edit'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/user-edit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>给该页面表单添加post方式,添加post请求地址/user-edit,给每个表单控件添加name属性,注意角色和状态value值要补充完整</p></li><li><p>验证用户的注册的用户名邮箱等信息是否合法,可以直接在客户端验证,也可以等提交后,接受了所有的请求参数,验证请求参数是否满足格式,新建一个用户验证请求参数的格式规则,这里选用服务器端验证,再点击提交后,获取了请求参数,请求参数是以对象形式存在,我们要验证对象的属性值是否符合规则,这里用第三方模块joi对对象进行验证,首先定义验证规则,验证规则是个对象,对象的属性与你需要验证的那个对象属性一致</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义验证对象规则</span>    <span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'用户名不符合验证规则'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        email<span class="token punctuation">:</span> joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'邮箱地址不符合验证规则'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span> joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token regex">/^[a-zA-Z0-9_-]{6,16}$/</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'密码不符合验证规则'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        role<span class="token punctuation">:</span> joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'normal'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        state<span class="token punctuation">:</span> joi<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>定义好了验证规则,使用validata()方法进行验证,该方法第一个参数为需要验证的对象,第二个参数为验证规则,返回的是一个promise对象,用await来变成同步的形式,需要使用try{}catch(err){}来抛出错误进行错误处理,遇到错误信息阻止程序向下运行,将错误信息通过get请求参数的形式重定向会用户编辑页面,然后获取get请求参数将错误信息数据,渲染到模板中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/admin/user-edit?message=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/user-edit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> message    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>验证完成后,通过邮箱去数据库查询是否有同样的邮箱的用户信息,如果有就返回客户端错误,改邮箱已经被注册</p><p>根据唯一的邮箱地址用用户构造函数的findOne()方法查找出这个对象并获取返回值,如果对象不为空说明查找到了即代表邮箱已经被占用了,那么阻止程序向下执行,将错误信息通过get请求参数的形式重定向会用户编辑页面,然后获取get请求参数将错误信息数据,渲染到模板中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/admin/user-edit?message=邮箱地址被占用`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span>message<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/user-edit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> message    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>如果邮箱没有被注册,给请求参数中密码加密处理后,然后将该对象(即请求参数)用户信息添加到数据库中</p><p>对象为空程序继续执行,说明没有找到该邮箱的用户信息,可以进行添加用户到数据库的操作,在这之前需要对添加的密码进行加密处理,引入bcrypt模块,使用gensalt()方法生成随机字符串,再用hash()方法将请求参数对象中的密码进行加密,返回一个新的加密后的密码,将该密码赋值给请求参数对象下的password属性,这样密码就进行了加密处理,再把对象添加到数据库中</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//邮箱没有被占用,对密码进行加密</span>    <span class="token keyword">let</span> salt <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">genSalt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//替换加密密码</span>    req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将用户添加到数据库中</span>    <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>最后重定向回用户列表页即可,在用户页面显示数据库中用户的信息</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//重定向会用户列表页</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>进行模块调整代码优化,请求参数对象验证这一块的代码属于对用户的数据处理,应该放在model文件下user模块中,将改代码段剪切到user模块中，定义一个函数来装,return用validata()方法验证好的promise对象,然后再将该函数导出,在用户编辑功能模块中导入该函数,调用即可。错误处理代码优化,错误处理在express框架中应该使用错误处理中间件来执行错误时候的代码,因此在验证信息时的错误应该通过next()方法传出,交给app.use来处理</p></li><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//next里面只能传入字符串用JSON.stingify转化为字符串形式,调用错误中间件,阻止程序向下执行</span>        <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/admin/user-edit'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/admin/user-edit'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'邮箱地址被占用'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//错误处理中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//err接收就是错误处理next传过来的参数传过来的是字符串,转化为对象</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?message=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ol><h3 id="用户信息列表展示以及分页功能"><a href="#用户信息列表展示以及分页功能" class="headerlink" title="用户信息列表展示以及分页功能"></a>用户信息列表展示以及分页功能</h3><h4 id="用户展示信息展示"><a href="#用户展示信息展示" class="headerlink" title="用户展示信息展示"></a>用户展示信息展示</h4><p>在呈现用户列表功能路由中从数据库中使用find()方法查询到所有用户信息,将数据添加到render()方法中,在模板中用循环添加数据,有几个数据就有几行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> user<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html">                    {{each user}}                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{@$value._id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.email}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.role == 'admin' ? '超级管理员' : '普通用户'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{$value.state == 0 ? '启用' : '禁用'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user-edit.html<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-edit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-remove<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">data-target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.confirm-modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>                    {{/each}}</code></pre><h4 id="分页设置"><a href="#分页设置" class="headerlink" title="分页设置"></a>分页设置</h4><p>如果数据库中的数据过多,让每一天只显示特定的数额,这里规定每一页只显示十个数据,然后通过点击分页器或者上一页下一页来传递get请求参数page实现跳转页面更换页面数据的功能，需要知道当前页和总的页数</p><p>当前页数:用户通过get参数传递过来,点击上一页下一页或者点击页数传递过来的,设置为请求get参数对象下的page属性</p><p>总页数: 数据库总的用户数 / 每一页显示的数据 然后再向上取整</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//当前页通过get参数传过来</span>    <span class="token keyword">let</span> page <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每页显示的数据</span>    <span class="token keyword">let</span> pagedata <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//总页数 = 从数据库查询的总数据 / 10 再向上取整</span>    <span class="token comment" spellcheck="true">//从数据库查询用户的总数</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">countDocuments</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//总页数</span>    <span class="token keyword">let</span> total <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>count <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后查询数据,通过limit()和skin()方法,limit限制查询多少条数据,每次只能差十个数据,skin方法为跳过多少条数据(即查数据的开始位置)，假设page传递的当前页数为2,应该显示第二页的数据即10-19得数据,那么就要跳过前十条数据0-9,从第十条开始查,所以开始的位置为start,然后开始查询，并将total和page数据添加到render()方法中,在模板中动态的通过total数据来生成有多少个分页</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//查询的数据,每次只查十个数据,渲染到页面,当前页的get参数page - 1 再乘以10就是每一页开始起始数据</span>    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> user<span class="token punctuation">,</span>        page<span class="token punctuation">:</span> page<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//控制上一页下一页的数据</span>        total<span class="token punctuation">:</span> total<span class="token comment" spellcheck="true">//控制分页器的总数</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>给每个分页设置链接跳转的时候带上get参数page,点击上一页跳转的链接为当前页数 - 1，下一页跳转的页数为当前页数 + 1(这里需要做隐式转化避免拼串了),然后在设置条件判断如果下一页的页数超过了总数total就让下一页按钮消失,否则就显示能继续点,如果上一页的页数超过了1就让上一页按钮消失,利用display属性</p><pre class=" language-html"><code class="language-html">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> &lt;<span class="token number">%</span>= page - <span class="token number">1</span> &lt; <span class="token number">1</span> ? <span class="token string">'none'</span> <span class="token punctuation">:</span> <span class="token string">'inline'</span><span class="token number">%</span>></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/user?page<span class="token punctuation">=</span>{{page - 1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity" title="&laquo;">&amp;laquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                &lt;% for(var i = 1; i &lt;= total; i++) { %>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/user?page<span class="token punctuation">=</span>&lt;%<span class="token punctuation">=</span>i %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%=i %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> &lt;<span class="token number">%</span>= page - <span class="token number">0</span> + <span class="token number">1</span> > total ? <span class="token string">'none'</span> <span class="token punctuation">:</span> <span class="token string">'inline'</span><span class="token number">%</span>></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/admin/user?page<span class="token punctuation">=</span>{{page - 0 + 1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node.js网站开发项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多人博客项目前期准备登录和退出功能</title>
      <link href="/2020/02/19/duo-ren-bo-ke-xiang-mu-deng-lu-ji-tui-chu-gong-neng/"/>
      <url>/2020/02/19/duo-ren-bo-ke-xiang-mu-deng-lu-ji-tui-chu-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>多人博客管理页面，分为博客前台内容即博客文章列表的展示和文章详细，博客后台内容即博客管理页面,登陆页面，用户管理和文章管理</p><h3 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h3><ol><li><p>文件夹准备工作</p><ul><li>pubilc 静态资源文件夹</li><li>model 数据库操作文件夹</li><li>route 路由文件夹</li><li>views 模板文件夹</li></ul></li><li><p>生成项目描述及依赖包详情文件package.json</p></li><li><p>下载项目所需依赖包</p><pre><code>npm i express mongoose art-template express-art-tamplate</code></pre></li><li><p>使用express创建网站服务器</p></li><li><p>构建模块化路由及文章列表展示部分路由和用户管理路由，两个大方面的主路由地址</p><ul><li>home.js 博客文章展示路由</li><li>admin.js 博客管理路由</li></ul></li><li><p>构建页面模块</p><p>在模板中的静态资源外链文件写相对路径都是相对于浏览器地址而言的(因为是由浏览器解析的),因此所有外链文件应该写绝对路径而不是相对路径    /表示绝对路径</p><p>将模版公共部分(头部和侧边栏)抽离到common文件夹中用include引入到模板中,html骨架也抽离出来到common文件夹,用extend继承block填充</p></li></ol><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><h4 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h4><ol><li><p>登录时输入用户邮箱和密码,去数据库查找是否有该邮箱和密码,因此需要连接数据库,并创建用户集合</p></li><li><p>用户集合规则根据用户页面来设计</p><ul><li>username 用户名  必填字段 规定最大最小长度</li><li>email 邮箱 必填字段 作为登录的唯一凭证值在数据库中是唯一的 设置unique</li><li>password 密码 必填</li><li>role 角色 ‘admin’为超级管理员 ‘normal’ 普通用户</li><li>state 状态 如果是0表示启用状态 如果是1表示禁用状态</li></ul></li><li><p>给登陆表单添加提交地址,以及请求方式post,和name属性</p></li><li><p>点击提交后,客户端先判断用户是否填写了邮箱和地址，有一项没有填就阻止程序向下运行,给出错误信息，jq中获取表单中所有表单控件的方法serializeArray(),该方法返回的是一个数组,数组里面存着对象有几个表单控件就有几个对象形式是{name: ‘eamil’, value: ‘123312@qq.com’},我们想要变成这样的{eamil: <a href="mailto:123312@qq.com">123312@qq.com</a>},因此我们需要遍历数组并重新定义一个空对象,将每一个数组元素的name属性值变为对象的属性,value属性变为属性值</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//获取登录表单值方法</span><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个空对象</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用serializeArray()方法获取所有表单控件值返回一个对象</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">serializeArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将数组元素name属性值作为obj的属性,value属性值作为属性值</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>item<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着获取返回值判断邮箱或者密码的长度是否等于0，等于零就弹出警告框并return</p></li><li><p>为防止客户端禁止运行脚本,在提交数据后服务端也需要判断用户是否填写了邮箱和地址，有一项没填就给客户端做出错误响应,阻止程序运行</p><p>根据post请求参数,判断参数的长度是否为0,如果为0,就设置400状态码及客户端出错响应一个error页面给客户端,并阻止程序向下运行</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">//接受请求参数</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>email<span class="token punctuation">,</span> password<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//防止禁止浏览器脚本,服务端二次验证,如果邮箱或密码的长度为零,跳转到错误页面,阻止程序向下运行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> password <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/error'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">'错误警告:邮箱地址或密码错误'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>服务器端判断完之后,根据填的邮箱地址去匹配用户的信息，如果没有找到该邮箱地址，响应错误</p><p>客户端或者服务器端验证通过时,我们获取这个邮箱地址,根据这个邮箱地址去数据库查询对应的用户信息,如果用户信息为空则返回一个空对象那么就响应错误页面阻止程序向下运行</p></li><li><p>找到了邮箱地址后将数据库的信息(正确邮箱对应的用户是唯一值)对用户的密码进行比对</p><p>如果返回的用户信息对象不为空,比对密码，这里比对的是加密的密码，使用第三方模块bcrypt中的compare方法,即你登陆的密码与查询到的用户的密码进行比对，返回的是一个布尔值,比对成功返回true,不成则是false</p></li><li><p>比对成功就登陆成功</p><p>为true就登陆成功,登陆成功后先引用express-session模块进行cookie的全局配置,拦截所有请求调用session方法进行配置,这样请求对象下就有一个session属性的对象,如果用户登陆成功,就在请求对象下的session属性下存取用户的用户名,然后在去请求其他页面看这个数据能否在其他模板中显示,登陆成功之后还要将用户的信息存储到locals属性下供所有模板头部使用这个变量,最后重定向回用户列表页</p></li><li><p>比对失败登陆失败，响应error页面并阻止程序向下运行</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">await</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>email<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果user不为空对象,说明查找出来了该信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对加密密码进行比较compare()方法第一个参数明文密码,第二个参数加密的密码,返回布尔值</span>        <span class="token comment" spellcheck="true">//true为匹配成功,false为匹配失败</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> user<span class="token punctuation">.</span>password<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//比对密码成功就登陆成功</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//登陆成功即可访问该请求对象下存储的用户名</span>            req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将用户信息储存在local对象下攻所有模板使用</span>            <span class="token comment" spellcheck="true">//这里不用引用app.js，请求对象下的app属性就是我们创建的那个服务器对象</span>            req<span class="token punctuation">.</span>app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> user<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//登陆成功之后重定向</span>            res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//密码比对失败</span>            res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/error'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">'错误警告:邮箱地址或密码错误'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//user为空对象说明没有查找出来</span>        res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'admin/error'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>msg<span class="token punctuation">:</span> <span class="token string">'错误警告:邮箱地址或密码错误'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><h4 id="数据库密码加密操作"><a href="#数据库密码加密操作" class="headerlink" title="数据库密码加密操作"></a>数据库密码加密操作</h4><p>使用bcrypt第三方模块进行哈希加密</p><p>bcrypt 依赖的其他环境(安装这些环境才能使用这个模块)</p><ol><li><p>python 2.x</p></li><li><p>node-gyp npm install -g node-gyp</p></li><li><p>windows-build-tools</p></li><li><p>npm install –global –production windows-build-tools</p></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> bcrypt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bcrypt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//生成随机字符串genSalt()</span>    <span class="token comment" spellcheck="true">//接受一个数值作为参数,数值越大随机字符串复杂度越大</span>    <span class="token comment" spellcheck="true">//返回生成的随机字符串,支持promise对象</span>    <span class="token keyword">const</span> salt <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">genSalt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对密码进行加密hash('明文密码','随机字符串')</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> bcrypt<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">,</span> salt<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>salt<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h4 id="退出功能"><a href="#退出功能" class="headerlink" title="退出功能"></a>退出功能</h4><p>删除客户端和服务器端的联系,即在用户点击退出登陆时，设置退出功能的路由,在该路由下删除该用户信息的session和cookies然后重定向回登陆页面即可,在用户点击退出登陆的时候a连接跳转地址为/admin/logout路由,在这个get请求的路由下设置用户退出登陆功能,使用请求对象下的session属性下的destroy()方法删除session，参数是一个回调函数,在删除session后调用该函数使用响应对象下的clearCookie()删除对应的cookie，重定向回登陆页面</p><pre class=" language-js"><code class="language-js">req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//删除cookie,connect.sid('想要删除的cookie名字')</span>        res<span class="token punctuation">.</span><span class="token function">clearCookie</span><span class="token punctuation">(</span><span class="token string">'connect.sid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重定向会登陆页面</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/login'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截"></a>登录拦截</h4><p>在用户没有登陆的情况下,除了登陆页面其他的博客管理页面均不能访问,用app.use拦截所有/admin的请求,写在路由之前不然就会先执行路由了,如果用户的访问地址不是登陆页面或者登陆成功(即session对象下没有username这个属性)那么就重定向会登陆页面不能访问其他博客管理页面,否则就是登陆状态next()走后面的中间件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">!==</span> <span class="token string">'/login'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/admin/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//放行交给下一个中间件</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>最后再将一些功能代码剪切出去写在不同js文件中即不同模块中然后导出供其他模块使用,主要是路由模块和主模块的代码，让这两部分的代码看起来更加干净</p>]]></content>
      
      
      <categories>
          
          <category> node.js网站开发项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie与session简单理解</title>
      <link href="/2020/02/19/cookies/"/>
      <url>/2020/02/19/cookies/</url>
      
        <content type="html"><![CDATA[<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>在了解这个知识之前我们首先要知道http协议中客户端与服务器端的联系,通常情况下,在客户端发送一起请求后,服务器端接收了这个请求并作出响应,那么这一次沟通算是完成了,服务器端就与客户端之间没有任何的联系了,你不认识我,我不认识你,这个就叫做http协议的无状态性</p><p>为了在请求之后,服务器能认识客户端能与客户端有一定的联系,我们可以看到网站都是在登陆之后在请求别的页面是会出现只有登录后才能访问的数据,这是因为我们在登陆时向服务器端发送了请求,服务器端在接受这个请求的时候开出了一块空间来存储这个请求,然后把这个空间编了一个特有并且唯一标识的名字id,将这个名字一起响应给客户端,这个名字会伴随客户端下一次请求一起传给服务器端,那么服务器就会根据这个id去找对应的空间里存储的信息,找到了说明你之前登陆过,那么我已经认识你了,我们之间是有联系的,你就可以访问登录之后的数据。我们可以把这个在服务器端存放请求信息看着一个房间,然后有一个特定房间号交给客户端,一个房间号只能对应一个房间,这样客户端就有唯一凭证去跟服务器端联系,下一次请求带着对应房间号去找对应即可.</p><p>这就是cookie与session的联系</p><p>cookie就是用来存放房间号的,是服务器端生成房间号并把这个房间号存到给客户端的cookie中，就是说cookie是客户端开辟的一个空间来存服务器端的给出那个房间号的也就是sessionID，房间就是session对象,是由服务器端开辟的空间，所以客户端在第一次请求服务器还没作出响应时是没有cookie的,只有服务器作出了响应cookie中才会有数据，那么下一次请求就会携带这个cookie中的数据，去服务器端看房间号找对应的房间</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/1582112565(1)%20-%20%E5%89%AF%E6%9C%AC.jpg" alt=""></p><p>上图在我没有登陆的时候,打开开发者工具找到cookie这一项可以看到是没有值,因为没有做出请求,那么在我们按下登录向服务端请求时,并且服务端做出了响应,这个时候cookies中就有值了,这个value值就是经过加密的房间号,对应唯一的那个房间即session对象</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/1582112815(1).jpg" alt=""></p><p>不难看出一般cookie都是由域名方式存在的,并且cookie都是由保留时间的,如果没有设置保留时间,在浏览器关闭的时候客户端会把这个cookie释放的，那么再去打开浏览器这个值是没有的</p><p>第二次请求就会带着这个cookie去请求了,服务器端会解析这个cookie中的房间号然后去找对应房间，找到了说明之前来过,没找到就说明不认识</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/1582113035(1).jpg" alt=""></p><p>记住以下几点</p><ol><li><p>cookie是客户端开辟的空间来存放服务器给的房间号的</p></li><li><p>请求的时候cookie会在请求头中一起传给服务器端</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/1582113485(1).jpg" alt=""></p></li><li><p>服务器会解析传过来的值提取出房间号即对应的sessionid去寻找对应的对象信息</p></li><li><p>这样一来在完成一次请求后,服务器端就认识了客户端,客户端也认识了服务器端,两者之间就有了联系</p></li><li><p>在用户退出时删除session和对应的cookie即可,那么这个cookie代表房间号就没了就进不去了,服务器就不认识了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> cookie和session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express框架初步使用</title>
      <link href="/2020/02/18/node.js05/"/>
      <url>/2020/02/18/node.js05/</url>
      
        <content type="html"><![CDATA[<h2 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h2><p>express框架提供了一套完整用于开发web网站的api，让开发者创建web服务器比原生node.js更加容易。作为第三方模块,需要用npm下载并在项目中引用,会返回一个网站服务器对象就不用再添加http系统模块来创建了,使用框架后如果没有访问了没有设置的路由,不会跳到没有此网站,而且会响应connot get 该路由地址</p><h4 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入express框架</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建网站服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//响应用send方法</span>    <span class="token comment" spellcheck="true">//1.send方法内部会检测响应内容的类型</span>    <span class="token comment" spellcheck="true">//2.send方法会自动设置http状态码</span>    <span class="token comment" spellcheck="true">//3.send方法会帮我们自动设置响应的内容类型和编码</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可以直接响应json对象</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'曹强'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'服务器创建成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>​    中间件是用来处理浏览器的请求的一些方法(就是拦截请求做一些处理再给出响应),当浏览器发送请求时候,由中间件来处理该请求，该请求可以同时被多个中间件请求,中间件分为express提供的例如get方法和post方法创建路由地址,也有开发人员写的,例如创建路由的处理函数就是由开发人员去写的,同一个请求是可以由多个中间件去处理的,不过默认从上向下一次匹配中间件,匹配成功了就会终止匹配,因此需要处理同一个请求设置不同的中间件时，需要next方法将请求传到下一个中间去处理</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//处理同一个get请求</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    req<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>app.use方法接收浏览器的所有请求不管是get还是post,因此请求匹配成功一个就不会走下一个中间件,因此该中间件写在最前面来接收所有请求,如果该中间件没有做出相应,也没有用next()将请求控制权给下一个中间件,那么浏览器就会卡住等待服务器响应</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//接受了浏览器的所有请求,不管是get还是post</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//接受了所有请求,如果没有做出响应,也没有next交给下一个请求,就会卡在这里</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是走app.use的请求'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当请求地址为/request的时候先走上一个请求再走这一个请求</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/request'</span><span class="token punctuation">,</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是走app.use路径为/request的请求'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>中间件的一些应用场景(简单应用)</p><ol><li>用户登录,在用户登陆成功之前，判断用户是否登陆成功,没有登陆成功拦截请求,成功了就next()</li><li>网站维护时,接受任何请求地址直接给出响应</li><li>404访问的资源不存在,在最后定义，前面设置的路由没有访问到,就说明没有该资源,就直接响应404</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//网站维护公告,拦截所有请求给出响应</span><span class="token comment" spellcheck="true">// app.use((req,res,next) => {</span><span class="token comment" spellcheck="true">//     res.send('网站正在维护中...');</span><span class="token comment" spellcheck="true">// })</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表示用户登陆是否成功</span>    <span class="token keyword">let</span> login <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>login<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//登陆成功走下一个中间件</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//登陆失败直接给出响应</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'请登录才能访问该页面'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//说明登陆成功</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'登陆成功,您可以访问该页面'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//404页面</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置404状态码</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'您访问的页面不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h4><p>一般在客户端发送请求时,比如读取文件或者读取数据库失败，都会有错误信息,我们需要读取错误信息，并且设置对应的解决办法，express给我们提供了错误处理中间件,分为同步处理和异步处理,同步处理,在发生错误时,直接抛出错误即<strong>throw new Error</strong>然后调用错误处理中间件读取错误设置响应,异步处理即载文件读取失败或者读取数据库失败,用next()传递错误对象参数,触发错误处理中间件读取错误对象的信息,调用了错误处理中间件并设置响应后,文件就可以在报错后正常运行</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//同步抛出错误,触发错误处理中间件</span>    <span class="token comment" spellcheck="true">// throw new Error('程序发生未知错误');</span>    <span class="token comment" spellcheck="true">//处理异步api错误需要用next()传递错误对象,来调用错误处理中间件</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./01.js'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//说明有错误用next传递错误对象调用错误处理中间件</span>            <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//错误处理中间件,默认捕捉同步信息</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//错误对象,读取错误信息就是错误对象下的message属性</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>异步api的错误信息都是通过回调函数去处理,支持promise对象的用catch可以捕获错误信息</p><p>try catch可以捕获异步函数以及其他同步代码在运行时的错误</p><p>try{可能放生错误的异步函数}catch(错误对象){next(err) 触发错误处理中间}</p><p>一般支持promise对象的都能写成异步函数形式,不支持的就需要用util这个模块中的promisify()这个方法去包装才能写成异步函数形式</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入express框架</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> promosify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>promisify<span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包装文件读取api</span><span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token function">promosify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建网站服务器</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./01.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="构建模块化路由"><a href="#构建模块化路由" class="headerlink" title="构建模块化路由"></a>构建模块化路由</h4><p>将请求不同主页面的路径交给不同的路由对象去处理，这样不同的路由对象就可以单独放在js文件中作为单独的模块导出即可,可以在主入口文件中导入,并为不同的路由对象匹配路径</p><h4 id="处理get和post请求参数"><a href="#处理get和post请求参数" class="headerlink" title="处理get和post请求参数"></a>处理get和post请求参数</h4><p>get请求参数</p><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//get请求参数,直接通过请求对象req.query属性获得,自动转化成对象形式</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>post请求参数</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//引入处理post请求参数的第三方模块</span><span class="token keyword">const</span> bodyparser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拦截所有请求,如果有post请求带来的请求参数,就用urlencoded将其转化为对象,添加给请求对象的body属性,如果没有post请求参数会自动next()交给下一个中间件</span><span class="token comment" spellcheck="true">//extended:false 使用querystring模块处理</span><span class="token comment" spellcheck="true">//extended:true 使用qs第三方模块处理请求参数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyparser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用urlencoded方法返回值也是一个函数,带参数req,res,next的</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/add'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>app.use的使用,在app.use中传递函数的调用</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//可以在app.use方法里面调用定义好的函数,可以带上实参来控制返回的函数</span><span class="token comment" spellcheck="true">//但是这个调用的函数要返回一个带有参数req,res,next的函数</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h4><pre class=" language-js"><code class="language-js">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index/:id/:name/:age'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//路由参数的表现形式为/123而不是分隔,这种方法也可以当作get请求参数</span>    <span class="token comment" spellcheck="true">//使用req.params属性读取路由参数,内部自动转化为对象形式</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要使用/index/id/name/age来访问该路由</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//拦截所有请求通过express内置的static(静态资源路径)访问静态资源,如果不需要访问静态资源会自动next下一个中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h4><p>下载art-template和express-art-template这两个模板引擎</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//告诉express框架使用什么模板引擎来渲染什么后缀的模板文件</span><span class="token comment" spellcheck="true">//1.模板后缀2.模板引擎</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'art'</span><span class="token punctuation">,</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//告诉express框架模板存放的位置,配置模板位置,第一个值是规定的配置模板路径需要写的,第二个值是模板所在路径</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//告诉express框架模板默认的后缀是什么,第一个参数是规定这样写的</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'art'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用res.render()方法使用模板引擎</span>    <span class="token comment" spellcheck="true">//将路径和后缀拼接好</span>    <span class="token comment" spellcheck="true">//直接将拼接好的结果相应给了客户端,不需要设置变量接收</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'index'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//将公共数据添加到locals对象下,每个模板都可以访问到该数据locals.变量名 = 数据</span>app<span class="token punctuation">.</span>locals<span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>express框架提供了一套完整构建web网站结局方案,比起使用原生更加快捷方便，结构看起来更加清晰</li><li>创建服务器不需要引入http模块，直接调用require框架返回的方法创建服务器对象，监听路有不需要判断路径和请求方式什么的，可以直接使用服务器对象下的get、post、use方法，使用res.send()响应给浏览器不需要往响应头再去指定类型和编码了</li><li>模块化路由，可以根据请求路径不同在不同模块中(不同js文件)创建路由对象具体的请求响应步骤在该文件中执行,只需要导入模块对象,在主入口文件中导入指定对应路由的请求地址即可</li><li>处理get请求参数,直接使用请求对象中的.query属性即可,post请求参数导入请三方模块body-parser返回一个处理参数的对象,在use方法中调用该对象下的<strong>urlcoded({extended:false})</strong>即可在请求对象中使用body属性获取请求参数对象</li><li>路由参数，就是指定路由地址/参数1/参数2，而不是以？分隔的参数，通过请求对象的params属性获取</li><li>静态资源访问直接在use方法中调用框架提供的<strong>static()</strong>方法即可，参数填静态资源的路径s</li><li>使用模板引擎,下载express-art-template 和 atr-tempalate，做四件事<ul><li>设置用什么模板引擎来渲染什么后缀的模板文件engine方法</li><li>用set方法配置模板文件的根目录</li><li>用set方法配置模板文件的默认后缀名</li><li>用响应对象中的render(‘文件名不需要后缀’, ‘数据’)方法即可渲染想要的模板文件到页面中</li><li>公共数据需要所有模板都能访问到的数据,可以属性的形式添加到<strong>locals</strong>对象下</li></ul></li><li>中间件的使用,即框架提供的一些方法用来处理客户端请求的,用next()方法可以将请求处理权交给下一个中间件,协同处理同一请求,错误处理中间件,用来在发生错误时调用,使文件再发生错误时能正常运行,同步通过throw new error正常抛出错误调用,异步通过next()传入错误对象调用</li></ol>]]></content>
      
      
      <categories>
          
          <category> Express框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node模板引擎</title>
      <link href="/2020/02/18/node.js04/"/>
      <url>/2020/02/18/node.js04/</url>
      
        <content type="html"><![CDATA[<h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>使用模板引擎是为了方便拼接html文件字符串,目前使用最多的是art-template模板引擎</p><p>基本使用,先下载第三方模块art-template,然后引用会返回一个方法,这个方法用来拼接模板中的字符串,模板就是需要拼接的html文件,只不过一般改成art后缀</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//返回一个方法</span><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> views <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'index.art'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法第一个参数为模板的路径绝对路径,第二个参数为要在模板中显示的数据,对象类</span><span class="token comment" spellcheck="true">//返回是拼接好的字符串</span><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span>views<span class="token punctuation">,</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><p>标准语法            </p><p>原始语法        &lt;%= 数据 %&gt;</p><p>模板引擎默认不识别数据中的html标签，如果需要识别html标签需要原文输出</p><p>标准语法            </p><p>原始语法        &lt;%- 数据 %&gt;</p><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><pre><code>标准语法{{if 条件}} ... {{/if}}{{if 条件1}} ... {{else if 条件2}} ... {{/if}}原始语法&lt;% if (条件) { %&gt; ... &lt;% } %&gt;&lt;% if (条件) { %&gt; ... &lt;% } else if (条件2){ %&gt; ... &lt;% } %&gt;</code></pre><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><pre><code>标准语法$index表示索引,$value表示数组元素{{each 数据}}    {{$index}} {{$value}}{{/each}}原始语法&lt;% for(var i = 0; i &lt; 数据.length; i++) { %&gt;    &lt;%= i %&gt; &lt;%= 数据[i]&gt;&lt;% } %&gt;</code></pre><h4 id="子模版"><a href="#子模版" class="headerlink" title="子模版"></a>子模版</h4><p>子模版将网站公共的区块(头部、尾部)抽离到单独的文件中,然后再想要使用子模版的页面引入子模版即可</p><pre><code>标准语法{{include '模板路径'}}原始语法&lt;% include(&#39;模板路径&#39;)%&gt;</code></pre><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><ol><li><p>把html骨架模板单独拿出来放在一个模板里,因为所有页面都需要他,然后每个页面在使用的时候继承该html骨架模板即可</p></li><li><p>由于每个页面模板需要填写的link以及内容不同,所以在骨架模板中可以用block ‘填充部分名字’ /block表示该位置需要你继承时填入你自己所需要的,例如这是一份骨架模板,页面标题和link引入文件部分和内容部分,需要你继承的时候自己去填写</p></li><li><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{block 'title'}}{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">需要填充标题</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span>    {{block 'link'}}{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">需要填充引入的文件</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    {{block 'content'}}{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">需要填充内容</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>继承骨架模板,继承时用 extend ‘骨架模板路径’,同时用 block ‘填充部分名字’  /block,把你这个页面需要的内容填充完整</p><pre class=" language-html"><code class="language-html">{{extend './common/layout.art'}}{{block 'title'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">填充了标题</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span>{{block 'link'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">填充了引入的css文件</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span>{{/block}}{{block 'content'}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>{{/block}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>--</span> <span class="token attr-name">填充了内容</span> <span class="token attr-name">--</span><span class="token punctuation">></span></span></code></pre></li></ol><h4 id="模板配置"><a href="#模板配置" class="headerlink" title="模板配置"></a>模板配置</h4><p>1.模板中不能直接使用第三方模块的方法,需要像模板中导入变量</p><p>template.defaults.imports.变量名 = 变量值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> format <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'date-format'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入处理时间的第三方模块</span><span class="token comment" spellcheck="true">//将format方法导入模板中,那么模板中就可以使用该方法</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>imports<span class="token punctuation">.</span>format <span class="token operator">=</span> format<span class="token punctuation">;</span></code></pre><p>2.配置模板的根目录,如果模板都在同一目录下,我们可以设置根目录,那么每次使用template是的路径就可以直接写模板文件名,还可以配置模板的默认后缀</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//配置模板根目录,模板根目录为views文件夹</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>root <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置模板的默认后缀,将模板默认后缀设置为.art</span>template<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>extname <span class="token operator">=</span> <span class="token string">'.art'</span><span class="token comment" spellcheck="true">//写路径的时候直接写views下文模板名即可,默认后缀为.art</span><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token string">'06'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>模板引擎,在我们想要网站动态将html文件响应给页面时,之前的做法是将整个HTML文件拼接字符串当作变量响应给客户端,现在可以直接用模板引擎在html页面进行数据的操作,然后返回直接拼好的字符串.    在模板中我们可以原始方法和标准方法对数据进行处理,也可以使用提供的一些方法在模板说写js语法,将html页面里的数据变成动态的</p>]]></content>
      
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB数据库增删改查</title>
      <link href="/2020/02/15/node.js03/"/>
      <url>/2020/02/15/node.js03/</url>
      
        <content type="html"><![CDATA[<h3 id="mongoDB数据库"><a href="#mongoDB数据库" class="headerlink" title="mongoDB数据库"></a>mongoDB数据库</h3><p>又称为NoSql数据库,即非关系型数据库,适用于处理大数据,采用json格式来存储数据，契合javascript语法操作，因此很适合node.js的开发者</p><p>操作mongoDB可以通过node.js中提供的数据库API来进行操作，也可以使用mongoD的可视化操作软件来进行操做</p><h3 id="数据库中一些概念"><a href="#数据库中一些概念" class="headerlink" title="数据库中一些概念"></a>数据库中一些概念</h3><p>一个数据库软件中可以包含多个数据仓库，每一个数据仓库中可以创建多个数据集合来存放不同类别的数据，每一集合中存放了同一类的一组数据叫文档，由json对象的形式存取，采用键值对的方式存取，对象的属性就叫字段</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/mongdb%E6%A6%82%E5%BF%B5.png" alt=""></p><h3 id="使用node-js操作mongodb"><a href="#使用node-js操作mongodb" class="headerlink" title="使用node.js操作mongodb"></a>使用node.js操作mongodb</h3><p>下载第三方模块mongoose,使用connect方法连接数据库,首先需要在命令行中启动mongdDB</p><pre><code>net stop mongdodb //停止mongodb服务net start mongodb //开启mongodb服务</code></pre><p>connect方法中有两个参数,第一个是数据库的地址类似url地址，第二个是选项,这个方法返回的是promise对象,再mongdodb中不需要使用什么命令创建数据库，如果你连接的数据库不存在，会自动创建该数据库</p><h3 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h3><p>node中与数据库相关的api的都是异步的,所以支持promise的方法获取回调结果</p><h4 id="方法一利用实例对象插入文档"><a href="#方法一利用实例对象插入文档" class="headerlink" title="方法一利用实例对象插入文档"></a>方法一利用实例对象插入文档</h4><ol><li>首先需要创建集合用来存放具体的数据,用model()方法,返回的是一个构造函数,用实例对象的方法来操作数据</li><li>创建集合之前需要规定集合的规则即规定集合中数据属性和其数据类型,用mongodb.Schema构造函数创建</li><li>像集合中插入数据,即创建文档,new一下model()方法返回的构造函数,写入要插入的数据按照集合规则来写,最后保存</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/playground'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>useNewUrlParser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> useUnifiedTopology<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库连接成功'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span><span class="token string">'数据库连接失败'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建集合的规则,即规定需要加入的数据的数据类型</span><span class="token keyword">const</span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    author<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    publish<span class="token punctuation">:</span> Boolean<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建集合</span><span class="token keyword">const</span> Course <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Course'</span><span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个参数集合名称和集合规则，返回构造函数,利用实例对象的方法操作集合中的数据</span><span class="token comment" spellcheck="true">//创建文档,像集合中插入数据</span><span class="token keyword">const</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'node.js基础'</span><span class="token punctuation">,</span>    author<span class="token punctuation">:</span> <span class="token string">'曹强'</span><span class="token punctuation">,</span>    publish<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用实例对象的save方法保存数据</span>course<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="方法二是利用构造函数的create方法"><a href="#方法二是利用构造函数的create方法" class="headerlink" title="方法二是利用构造函数的create方法"></a>方法二是利用构造函数的create方法</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过create()方法,两个参数第一个是插入的数据,第二个回调返回插入数据的结果和错误信息</span>Course<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'javascript'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'曹强'</span><span class="token punctuation">,</span> publish<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//错误信息</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前插入的文档</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//通过promise对象操作异步结果</span>Course<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'javascript'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'曹强'</span><span class="token punctuation">,</span> publish<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doc <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="导入数据到数据库中"><a href="#导入数据到数据库中" class="headerlink" title="导入数据到数据库中"></a>导入数据到数据库中</h4><p>适用于json文件中的数据</p><pre><code>mongoimport -d 数据库名称 -c 集合名称 --file 要导入的数据文件    //使用该命令前首先要将mongoimport.exe的路径添加到系统环境变量中</code></pre><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a><strong>查询文档</strong></h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//查找集合find()返回promise对象,查找一组数据,以数组形式返回</span><span class="token comment" spellcheck="true">// User.find().then(result => console.log(result)).catch(err => console.log(err));</span><span class="token comment" spellcheck="true">//查找一个对象findOne(),默认返回第一个数据的对象,只会查找一个</span>User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个方法都可以传对象参数作为查找条件</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//$gt匹配大于 $lt匹配小于   匹配age大于20并且小于50的</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token punctuation">{</span>$gt<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span> $lt<span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$in匹配是否包含</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>hobbies<span class="token punctuation">:</span> <span class="token punctuation">{</span>$<span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'足球'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//select()方法查询字段,不同字段之间空格隔开,默认会查询_id字段在前面加-排除</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'name age -_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sort()根据什么字段进行排序,前面加-为降序不加则为升序</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token string">'-age'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//skip()跳过多少数据 limit()限制查询数量</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//删除满足条件的一个数据,如果有多个满足条件的删除第一个,返回删除的那个数据</span>User<span class="token punctuation">.</span><span class="token function">findOneAndDelete</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据条件删除多个数据,如果不传条件或传空对象默认删除所有</span><span class="token comment" spellcheck="true">//返回一个对象{n:删除的个数,ok:删除是否成功(0/1),deletedCount:删除的个数}</span>User<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="更新数据-修改"><a href="#更新数据-修改" class="headerlink" title="更新数据/修改"></a>更新数据/修改</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//根据条件更新一个数据,返回一个对象{ n: 1, nModified: 1, ok: 1 }</span><span class="token comment" spellcheck="true">// User.updateOne({name: '张三'}, {name: '张飞'}).then(result => console.log(result));</span><span class="token comment" spellcheck="true">//根据条件更新多个数据,返回操作成功的对象</span>User<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>验证字段</strong>是否满足规则，限定字段的一些规则</p><p><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/Snipaste_2020-02-15_22-01-55.png" alt=""></p><p>用catch方法捕捉验证的错误信息</p><pre class=" language-js"><code class="language-js">Post<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>title<span class="token punctuation">:</span><span class="token string">'aa'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> category<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token string">'bd'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取错误信息对象</span>        <span class="token keyword">const</span> err <span class="token operator">=</span> error<span class="token punctuation">.</span>errors<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//errors存着所有有错误的字段中的信息</span>        <span class="token comment" spellcheck="true">// 循环错误信息对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将错误信息打印到控制台中</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>集合的关联</p><p>在想要关联的字段规则的type属性中指定想要关联字段的ID<strong>mongoose.Schema.Types.ObjectId</strong>,    ref:关联的集合</p><p>联合查询用populate()指定要查询的关联字段即可</p>]]></content>
      
      
      <categories>
          
          <category> mongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
            <tag> NoSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的递归和闭包</title>
      <link href="/2020/02/13/han-shu-de-di-gui-he-bi-bao/"/>
      <url>/2020/02/13/han-shu-de-di-gui-he-bi-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="函数的递归"><a href="#函数的递归" class="headerlink" title="函数的递归"></a>函数的递归</h1><p>函数的递归是指在函数中调用函数自己</p><p>从定义上我们就可以看出,一个函数在外部被调用，在里面还需要调用自己，那么它就会在内部一直反复调用自身，因此我们要限制递归的条件，不能无限被调用。</p><h2 id="递归的条件"><a href="#递归的条件" class="headerlink" title="递归的条件"></a>递归的条件</h2><p>递归有两大条件</p><ol><li>递归的停止条件,在什么时候停止调用自己,但是只有停止条件不行,我们还需要每一次递归后都一步步接近这个条件，所以一般递归问题我们都会反向思考,每次递归的过程都会一步一步的将问题所简化</li><li>调用递归的条件,就是我们想要在什么时候调用自己</li></ol><h4 id="递归的举例"><a href="#递归的举例" class="headerlink" title="递归的举例"></a>递归的举例</h4><p>我对递归的理解就是,在你执行一个函数的过程中,中间需要你去调用另外一个函数,但是本身并没有被执行完，那么就会暂时将自己压下来去等待中间函数的调用,在中间函数执行过程中,又没有执行完成就去调用另一个函数,当前函数又会被压下,如此反复循环,等到达终止条件时,最后一个调用执行完成会从当前为起点往回依次执行完之前之前被压下的函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>图解步骤<br><img src="https://raw.githubusercontent.com/Lycra-98/picbed/master/blogimg/%E9%80%92%E5%BD%92%E6%A1%88%E4%BE%8B.png" alt=""></p><p><strong>斐波那契数列</strong><br>            1,1,2,3,5,8,13<br>​            第一项1 第二项1 第三项2 第四项3 第五项5 第六项8 第七项13<br>​            从第三项开始2 = 1 + 1   第二项 + 第一项<br>​            第四项3 = 2 + 1     第三项 + 第二项<br>​            因此从第三项开始后面的数等于前面两项之和<br>​            递归公式<br>​            f(3) = f(2) + f(1)  f(4) = f(3) + f(2)<br>​               ….<br>​            f(n) = f(n -1) + f(n - 2)<br>​            递归结束条件为n = 1 和 n = 2</p><pre class=" language-js"><code class="language-js">        <span class="token keyword">function</span> <span class="token function">fibonacc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//第一项和第二项直接返回1</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//当n从第三项开始,后面一项等于前面两项之和</span>                <span class="token keyword">return</span> <span class="token function">fibonacc</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacc</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fibonacc</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fibonacc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>深拷贝递归</strong></p><pre class=" language-js"><code class="language-js">        <span class="token comment" spellcheck="true">//深拷贝是多层拷贝,如果拷贝的是引用数据类型,会重开一个内存空间把数据完全拷贝到新对象中,而不是只拷贝内存地址</span>        <span class="token comment" spellcheck="true">//因此内存地址不是指向同一个，修改其中一个值不会影响另一个</span>        <span class="token keyword">let</span> cq <span class="token operator">=</span> <span class="token punctuation">{</span>            uname<span class="token punctuation">:</span> <span class="token string">'cq'</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>                sex<span class="token punctuation">:</span> <span class="token string">'man'</span><span class="token punctuation">,</span>                birth<span class="token punctuation">:</span> <span class="token string">'10/24'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'blue'</span><span class="token punctuation">,</span> <span class="token string">'pink'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//因为深拷贝拷贝多层,见到数据类型直接拷贝值,复杂数据类型需要遍历重新赋值给新对象</span>        <span class="token comment" spellcheck="true">//外层对象也需要遍历,因此内层如果是复杂数据类型需要重复遍历,就需要使用递归</span>        <span class="token comment" spellcheck="true">//封装深拷贝函数两个参数,第一个参数拷贝给谁(目标对象),第二个参数原始对象即被拷贝的对象</span>        <span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">,</span> oldObj<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//遍历被拷贝的对象</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取对象的属性值</span>                <span class="token keyword">let</span> item <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//因为对象中存了不同数据类型的数据，字符串、数字、数组、对象等</span>                <span class="token comment" spellcheck="true">//如果是简单数据类型直接复制,将值直接赋值给目标对象即可newObj[k] = item</span>                <span class="token comment" spellcheck="true">//如果是复杂数据类型，要进入其中继续遍历,将里面的值取出来一个个赋值</span>                <span class="token comment" spellcheck="true">//判断item的类型</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果是数组</span>                    newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果是对象</span>                    newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//就是简单数据类型</span>                    newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> newObj<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cq<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deepCopy</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> cq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//深拷贝修改其中一个引用数据类型的值不会改变另一个</span>        o<span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变了</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cq<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来的没有改变</span></code></pre><p><strong>猴子吃桃问题</strong></p><p>​    猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个，<br>​        第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃前一天剩下的一半零一个。<br>​        到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘多少个桃子？<br>​        第一天的桃子数量,等于第二天的桃子数量+1乘以二 f(1) = (f(2) + 1) * 2<br>​        第二天的桃子数量,等于第三天的桃子数量+1乘以二 f(2) = (f(3) + 1) * 2<br>​        第三天的桃子数量,等于第四天的桃子数量+1乘以二 f(3) = (f(4) + 1) * 2<br>​        …第十天的桃子数量,等于1                 f(10) = 1<br>​        每天的桃子数量等于后一天桃子数量+1 乘以2    从第十天可以倒推第一天的   当n==10停止递归</p><pre class=" language-js"><code class="language-js">        <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第十天停止递归</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`第一天一共摘了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">个桃子`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包的简单理解就是函数的嵌套,一个函数能访问到另一个函数中的局部变量。</p><p>这里有一个局部变量的概念，就是局部作用域即函数作用域,一般来说函数作用域在函数调用的时候被创建,这个时候这个作用域的变量会被开辟一个内存空间去保存,在函数调用完成后，函数作用域就会销毁,同时该变量也会被销毁，释放这个内存空间，这是一般情况。</p><p>闭包就是延续了变量的生命周期，使其嵌套的函数能够访问到这个局部变量，尽管这个函数已经被调用,在函数调用完成时,闭包现象就是能继续访问里面的局部变量,说明变量没有被销毁，还存在意味着内存空间还存着它，造成了内存泄露。</p><p>来看一下代码体验</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                n<span class="token operator">++</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token number">2</span><span class="token keyword">var</span> v1 <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//接收函数的返回值即inner函数</span><span class="token comment" spellcheck="true">//调用inner函数</span><span class="token function">v1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//能够访问到变量n 输出11，此时n变为11</span><span class="token function">v2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//n = 11没有被销毁,输出12</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http协议与报文以及请求参数</title>
      <link href="/2020/02/12/node.js02/"/>
      <url>/2020/02/12/node.js02/</url>
      
        <content type="html"><![CDATA[<p>ip地址和域名</p><p>ip地址是每个服务器都特有的表示，客户端同ip地址可以找到指定的服务器，而域名则是网址名，一般都是将域名转换为ip地址才能找到服务器</p><p>端口就是服务器提供给客户端的一些服务类型，比如客户端浏览器要想向服务器发送web请求，那么这个时候服务器就会有对应的web服务端口(80端口)去接收这个请求，再比如浏览器向服务器发送了发送邮件的请求，那么服务器就会有一个专门处理邮件问题的端口去接受这个请求。</p><p>url</p><p>统一资源定位符</p><p>就是服务器端资源所在的位置，一般由网络协议、ip/域名：端口、资源所在位置等组成</p><p>在开发阶段我们自己的电脑如果安装服务器端的运行环境就可以用来创建接收客户端信息的对象，来响应客户端的请求，本地服务器的域名为localhost 本地ip127.0.0.1    可以用localhost来访问到自己的电脑就是开发者自己电脑上的本地服务器</p><p>创建网站服务器</p><p>首先需要引入http模块，使用creatServer()创建服务器对象，然后监听客户端请求事件，事件处理函数中有两个参数，一个是请求对象，一个响应对象，简单的用响应对象做出响应,然后监听我们的端口(3000),这样一来简单web服务器搭建好了,利用本地域名进行访问</p><p>可以用请求对象获取请求类型请求地址请求消息等等</p><p>可以用响应对象对客户端返回一些信息，如响应头中修改状态码和响应报文的一些信息</p><p>一般用on方法绑定一些事件</p><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a><strong>http协议</strong></h3><p>http协议相当于服务器与客户端之间沟通的桥梁、沟通的规范，超文本传输协议,超文本就相当于html</p><p>客户端向服务器端请求数据，服务器接收这个请求并可以做出响应,请求或响应的数据块成为<strong>报文</strong></p><p><strong>请求报文</strong>客户端向服务器发出的请求</p><p>请求头中的信息和响应头中的信息一般是键值对形式对象存在的</p><p>请求方式，告诉服务器这次请求的目的，GET(请求数据)常见的客户端请求数据就是输入网址 post(发送数据)，一般使用post方式更加安全</p><p>一般输入网址为客户端的get请求，表单提交为post请求</p><p><strong>响应报文</strong></p><p>一般响应报文主要是http状态码的形式返回客户端</p><ul><li>200 请求成功</li><li>404 请求的资源没有被找到</li><li>500 服务器端错误</li><li>400 客户端请求有语法错误</li></ul><p>请求参数分为get请求参数和post请求参数</p><p><strong>get请求参数</strong></p><p>一般在浏览器请求地址的时候,地址后面会有请求参数？uname=caoqiang&amp;age=18    以&amp;分隔的键值对形式</p><p>因为这个参数是在url中,因此需要引入url模块来处理这个参数，变成我们想要的对象形式,用parse()方法解析url地址，返回url的信息是一个对象，加第二个参数为true就能将请求参数转化为对象形式</p><p><strong>post请求参数</strong></p><p>格式与请求参数一样，放在请求报文中，而不是放在地址栏中,因此我们需要引用querystring模块去将这个字符串解析成对象,在发送post请求的时候,需要data事件(在传递请求参数的时候触发)和end事件(传递参数结束时触发)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入查询字符串模块</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义一个字符串来进行拼接，因为传递的参数有很多</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//请求监听data时end事件</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//传递时进行拼接</span>        str <span class="token operator">+</span><span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//传递结束时进行解析成对象</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我的第一个服务器创建成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始搭建hexo博客</title>
      <link href="/2020/02/12/da-jian-hexo-bo-ke-01/"/>
      <url>/2020/02/12/da-jian-hexo-bo-ke-01/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步准备工作"><a href="#第一步准备工作" class="headerlink" title="第一步准备工作"></a>第一步准备工作</h3><p>首先下载node.js运行环境,去官网下载长期稳定版,node安装好中自带npm包管理工具,因为hexo博客框架是基于node.js的，另外还需要下载git,确认这两个本电脑都已经安装可以去看本地path环境变量是否存在两者路径,如果有则说明安装成功，没有则需自行配置。</p><h3 id="第二步下载hexo"><a href="#第二步下载hexo" class="headerlink" title="第二步下载hexo"></a>第二步下载hexo</h3><p>1.在需要的文件中打开命令行工具,安装hexo命令行全局工具</p><pre><code>npm install -g hexo-cli</code></pre><p>2.然后用hexo命令创建博客文件夹(文件夹名字可自行定义)</p><pre><code>hexo install blog</code></pre><p>3.执行完以上操作后,可以看到生成了blog文件夹,注意里面的.config.yml文件和themes文件(.confing.yml文件是配置网站的一些基本信息，themes是主题后面会详细说明),利用package.json文件里面依赖属性可以下载hexo所需要的依赖包</p><pre><code>npm install</code></pre><p>4.下载完成后会多出一个node_modules的文件夹，这个文件是下好的依赖包</p><p>这样一个基本博客结构就搭建好了,进入到blog文件夹打开命令行启动hexo</p><pre><code>hexo s</code></pre><p>启动之后就可以在本地localhost:4000查看到博客，这样一个基本的本地博客就搭建好了</p><p>一些常用的命令</p><pre><code>hexo server  简写 hexo s         //本地启动hexo generate 简写 hexo g     //生成静态文件hexo deploy 简写 hexo d         //部署到网站hexo clean                     //清除缓存和已经生成的静态文件hexo new    简写 hexo n        //page新建页面    &quot;文章名&quot;新建文章</code></pre><p>更多命令请到<a href="https://hexo.io/zh-cn/docs/commands#new" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands#new</a>中查看</p><h3 id="第三步部署到远端服务器"><a href="#第三步部署到远端服务器" class="headerlink" title="第三步部署到远端服务器"></a>第三步部署到远端服务器</h3><p>部署到自己的github仓库,新建一个仓库,仓库名只能是自己的github ID.github.io</p><p>然后修改_config.yml文件,找到deploy</p><pre><code>deploy:  type: git  repo: git@github.com:ID/ID.github.io.git  branch: master</code></pre><p>然后命令行</p><pre><code>hexo ghexo d</code></pre><p>这样输入<a href="https://id.github.io就可以远端访问博客了,可以自行更换域名,后续会讲" target="_blank" rel="noopener">https://id.github.io就可以远端访问博客了,可以自行更换域名,后续会讲</a></p><h3 id="更换自己想要的主题"><a href="#更换自己想要的主题" class="headerlink" title="更换自己想要的主题"></a>更换自己想要的主题</h3><p>在github上找自己想要的hexo主题,或者hexo官网选择,默认的主题是landscape，在themes文件夹是主题文件夹</p><p>进入到themes文件夹,输入git命令</p><pre><code>git clone 你想要的主题仓库地址</code></pre><p>进入.config.yml，更换主题</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: 主题名</code></pre><p>去对应主题查看官方文档配置自己想要的样式</p><pre><code>hexo cleanhexo ghexo s</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初步使用git</title>
      <link href="/2020/02/12/git/"/>
      <url>/2020/02/12/git/</url>
      
        <content type="html"><![CDATA[<h3 id="进入到需要上传到远端的文件-使用全局配置"><a href="#进入到需要上传到远端的文件-使用全局配置" class="headerlink" title="进入到需要上传到远端的文件,使用全局配置"></a>进入到需要上传到远端的文件,使用全局配置</h3><p>git config –global user.name “github名字”和git config –global user.email “github邮箱”<br>在github上建立远程仓库</p><p>git init进行本地初始化  建立本地暂存区</p><p>readme.md//这个markdown文件是进行说明的文档</p><p>.git文件存储当前项目的所有版本信息</p><p>本地文件夹叫工作区  git init后的是暂存区 github上创建的仓库是远程仓库</p><p>将工作区的文件提交到暂存区<br>git add 文件名 或者 git add *   表示提交所有文件    git commit -m “提交的描述”</p><h3 id="查看当前工作区的状态"><a href="#查看当前工作区的状态" class="headerlink" title="查看当前工作区的状态"></a>查看当前工作区的状态</h3><p>git status  用于查看当前工作区的文件是否被修改</p><p>如果被修改了可以git add 文件名 重新提交修改过的文件    也可以用git checkout 文件名从暂存区恢复文件到工作区</p><h3 id="git-diff-可以详细查看工作区和暂存区的版本区别-看看哪个文件被修改了-修改了什么内容"><a href="#git-diff-可以详细查看工作区和暂存区的版本区别-看看哪个文件被修改了-修改了什么内容" class="headerlink" title="git diff 可以详细查看工作区和暂存区的版本区别 看看哪个文件被修改了 修改了什么内容"></a>git diff 可以详细查看工作区和暂存区的版本区别 看看哪个文件被修改了 修改了什么内容</h3><h3 id="git-log-查看已经提交到暂存区的历史版本"><a href="#git-log-查看已经提交到暂存区的历史版本" class="headerlink" title="git log 查看已经提交到暂存区的历史版本"></a>git log 查看已经提交到暂存区的历史版本</h3><h3 id="恢复文件到指定的某一个版本"><a href="#恢复文件到指定的某一个版本" class="headerlink" title="恢复文件到指定的某一个版本"></a>恢复文件到指定的某一个版本</h3><p>git reset –hard 版本号 </p><p>检查暂存区所有文件都都没有问题后，就可以将暂存区文件上传到github上，但是要先生成ssh密匙授权本电脑   ssh-keygen -t rsa -C “你github邮箱” 就可以生成本机的ssh密匙然后填写到github的ssh选项中  添加成功后就可以从本机将暂存区的文件传到github远程仓库中</p><h3 id="暂存区-gt-远程仓库"><a href="#暂存区-gt-远程仓库" class="headerlink" title="暂存区 =&gt; 远程仓库"></a>暂存区 =&gt; 远程仓库</h3><p>git remote add origin 远程仓库地址<br>git push -u origin master<br>第一次提交会要求输入github用户和密码  </p><p>第二次提交直接git push即可</p><h3 id="创建分支-并将分支推送到远程仓库"><a href="#创建分支-并将分支推送到远程仓库" class="headerlink" title="创建分支 并将分支推送到远程仓库"></a>创建分支 并将分支推送到远程仓库</h3><p>每次项目新完成一个功能需要在一个新分支里进行最后合并到主分支master<br>git checkout -b 新分支名    创建并切换到新分支<br>git branch 查看分支<br>git checkout 分支名 切换分支<br>每次完成一个新分支的功能之后切换到主分支 git checkout master<br>git merge 分支名  进行分支合并到主分支<br>进入到新创建的分支 将该分支推送到远程分支git push -u origin 远端分支名 第一次推送时 第二次如果修改了该分支直接git push即可</p><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>从远程仓库克隆项目到本地</p><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>从远程仓库同步本地代码,即更新代码</p>]]></content>
      
      
      <categories>
          
          <category> git项目工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js第一天的学习</title>
      <link href="/2020/02/10/node01/"/>
      <url>/2020/02/10/node01/</url>
      
        <content type="html"><![CDATA[<h3 id="进入Node-js的学习"><a href="#进入Node-js的学习" class="headerlink" title="进入Node.js的学习"></a>进入Node.js的学习</h3><p>node为服务器开发，为后面Ajax后端技术做铺垫</p><p>实现网站的业务逻辑    如登录</p><p>数据的增删改查    如购物车</p><p>node使用javascript语法开发后端应用（有大量开源库可以使用）</p><h3 id="Node是什么"><a href="#Node是什么" class="headerlink" title="Node是什么"></a>Node是什么</h3><p>node是跟浏览器一样是javascript的运行环境，不同浏览器通过不同的js引擎来编译JavaScript转化成计算机认识的语言，因此js引擎不同js的运行环境不同，于是node是基于谷歌的js引擎V8来进行开发，达到了开发统一性</p><h3 id="Node-js运行环境"><a href="#Node-js运行环境" class="headerlink" title="Node.js运行环境"></a>Node.js运行环境</h3><p>下载完成后安装目录不要出现中文，用系统命令工具打开执行node，path系统环境变量：存放node.exe路径的，可以通过cmd命令找出来</p><h3 id="Node-js组成"><a href="#Node-js组成" class="headerlink" title="Node.js组成"></a>Node.js组成</h3><p>ES+node模块化api</p><p>如果要在node里运行js文件，应该在命令行中运行，将命令行的路径改成运行文件对应的路径 node 文件名即可运行</p><p>node.js全局对象global        global有一些js中window的方法在Node中可以省略</p><h3 id="Node-js模块化开发"><a href="#Node-js模块化开发" class="headerlink" title="Node.js模块化开发"></a>Node.js模块化开发</h3><p>js的开发有两大问题<strong>文件依赖</strong>和<strong>命名冲突</strong></p><p>软件模块化开发可以一个功能即为一个模块，多个模块组合成一个应用，每一个模块可以独立存在,如果一个模块中有问题，可以把这个模块拿出来修改问题，其他模块不会被影响</p><p>node中一个js文件代表一个模块，在模块内部定义的变量和函数默认情况下在外部无法得到</p><p>node中模块成员导出，即将一个模块中的函数和变量用expotrs导出,在另一个模块中用require(路径)方法返回对象来使用,路径可以不要后缀名</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//想要将一个模块中的函数或者变量取出给另一个模块用</span><span class="token comment" spellcheck="true">//使用exports对象,将函数或者变量作为对象的属性存入</span>exports<span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在想要导出的函数和变量的模块中，使用require()方法来接收，返回值为exports对象</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./03.module-a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二种方法    可以用module.exports对象导出</p><p>exports对象是module.exports对象的别名，两者是指向同一个对象(同一个内存地址),如果以对象.属性导出，两者一样，如果以对象赋值的形式导出，以module.exports对象为准</p><h3 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h3><p>Node开发环境提供的API成为系统模块</p><p>系统模块提供了许多模快开发API如<strong>文件系统模块 fs</strong>，首先在另一个模块中使用其他模块得用require引入</p><p>fs中提供了读取文件方法readFile(‘文件路径’[,编码],callback)三个参数</p><p>回调函数中存放方法的返回结果,回调函数有两个参数,<strong>一般node中提供的API中的回调函数第一个参数都是err</strong>表示一个对象，用来存储错误的信息，没有错误信息则为null,第二个参数为文件读取的结果</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./.01.helloworld.js'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//err是一个对象,存储错误的信息,如果没有错误的信息则为null</span>    <span class="token comment" spellcheck="true">//doc是文件读取的结果</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>文件写入内容writeFlie(‘路径’,’数据’,callback)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./dome.txt'</span><span class="token punctuation">,</span> <span class="token string">'我是即将写入的内容'</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果路径中没有这个文件会自动创建</span>    <span class="token comment" spellcheck="true">//err错误信息对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件内容写入成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>path模块</p><p>window中路径分隔符可以 / \</p><p>Linux中只能/</p><p>路径拼接方法path.join(‘字符串1’…)返回值为拼接好的路径../../</p><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><p>一般node中都写绝对路径，如果相对路径是相对于文件本身就用相对路径如require(),但是大多数情况下相对路径都是相对于命令行工具所在的目录</p><p>用__dirname获取当前文件夹的绝对路径    再用path.join()拼接路径</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前文件夹绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼接好的绝对路径</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'01.helloworld.js'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'01.helloworld.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p>类似js插件,别人写好具有特定功能，我们可以直接拿来使用,也叫包</p><blockquote><p>第三方模块有两种形式：</p><ol><li>以js文件的形式存在，提供实现项目具体功能的API接口。本地安装</li><li>以命令行工具形式存在，辅助项目开发，例如   全局安装<ol><li>当文件修改时，自动重新node该文件</li><li>将md文档转换为更加通用的HTML文档</li></ol></li></ol></blockquote><h5 id="获取第三方模块"><a href="#获取第三方模块" class="headerlink" title="获取第三方模块"></a>获取第三方模块</h5><p>npm (node package manager) node的第三方模块管理工具</p><p>可以用这个工具到npm官网中下载想要的第三方模块</p><ul><li>所有第三方模块都被统一放置在了一个叫做<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>的网站中。</li><li>npm网站提供了一个叫npm的命令行工具用以下载此网站中的第三方模块。</li><li>Node环境默认集成了这个工具，所以可以直接使用，使用方式如下：<ul><li>npm install package  =&gt;  用npm命令安装(下载)第三方模块 (文件模块)</li><li>npm install package -g =&gt; 用npm命令安装(下载)第三方模块 (命令行工具)<ul><li>-g表示全局安装，即模块的使用不局限于当前项目，一般用于安装命令行工具。</li></ul></li></ul></li><li>默认情况下文件模块会被下载至一个叫做node_modules的文件夹中，如果文件夹不存在则自动创建。</li><li>全局安装的命令行工具会被下载到C:\Users\用户名\AppData\Roaming\npm文件夹中。</li><li>使用npm命令卸载包的方式<ul><li>npm uninstall package =&gt; 用npm命令卸载包</li></ul></li></ul><p><strong>nodemond第三方模块</strong>命令行工具要全局安装    可以实时检测文件的保存来执行文件    用nodemon来执行文件可以使用这个第三方模块    ctrl+c终止操作</p><p><strong>nrm</strong>全局    快速切换npm下载地址        默认是国外的nmpjs网站下载    切换到国内淘宝的下载地址    nrm ls下载地址列表 nrm use taobao    提高下载速度</p><h3 id="glup第三方模块"><a href="#glup第三方模块" class="headerlink" title="glup第三方模块"></a>glup第三方模块</h3><p>gulp提供的方法</p><p>gulp.src()获取任务要处理的文件    参数路径</p><p>gulp.dest() 输出文件，将处理好的文件输出 参数输出路径</p><p>gulp.task() 建立gulp任务</p><p>gulp.watch() 监控文件的变化</p><p>一般要在项目使用gulp模块，首先在npm中下载本地gulp库文件，当在项目目录中，创建一个src文件夹存放项目的所有源码,创建dist文件夹存放处理过后的文件,在各目录下创建gulpfile.js文件</p><p>在gulpfile.js中创建gulp任务,找到需要处理的文件经过.pipe处理输出到dist文件夹中,gulp任务创建完成后，下载</p><p>gulp-cli 命令行工具    在命令行中使用gulp命令来执行gulp任务 gulp 任务名即可</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gulp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建gulp任务gulp.task</span><span class="token comment" spellcheck="true">//第一个参数任务名,第二个参数任务的回调函数</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">'fisrt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我的第一个gulp任务'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//gulp.src()获取处理的文件</span>    gulp<span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">'./src/css/base.css'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//必须经过.pipe处理才能输出</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">'dist/css'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>gulp的插件:</p><ol><li>gulp-htmlmin:html代码压缩 安装 npm install   gulp-htmlmin</li><li>gulp-file-include:html公共模块提取 npm install gulp-file-include </li><li>gulp-less:less语法转化 npm install gulp-less </li><li>gulp-csso:css压缩 npm install gulp-csso</li><li>gulp-babel:JavaScript语法转化 npm install –save-dev gulp-babel @babel/core @babel/preset-env</li><li>gulp-uglify:压缩混淆js代码 npm install –save-dev gulp-uglify</li><li>！！！！！！注意！Gulp 4最大的变化就是你不能像以前那样传递一个依赖任务列表 如果Gulp是4.0的版本需要手动指定版本号 比如 npm install <a href="mailto:gulp@3.9.1">gulp@3.9.1</a> -D</li></ol><p>gulp插件的使用</p><p>使用npm下载插件        require引用插件        调用插件</p><p>找里面api怎么使用</p><p>gulp主要是为了项目上线给整个项目做了一些处理</p><h3 id="package-json的作用"><a href="#package-json的作用" class="headerlink" title="package.json的作用"></a>package.json的作用</h3><p>npm init 自动创建此文件后面 -y 都是用默认值</p><p>记录了项目的一些信息</p><p>在传输项目的时候不需要那些已经下载好的第三方模块文件夹,只需要package.json文件即可,然后用户根据此文件的”dependencies”属性依赖包直接npm install可以自动去找这个属性，来下载项目需要的第三方模块</p><h5 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h5><p>在项目的开发阶段和线上运营阶段，都需要依赖的第三方包，称为项目依赖。</p><p>使用<code>npm install 包名</code>命令下载的文件会默认被添加到package.json文件的dependencies字段中。</p><h5 id="开发依赖"><a href="#开发依赖" class="headerlink" title="开发依赖"></a>开发依赖</h5><p>在项目的开发阶段需要依赖，线上运营阶段不需要依赖的第三方包，称为开发依赖。</p><p>使用<code>npm install 包名 --save-dev</code>命令将包添加到package.json文件的devDependencies字段中。</p><p>npm install –production只下载dependencies中的依赖,即发布到线上时的依赖</p><p>package-lock.json记录了模块与模块之间依赖关系</p><p>版本和下载地址,加快了下载速度锁定了包的版本</p><p>“scripts”属性里存了一些命令的简写，如果写项目时有些比较长的命令需要重复输入,可以存在这个属性中定义一个简写    在命令行行中运行时 npm run 简写命令</p><h3 id="模块的查找规则"><a href="#模块的查找规则" class="headerlink" title="模块的查找规则"></a>模块的查找规则</h3><p>第一种方式require(‘./find.js’)引入模块参数是一个完整的路径文件,这会直接去找这个文件find.js</p><p>第二方式如果路径文件没有加后缀名require(‘./find’)</p><ul><li><p>首先去找当前文件夹下的find.js文件，如果找不到就在当前目录寻找同名文件夹</p></li><li><p>如果找了同名文件夹，就执行同名文件夹下index.js文件</p></li><li><p>如果同名文件夹中没有index.js，就会进入到同名文件夹根目录下的package.json文件中寻找里面main属性</p></li><li><p>如果在同名文件夹中找到了main属性中的js文件就引用成功,没找到则会报错</p></li></ul><p>第三种方式如果直接写模块名require(’find‘)</p><ul><li>首先会把find当成系统模块,如果没有该系统模块</li><li>则会当成第三方模块,则去node_modules文件夹下找同名的js文件</li><li>如果在node_modules文件夹下没有找到同名js文件，则会去找同名的js文件夹里面的index.js文件</li><li>如果没有找到index.js文件，则会通过同名文件夹下package.json去找main属性中入口文件,如果找不到则会报错</li></ul><p><strong>综上所述package.json中的main属性是模块的主模块文件,及模块的入口文件，里面所有的模块都依赖于这个主模块文件</strong></p><h3 id="node第一天的总结"><a href="#node第一天的总结" class="headerlink" title="node第一天的总结"></a>node第一天的总结</h3><p>​    node中最主要就是模块化开发，因此想要使用模块相当于引用文件需要用require()引入模块，有node环境自带的系统模块还有各种第三方模块，当你想使用哪个模块时就去文档里面找这个模块的一些api，知道api的用法和里面的参数和返回值，通过提供的这些api方法来进行操作，另外就是第三方模块可以用安装node后自带的npm工具下载，下载命令行辅助工具时一般是全局安装，查第三方模块api的使用</p><p>​    package.json文件主要记录了项目的一些信息，包括项目的名字、描述、项目的主入口文件、依赖的模块、简易化命令、代码协议等等。这个文件一般在项目的根目录,当我们导入别人的项目到本地时，可以通过这个文件中的依赖模块信息在npm下载模块，也可以查看到别人项目的信息等</p>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
